# inner_attribute
| any multiline
| string here

@ outer_attribute_1
@ outer_attribute_2
| also can have contents
import bdl.dependency { MyDep, MyDep2 as Blabla }

scalar MyScalar = string

enum MyEnum {
  ITEM1 = "ITEM1",
  ITEM2 = "ITEM2",
}

union MyUnion { // "type" for discriminator key, "Foo"/"Bar" for value
  Foo,
  Bar(baz: string), // e.g. { "type": "Bar", "baz": "blabla" }
}

union MyUnion2"__tag__" {
  Foo"value-123",
  Bar"value-456"(baz: string), // e.g. { "__tag__": "value-456", "baz": "blabla" }
}

// 직렬화된 json에 필드가 누락된 경우
// - 일반 필드: 기본값 사용 (스키마에 사이클이 존재할 경우 컴파일 오류)
// - 느낌표: 유효성 검사에서 오류
// - 물음표: null 사용
struct MyStruct {
  foo: boolean,
  bar!: number,
  baz?: string,
  qux: string[],
  quux: number[string], // e.g. { "foo": 0, "bar": 1, ... }
  corge: boolean[MyEnum], // e.g. { "ITEM1": true, "ITEM2": false }
}

rpc MyRpcService {
  method(): void,
  methodWithError(): void throws MyError,
}

socket MySocketService {
  server -> client: ServerMessage,
  client -> server: ClientMessage,
}
