# standard - portone-rest-api

import portone.v2.api.data {
  CancelCashReceiptError,
  CancelCashReceiptResponse,
  CashReceipt,
  GetCashReceiptError,
  GetCashReceiptsBody,
  GetCashReceiptsError as GetCashReceiptsError1,
  GetCashReceiptsResponse,
  IssueCashReceiptBody,
  IssueCashReceiptError as IssueCashReceiptError1,
  IssueCashReceiptResponse,
}

@ http - GET /payments/{paymentId}/cash-receipt
@ summary - 현금 영수증 단건 조회
@ description - 주어진 결제 아이디에 대응되는 현금 영수증 내역을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetCashReceiptByPaymentId =
  GetCashReceiptByPaymentIdInput ->
  GetCashReceiptByPaymentIdOutput throws GetCashReceiptByPaymentIdError

struct GetCashReceiptByPaymentIdInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ in - query
  @ summary - 상점 아이디
  @ description - 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
  storeId?: string,
}

oneof GetCashReceiptByPaymentIdOutput {
  @ status - 200
  @ description - 성공 응답으로 현금 영수증 객체를 반환합니다.
  CashReceipt,
}

oneof GetCashReceiptByPaymentIdError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetCashReceiptError,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetCashReceiptError,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetCashReceiptError,

  @ status - 404
  @ description - * `CashReceiptNotFoundError`: 현금영수증이 존재하지 않는 경우
  GetCashReceiptError,
}

@ http - GET /cash-receipts
@ summary - 현금영수증 다건 조회
@ description - 주어진 조건에 맞는 현금영수증들을 페이지 기반으로 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetCashReceipts =
  GetCashReceiptsBody ->
  GetCashReceiptsOutput throws GetCashReceiptsError

oneof GetCashReceiptsOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 현금영수증 리스트와 페이지 정보가 반환됩니다.
  GetCashReceiptsResponse,
}

oneof GetCashReceiptsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetCashReceiptsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetCashReceiptsError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetCashReceiptsError1,
}

@ http - POST /cash-receipts
@ summary - 현금 영수증 수동 발급
@ description - 현금 영수증 발급을 요청합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc IssueCashReceipt =
  IssueCashReceiptBody ->
  IssueCashReceiptOutput throws IssueCashReceiptError

oneof IssueCashReceiptOutput {
  @ status - 200
  @ description - 성공 응답
  IssueCashReceiptResponse,
}

oneof IssueCashReceiptError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  IssueCashReceiptError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  IssueCashReceiptError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  IssueCashReceiptError1,

  @ status - 404
  @ description - * `ChannelNotFoundError`: 요청된 채널이 존재하지 않는 경우
  IssueCashReceiptError1,

  @ status - 409
  @ description - * `CashReceiptAlreadyIssuedError`: 현금영수증이 이미 발급된 경우
  IssueCashReceiptError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  IssueCashReceiptError1,
}

@ http - POST /payments/{paymentId}/cash-receipt/cancel
@ summary - 현금 영수증 취소
@ description - 현금 영수증 취소를 요청합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CancelCashReceiptByPaymentId =
  CancelCashReceiptByPaymentIdInput ->
  CancelCashReceiptByPaymentIdOutput throws CancelCashReceiptByPaymentIdError

struct CancelCashReceiptByPaymentIdInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ in - query
  @ summary - 상점 아이디
  @ description - 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
  storeId?: string,
}

oneof CancelCashReceiptByPaymentIdOutput {
  @ status - 200
  @ description - 성공 응답
  CancelCashReceiptResponse,
}

oneof CancelCashReceiptByPaymentIdError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CancelCashReceiptError,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CancelCashReceiptError,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  CancelCashReceiptError,

  @ status - 404
  @ description
  | * `CashReceiptNotIssuedError`: 현금영수증이 발급되지 않은 경우
  | * `CashReceiptNotFoundError`: 현금영수증이 존재하지 않는 경우
  CancelCashReceiptError,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  CancelCashReceiptError,
}
