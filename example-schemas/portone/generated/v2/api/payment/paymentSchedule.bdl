# standard - portone-rest-api

import portone.v2.api.data {
  BillingKeyPaymentInput,
  CreatePaymentScheduleError as CreatePaymentScheduleError1,
  CreatePaymentScheduleResponse,
  GetPaymentScheduleError as GetPaymentScheduleError1,
  GetPaymentSchedulesBody,
  GetPaymentSchedulesError as GetPaymentSchedulesError1,
  GetPaymentSchedulesResponse,
  PaymentSchedule,
  RevokePaymentSchedulesBody,
  RevokePaymentSchedulesError as RevokePaymentSchedulesError1,
  RevokePaymentSchedulesResponse,
}

@ http - GET /payment-schedules/{paymentScheduleId}
@ summary - 결제 예약 단건 조회
@ description - 주어진 아이디에 대응되는 결제 예약 건을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPaymentSchedule =
  GetPaymentScheduleInput ->
  GetPaymentScheduleOutput throws GetPaymentScheduleError

struct GetPaymentScheduleInput {
  @ in - path
  @ summary - 조회할 결제 예약 건 아이디
  paymentScheduleId: string,

  @ in - query
  @ summary - 상점 아이디
  @ description - 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
  storeId?: string,
}

oneof GetPaymentScheduleOutput {
  @ status - 200
  @ description - 성공 응답으로 결제 예약 건 객체를 반환합니다.
  PaymentSchedule,
}

oneof GetPaymentScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPaymentScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPaymentScheduleError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetPaymentScheduleError1,

  @ status - 404
  @ description - * `PaymentScheduleNotFoundError`: 결제 예약건이 존재하지 않는 경우
  GetPaymentScheduleError1,
}

@ http - GET /payment-schedules
@ summary - 결제 예약 다건 조회
@ description
| 주어진 조건에 맞는 결제 예약 건들을 조회합니다.
| `filter.from`, `filter.until` 파라미터의 기본값이 결제 시점 기준 지난 90일에 속하는 건을 조회하도록 되어 있으니, 미래 예약 상태의 건을 조회하기 위해서는 해당 파라미터를 직접 설정해 주셔야 합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPaymentSchedules =
  GetPaymentSchedulesBody ->
  GetPaymentSchedulesOutput throws GetPaymentSchedulesError

oneof GetPaymentSchedulesOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 예약 결제 건 리스트가 반환됩니다.
  GetPaymentSchedulesResponse,
}

oneof GetPaymentSchedulesError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPaymentSchedulesError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPaymentSchedulesError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetPaymentSchedulesError1,
}

@ http - DELETE /payment-schedules
@ summary - 결제 예약 취소
@ description
| 결제 예약 건을 취소합니다.
| billingKey, scheduleIds 중 하나 이상은 필수로 입력합니다.
| billingKey 만 입력된 경우 -> 해당 빌링키로 예약된 모든 결제 예약 건들이 취소됩니다.
| scheduleIds 만 입력된 경우 -> 입력된 결제 예약 건 아이디에 해당하는 예약 건들이 취소됩니다.
| billingKey, scheduleIds 모두 입력된 경우 -> 입력된 결제 예약 건 아이디에 해당하는 예약 건들이 취소됩니다. 단, 예약한 빌링키가 입력된 빌링키와 일치하지 않으면 실패합니다.
| 위 정책에 따라 선택된 결제 예약 건들 중 하나라도 취소에 실패할 경우, 모든 취소 요청이 실패합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc RevokePaymentSchedules =
  RevokePaymentSchedulesBody ->
  RevokePaymentSchedulesOutput throws RevokePaymentSchedulesError

oneof RevokePaymentSchedulesOutput {
  @ status - 200
  @ description - 성공 응답
  RevokePaymentSchedulesResponse,
}

oneof RevokePaymentSchedulesError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  RevokePaymentSchedulesError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  RevokePaymentSchedulesError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  RevokePaymentSchedulesError1,

  @ status - 404
  @ description
  | * `PaymentScheduleNotFoundError`: 결제 예약건이 존재하지 않는 경우
  | * `BillingKeyNotFoundError`: 빌링키가 존재하지 않는 경우
  RevokePaymentSchedulesError1,

  @ status - 409
  @ description
  | * `PaymentScheduleAlreadyProcessedError`: 결제 예약건이 이미 처리된 경우
  | * `PaymentScheduleAlreadyRevokedError`: 결제 예약건이 이미 취소된 경우
  | * `BillingKeyAlreadyDeletedError`: 빌링키가 이미 삭제된 경우
  RevokePaymentSchedulesError1,
}

@ http - POST /payments/{paymentId}/schedule
@ summary - 결제 예약
@ description - 결제를 예약합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CreatePaymentSchedule =
  CreatePaymentScheduleInput ->
  CreatePaymentScheduleOutput throws CreatePaymentScheduleError

@ description - 결제 예약 요청 입력 정보
struct CreatePaymentScheduleInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 빌링키 결제 입력 정보
  payment: BillingKeyPaymentInput,

  @ description - 결제 예정 시점
  timeToPay: datetime,
}

oneof CreatePaymentScheduleOutput {
  @ status - 200
  @ description - 성공 응답
  CreatePaymentScheduleResponse,
}

oneof CreatePaymentScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CreatePaymentScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CreatePaymentScheduleError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  CreatePaymentScheduleError1,

  @ status - 404
  @ description - * `BillingKeyNotFoundError`: 빌링키가 존재하지 않는 경우
  CreatePaymentScheduleError1,

  @ status - 409
  @ description
  | * `AlreadyPaidOrWaitingError`: 결제가 이미 완료되었거나 대기중인 경우
  | * `SumOfPartsExceedsTotalAmountError`: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
  | * `BillingKeyAlreadyDeletedError`: 빌링키가 이미 삭제된 경우
  | * `PaymentScheduleAlreadyExistsError`: 결제 예약건이 이미 존재하는 경우
  CreatePaymentScheduleError1,
}
