# standard - portone-rest-api

import portone.v2.api.data {
  BillingKeyInfo,
  DeleteBillingKeyError as DeleteBillingKeyError1,
  DeleteBillingKeyResponse,
  GetBillingKeyInfoError as GetBillingKeyInfoError1,
  GetBillingKeyInfosBody,
  GetBillingKeyInfosError as GetBillingKeyInfosError1,
  GetBillingKeyInfosResponse,
  IssueBillingKeyBody,
  IssueBillingKeyError as IssueBillingKeyError1,
  IssueBillingKeyResponse,
}

@ http - GET /billing-keys/{billingKey}
@ summary - 빌링키 단건 조회
@ description - 주어진 빌링키에 대응되는 빌링키 정보를 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetBillingKeyInfo =
  GetBillingKeyInfoInput ->
  GetBillingKeyInfoOutput throws GetBillingKeyInfoError

struct GetBillingKeyInfoInput {
  @ in - path
  @ summary - 조회할 빌링키
  billingKey: string,

  @ in - query
  @ summary - 상점 아이디
  @ description - 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
  storeId?: string,
}

oneof GetBillingKeyInfoOutput {
  @ status - 200
  @ description - 성공 응답으로 빌링키 정보를 반환합니다.
  BillingKeyInfo,
}

oneof GetBillingKeyInfoError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetBillingKeyInfoError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetBillingKeyInfoError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetBillingKeyInfoError1,

  @ status - 404
  @ description - * `BillingKeyNotFoundError`: 빌링키가 존재하지 않는 경우
  GetBillingKeyInfoError1,
}

@ http - DELETE /billing-keys/{billingKey}
@ summary - 빌링키 삭제
@ description - 빌링키를 삭제합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc DeleteBillingKey =
  DeleteBillingKeyInput ->
  DeleteBillingKeyOutput throws DeleteBillingKeyError

struct DeleteBillingKeyInput {
  @ in - path
  @ summary - 삭제할 빌링키
  billingKey: string,

  @ in - query
  @ summary - 상점 아이디
  @ description - 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
  storeId?: string,

  @ in - query
  @ summary - 사유
  @ description - 네이버페이: 자동결제 해지 사유입니다. 명시가 필요합니다.
  reason?: string,
}

oneof DeleteBillingKeyOutput {
  @ status - 200
  @ description - 성공 응답
  DeleteBillingKeyResponse,
}

oneof DeleteBillingKeyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  DeleteBillingKeyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  DeleteBillingKeyError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  DeleteBillingKeyError1,

  @ status - 404
  @ description
  | * `BillingKeyNotIssuedError`
  | * `BillingKeyNotFoundError`: 빌링키가 존재하지 않는 경우
  DeleteBillingKeyError1,

  @ status - 409
  @ description
  | * `BillingKeyAlreadyDeletedError`: 빌링키가 이미 삭제된 경우
  | * `PaymentScheduleAlreadyExistsError`: 결제 예약건이 이미 존재하는 경우
  DeleteBillingKeyError1,

  @ status - 502
  @ description
  | * `PgProviderError`: PG사에서 오류를 전달한 경우
  | * `ChannelSpecificError`: 여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우
  DeleteBillingKeyError1,
}

@ http - GET /billing-keys
@ summary - 빌링키 다건 조회
@ description - 주어진 조건에 맞는 빌링키들을 페이지 기반으로 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetBillingKeyInfos =
  GetBillingKeyInfosBody ->
  GetBillingKeyInfosOutput throws GetBillingKeyInfosError

oneof GetBillingKeyInfosOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 빌링키 리스트와 페이지 정보가 반환됩니다.
  GetBillingKeyInfosResponse,
}

oneof GetBillingKeyInfosError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetBillingKeyInfosError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetBillingKeyInfosError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetBillingKeyInfosError1,
}

@ http - POST /billing-keys
@ summary - 빌링키 발급
@ description - 빌링키 발급을 요청합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc IssueBillingKey =
  IssueBillingKeyBody ->
  IssueBillingKeyOutput throws IssueBillingKeyError

oneof IssueBillingKeyOutput {
  @ status - 200
  @ description - 성공 응답
  IssueBillingKeyResponse,
}

oneof IssueBillingKeyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  IssueBillingKeyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  IssueBillingKeyError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  IssueBillingKeyError1,

  @ status - 404
  @ description - * `ChannelNotFoundError`: 요청된 채널이 존재하지 않는 경우
  IssueBillingKeyError1,

  @ status - 502
  @ description
  | * `PgProviderError`: PG사에서 오류를 전달한 경우
  | * `ChannelSpecificError`: 여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우
  IssueBillingKeyError1,
}
