# standard - portone-rest-api

import portone.v2.api.data {
  CancelPlatformAdditionalFeePolicyScheduleError as CancelPlatformAdditionalFeePolicyScheduleError1,
  CancelPlatformAdditionalFeePolicyScheduleResponse,
  CancelPlatformContractScheduleError as CancelPlatformContractScheduleError1,
  CancelPlatformContractScheduleResponse,
  CancelPlatformDiscountSharePolicyScheduleError as CancelPlatformDiscountSharePolicyScheduleError1,
  CancelPlatformDiscountSharePolicyScheduleResponse,
  CancelPlatformPartnerScheduleError as CancelPlatformPartnerScheduleError1,
  CancelPlatformPartnerScheduleResponse,
  GetPlatformAdditionalFeePolicyScheduleError as GetPlatformAdditionalFeePolicyScheduleError1,
  GetPlatformContractScheduleError as GetPlatformContractScheduleError1,
  GetPlatformDiscountSharePolicyFilterOptionsError as GetPlatformDiscountSharePolicyFilterOptionsError1,
  GetPlatformDiscountSharePolicyScheduleError as GetPlatformDiscountSharePolicyScheduleError1,
  GetPlatformError as GetPlatformError1,
  GetPlatformPartnerFilterOptionsError as GetPlatformPartnerFilterOptionsError1,
  GetPlatformPartnerScheduleError as GetPlatformPartnerScheduleError1,
  GetPlatformSettingError as GetPlatformSettingError1,
  Platform,
  PlatformAdditionalFeePolicy,
  PlatformContract,
  PlatformDiscountSharePolicy,
  PlatformDiscountSharePolicyFilterOptions,
  PlatformPartner,
  PlatformPartnerFilterOptions,
  PlatformSetting,
  RescheduleAdditionalFeePolicyError as RescheduleAdditionalFeePolicyError1,
  RescheduleContractError as RescheduleContractError1,
  RescheduleDiscountSharePolicyError as RescheduleDiscountSharePolicyError1,
  ReschedulePartnerError as ReschedulePartnerError1,
  ReschedulePlatformAdditionalFeePolicyResponse,
  ReschedulePlatformContractResponse,
  ReschedulePlatformDiscountSharePolicyResponse,
  ReschedulePlatformPartnerResponse,
  ScheduleAdditionalFeePolicyError as ScheduleAdditionalFeePolicyError1,
  ScheduleContractError as ScheduleContractError1,
  ScheduleDiscountSharePolicyError as ScheduleDiscountSharePolicyError1,
  SchedulePartnerError as SchedulePartnerError1,
  SchedulePlatformAdditionalFeePolicyResponse,
  SchedulePlatformContractResponse,
  SchedulePlatformDiscountSharePolicyResponse,
  SchedulePlatformPartnerResponse,
  SchedulePlatformPartnersBody,
  SchedulePlatformPartnersError as SchedulePlatformPartnersError1,
  SchedulePlatformPartnersResponse,
  UpdatePlatformAdditionalFeePolicyBody,
  UpdatePlatformBody,
  UpdatePlatformContractBody,
  UpdatePlatformDiscountSharePolicyBody,
  UpdatePlatformError as UpdatePlatformError1,
  UpdatePlatformPartnerBody,
  UpdatePlatformResponse,
  UpdatePlatformSettingBody,
  UpdatePlatformSettingError as UpdatePlatformSettingError1,
  UpdatePlatformSettingResponse,
}

@ http - GET /platform
@ description
| 고객사의 플랫폼 정보를 조회합니다.
| 요청된 Authorization header 를 통해 자동으로 요청자의 고객사를 특정합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatform = void -> GetPlatformOutput throws GetPlatformError

oneof GetPlatformOutput {
  @ status - 200
  @ description - 성공 응답으로 플랫폼 객체를 반환합니다.
  Platform,
}

oneof GetPlatformError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformError1,

  @ status - 403
  @ description - * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  GetPlatformError1,
}

@ http - PATCH /platform
@ description
| 고객사의 플랫폼 관련 정보를 업데이트합니다.
| 요청된 Authorization header 를 통해 자동으로 요청자의 고객사를 특정합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc UpdatePlatform =
  UpdatePlatformBody ->
  UpdatePlatformOutput throws UpdatePlatformError

oneof UpdatePlatformOutput {
  @ status - 200
  @ description - 성공 응답
  UpdatePlatformResponse,
}

oneof UpdatePlatformError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  UpdatePlatformError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  UpdatePlatformError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  UpdatePlatformError1,
}

@ http - GET /platform/discount-share-policy-filter-options
@ description - 할인 분담 정책 다건 조회 시 필요한 필터 옵션을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformDiscountSharePolicyFilterOptions =
  GetPlatformDiscountSharePolicyFilterOptionsInput ->
  GetPlatformDiscountSharePolicyFilterOptionsOutput throws GetPlatformDiscountSharePolicyFilterOptionsError

struct GetPlatformDiscountSharePolicyFilterOptionsInput {
  @ in - query
  @ summary - 보관 조회 여부
  @ description - true 이면 보관된 할인 분담의 필터 옵션을 조회하고, false 이면 보관되지 않은 할인 분담의 필터 옵션을 조회합니다. 기본값은 false 입니다.
  isArchived?: boolean,
}

oneof GetPlatformDiscountSharePolicyFilterOptionsOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 할인 분담 정책 필터 옵션을 반환합니다.
  PlatformDiscountSharePolicyFilterOptions,
}

oneof GetPlatformDiscountSharePolicyFilterOptionsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformDiscountSharePolicyFilterOptionsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformDiscountSharePolicyFilterOptionsError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformDiscountSharePolicyFilterOptionsError1,
}

@ http - GET /platform/discount-share-policies/{id}/schedule
@ description - 주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformDiscountSharePolicySchedule =
  GetPlatformDiscountSharePolicyScheduleInput ->
  GetPlatformDiscountSharePolicyScheduleOutput throws GetPlatformDiscountSharePolicyScheduleError

struct GetPlatformDiscountSharePolicyScheduleInput {
  @ in - path
  @ summary - 할인 분담 정책 아이디
  id: string,
}

oneof GetPlatformDiscountSharePolicyScheduleOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 할인 분담 정책을 반환합니다.
  PlatformDiscountSharePolicy,
}

oneof GetPlatformDiscountSharePolicyScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformDiscountSharePolicyScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformDiscountSharePolicyScheduleError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformDiscountSharePolicyScheduleError1,

  @ status - 404
  @ description - * `PlatformDiscountSharePolicyNotFoundError`
  GetPlatformDiscountSharePolicyScheduleError1,
}

@ http - PUT /platform/discount-share-policies/{id}/schedule
@ description - 주어진 아이디에 대응되는 할인 분담에 예약 업데이트를 재설정합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc RescheduleDiscountSharePolicy =
  RescheduleDiscountSharePolicyInput ->
  RescheduleDiscountSharePolicyOutput throws RescheduleDiscountSharePolicyError

@ description - 할인 분담 정책 예약 업데이트 재설정을 위한 입력 정보
struct RescheduleDiscountSharePolicyInput {
  @ in - path
  @ summary - 할인 분담 정책 아이디
  id: string,

  @ description - 반영할 업데이트 내용
  update: UpdatePlatformDiscountSharePolicyBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

oneof RescheduleDiscountSharePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 할인 분담 정책을 반환합니다.
  ReschedulePlatformDiscountSharePolicyResponse,
}

oneof RescheduleDiscountSharePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  RescheduleDiscountSharePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  RescheduleDiscountSharePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  RescheduleDiscountSharePolicyError1,

  @ status - 404
  @ description - * `PlatformDiscountSharePolicyNotFoundError`
  RescheduleDiscountSharePolicyError1,
}

@ http - POST /platform/discount-share-policies/{id}/schedule
@ description - 주어진 아이디에 대응되는 할인 분담에 업데이트를 예약합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ScheduleDiscountSharePolicy =
  ScheduleDiscountSharePolicyInput ->
  ScheduleDiscountSharePolicyOutput throws ScheduleDiscountSharePolicyError

@ description - 할인 분담 정책 업데이트 예약을 위한 입력 정보
struct ScheduleDiscountSharePolicyInput {
  @ in - path
  @ summary - 할인 분담 정책 아이디
  id: string,

  @ description - 반영할 업데이트 내용
  update: UpdatePlatformDiscountSharePolicyBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

oneof ScheduleDiscountSharePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 할인 분담 정책이 반환됩니다.
  SchedulePlatformDiscountSharePolicyResponse,
}

oneof ScheduleDiscountSharePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ScheduleDiscountSharePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ScheduleDiscountSharePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  ScheduleDiscountSharePolicyError1,

  @ status - 404
  @ description - * `PlatformDiscountSharePolicyNotFoundError`
  ScheduleDiscountSharePolicyError1,

  @ status - 409
  @ description
  | * `PlatformDiscountSharePolicyScheduleAlreadyExistsError`
  | * `PlatformArchivedDiscountSharePolicyError`: 보관된 할인 분담 정책을 업데이트하려고 하는 경우
  ScheduleDiscountSharePolicyError1,
}

@ http - DELETE /platform/discount-share-policies/{id}/schedule
@ description - 주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 취소합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CancelPlatformDiscountSharePolicySchedule =
  CancelPlatformDiscountSharePolicyScheduleInput ->
  CancelPlatformDiscountSharePolicyScheduleOutput throws CancelPlatformDiscountSharePolicyScheduleError

struct CancelPlatformDiscountSharePolicyScheduleInput {
  @ in - path
  @ summary - 할인 분담 정책 아이디
  id: string,
}

oneof CancelPlatformDiscountSharePolicyScheduleOutput {
  @ status - 200
  @ description - 성공 응답
  CancelPlatformDiscountSharePolicyScheduleResponse,
}

oneof CancelPlatformDiscountSharePolicyScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CancelPlatformDiscountSharePolicyScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CancelPlatformDiscountSharePolicyScheduleError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CancelPlatformDiscountSharePolicyScheduleError1,

  @ status - 404
  @ description - * `PlatformDiscountSharePolicyNotFoundError`
  CancelPlatformDiscountSharePolicyScheduleError1,
}

@ http - GET /platform/additional-fee-policies/{id}/schedule
@ description - 주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformAdditionalFeePolicySchedule =
  GetPlatformAdditionalFeePolicyScheduleInput ->
  GetPlatformAdditionalFeePolicyScheduleOutput throws GetPlatformAdditionalFeePolicyScheduleError

struct GetPlatformAdditionalFeePolicyScheduleInput {
  @ in - path
  @ summary - 추가 수수료 정책 아이디
  id: string,
}

oneof GetPlatformAdditionalFeePolicyScheduleOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 추가 수수료 정책을 반환합니다.
  PlatformAdditionalFeePolicy,
}

oneof GetPlatformAdditionalFeePolicyScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformAdditionalFeePolicyScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformAdditionalFeePolicyScheduleError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformAdditionalFeePolicyScheduleError1,

  @ status - 404
  @ description - * `PlatformAdditionalFeePolicyNotFoundError`
  GetPlatformAdditionalFeePolicyScheduleError1,
}

@ http - PUT /platform/additional-fee-policies/{id}/schedule
@ security
| - bearerJwt: []
| - portOne: []
proc RescheduleAdditionalFeePolicy =
  RescheduleAdditionalFeePolicyInput ->
  RescheduleAdditionalFeePolicyOutput throws RescheduleAdditionalFeePolicyError

@ description - 추가 수수료 정책 예약 업데이트 재설정을 위한 입력 정보
struct RescheduleAdditionalFeePolicyInput {
  @ in - path
  @ summary - 추가 수수료 정책 아이디
  id: string,

  @ description - 반영할 업데이트 내용
  update: UpdatePlatformAdditionalFeePolicyBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

oneof RescheduleAdditionalFeePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 추가 수수료 정책이 반환됩니다.
  ReschedulePlatformAdditionalFeePolicyResponse,
}

oneof RescheduleAdditionalFeePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  RescheduleAdditionalFeePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  RescheduleAdditionalFeePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  RescheduleAdditionalFeePolicyError1,

  @ status - 404
  @ description - * `PlatformAdditionalFeePolicyNotFoundError`
  RescheduleAdditionalFeePolicyError1,
}

@ http - POST /platform/additional-fee-policies/{id}/schedule
@ description - 주어진 아이디에 대응되는 추가 수수료 정책에 업데이트를 예약합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ScheduleAdditionalFeePolicy =
  ScheduleAdditionalFeePolicyInput ->
  ScheduleAdditionalFeePolicyOutput throws ScheduleAdditionalFeePolicyError

@ description - 추가 수수료 정책 업데이트 예약을 위한 입력 정보
struct ScheduleAdditionalFeePolicyInput {
  @ in - path
  @ summary - 추가 수수료 정책 아이디
  id: string,

  @ description - 반영할 업데이트 내용
  update: UpdatePlatformAdditionalFeePolicyBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

oneof ScheduleAdditionalFeePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 추가 수수료 정책을 반환합니다.
  SchedulePlatformAdditionalFeePolicyResponse,
}

oneof ScheduleAdditionalFeePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ScheduleAdditionalFeePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ScheduleAdditionalFeePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  ScheduleAdditionalFeePolicyError1,

  @ status - 404
  @ description - * `PlatformAdditionalFeePolicyNotFoundError`
  ScheduleAdditionalFeePolicyError1,

  @ status - 409
  @ description
  | * `PlatformAdditionalFeePolicyScheduleAlreadyExistsError`
  | * `PlatformArchivedAdditionalFeePolicyError`: 보관된 추가 수수료 정책을 업데이트하려고 하는 경우
  ScheduleAdditionalFeePolicyError1,
}

@ http - DELETE /platform/additional-fee-policies/{id}/schedule
@ description - 주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 취소합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CancelPlatformAdditionalFeePolicySchedule =
  CancelPlatformAdditionalFeePolicyScheduleInput ->
  CancelPlatformAdditionalFeePolicyScheduleOutput throws CancelPlatformAdditionalFeePolicyScheduleError

struct CancelPlatformAdditionalFeePolicyScheduleInput {
  @ in - path
  @ summary - 추가 수수료 정책 아이디
  id: string,
}

oneof CancelPlatformAdditionalFeePolicyScheduleOutput {
  @ status - 200
  @ description - 성공 응답
  CancelPlatformAdditionalFeePolicyScheduleResponse,
}

oneof CancelPlatformAdditionalFeePolicyScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CancelPlatformAdditionalFeePolicyScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CancelPlatformAdditionalFeePolicyScheduleError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CancelPlatformAdditionalFeePolicyScheduleError1,

  @ status - 404
  @ description - * `PlatformAdditionalFeePolicyNotFoundError`
  CancelPlatformAdditionalFeePolicyScheduleError1,
}

@ http - GET /platform/partner-filter-options
@ description - 파트너 다건 조회 시 필요한 필터 옵션을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformPartnerFilterOptions =
  GetPlatformPartnerFilterOptionsInput ->
  GetPlatformPartnerFilterOptionsOutput throws GetPlatformPartnerFilterOptionsError

struct GetPlatformPartnerFilterOptionsInput {
  @ in - query
  @ summary - 보관 조회 여부
  @ description - true 이면 보관된 파트너의 필터 옵션을 조회하고, false 이면 보관되지 않은 파트너의 필터 옵션을 조회합니다. 기본값은 false 입니다.
  isArchived?: boolean,
}

oneof GetPlatformPartnerFilterOptionsOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 파트너 필터 옵션을 반환합니다.
  PlatformPartnerFilterOptions,
}

oneof GetPlatformPartnerFilterOptionsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformPartnerFilterOptionsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformPartnerFilterOptionsError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformPartnerFilterOptionsError1,
}

@ http - GET /platform/partners/{id}/schedule
@ description - 주어진 아이디에 대응되는 파트너의 예약 업데이트를 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformPartnerSchedule =
  GetPlatformPartnerScheduleInput ->
  GetPlatformPartnerScheduleOutput throws GetPlatformPartnerScheduleError

struct GetPlatformPartnerScheduleInput {
  @ in - path
  @ summary - 파트너 아이디
  id: string,
}

oneof GetPlatformPartnerScheduleOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 파트너 객체를 반환합니다.
  PlatformPartner,
}

oneof GetPlatformPartnerScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformPartnerScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformPartnerScheduleError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformPartnerScheduleError1,

  @ status - 404
  @ description - * `PlatformPartnerNotFoundError`
  GetPlatformPartnerScheduleError1,
}

@ http - PUT /platform/partners/{id}/schedule
@ description - 주어진 아이디에 대응되는 파트너에 예약 업데이트를 재설정합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ReschedulePartner =
  ReschedulePartnerInput ->
  ReschedulePartnerOutput throws ReschedulePartnerError

@ description - 파트너 예약 업데이트 재설정을 위한 입력 정보
struct ReschedulePartnerInput {
  @ in - path
  @ summary - 파트너 아이디
  id: string,

  @ description - 반영할 업데이트 내용
  update: UpdatePlatformPartnerBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

oneof ReschedulePartnerOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 파트너 객체를 반환합니다.
  ReschedulePlatformPartnerResponse,
}

oneof ReschedulePartnerError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ReschedulePartnerError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ReschedulePartnerError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  ReschedulePartnerError1,

  @ status - 404
  @ description
  | * `PlatformPartnerNotFoundError`
  | * `PlatformContractNotFoundError`
  ReschedulePartnerError1,

  @ status - 409
  @ description - * `PlatformMemberCompanyConnectedPartnerCannotBeScheduledError`: 연동 사업자로 연동된 파트너를 예약 수정하려고 시도한 경우
  ReschedulePartnerError1,
}

@ http - POST /platform/partners/{id}/schedule
@ description - 주어진 아이디에 대응되는 파트너에 업데이트를 예약합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc SchedulePartner =
  SchedulePartnerInput ->
  SchedulePartnerOutput throws SchedulePartnerError

@ description - 파트너 업데이트 예약을 위한 입력 정보
struct SchedulePartnerInput {
  @ in - path
  @ summary - 파트너 아이디
  id: string,

  @ description - 반영할 업데이트 내용
  update: UpdatePlatformPartnerBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

oneof SchedulePartnerOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 파트너 객체가 반환됩니다.
  SchedulePlatformPartnerResponse,
}

oneof SchedulePartnerError {
  @ status - 400
  @ description
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  | * `PlatformAccountVerificationFailedError`: 파트너 계좌 인증이 실패한 경우
  | * `PlatformInsufficientDataToChangePartnerTypeError`: 파트너 타입 수정에 필요한 데이터가 부족한 경우
  SchedulePartnerError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  SchedulePartnerError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  SchedulePartnerError1,

  @ status - 404
  @ description
  | * `PlatformPartnerNotFoundError`
  | * `PlatformContractNotFoundError`
  | * `PlatformAccountVerificationNotFoundError`: 파트너 계좌 검증 아이디를 찾을 수 없는 경우
  | * `PlatformUserDefinedPropertyNotFoundError`: 사용자 정의 속성이 존재 하지 않는 경우
  SchedulePartnerError1,

  @ status - 409
  @ description
  | * `PlatformPartnerScheduleAlreadyExistsError`
  | * `PlatformArchivedPartnerError`: 보관된 파트너를 업데이트하려고 하는 경우
  | * `PlatformAccountVerificationAlreadyUsedError`: 파트너 계좌 검증 아이디를 이미 사용한 경우
  | * `PlatformMemberCompanyConnectedPartnerBrnUnchangeableError`: 연동 사업자로 연동된 파트너의 사업자등록번호를 변경하려고 시도한 경우
  | * `PlatformMemberCompanyConnectedPartnerTypeUnchangeableError`: 연동 사업자로 연동된 파트너의 파트너 유형을 변경하려고 시도한 경우
  | * `PlatformCompanyVerificationAlreadyUsedError`: 파트너 사업자 검증 아이디를 이미 사용한 경우
  | * `PlatformMemberCompanyConnectedPartnerCannotBeScheduledError`: 연동 사업자로 연동된 파트너를 예약 수정하려고 시도한 경우
  SchedulePartnerError1,
}

@ http - DELETE /platform/partners/{id}/schedule
@ description - 주어진 아이디에 대응되는 파트너의 예약 업데이트를 취소합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CancelPlatformPartnerSchedule =
  CancelPlatformPartnerScheduleInput ->
  CancelPlatformPartnerScheduleOutput throws CancelPlatformPartnerScheduleError

struct CancelPlatformPartnerScheduleInput {
  @ in - path
  @ summary - 파트너 아이디
  id: string,
}

oneof CancelPlatformPartnerScheduleOutput {
  @ status - 200
  @ description - 성공 응답
  CancelPlatformPartnerScheduleResponse,
}

oneof CancelPlatformPartnerScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CancelPlatformPartnerScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CancelPlatformPartnerScheduleError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CancelPlatformPartnerScheduleError1,

  @ status - 404
  @ description - * `PlatformPartnerNotFoundError`
  CancelPlatformPartnerScheduleError1,
}

@ http - POST /platform/partners/schedule
@ security
| - bearerJwt: []
| - portOne: []
proc SchedulePlatformPartners =
  SchedulePlatformPartnersBody ->
  SchedulePlatformPartnersOutput throws SchedulePlatformPartnersError

oneof SchedulePlatformPartnersOutput {
  @ status - 200
  SchedulePlatformPartnersResponse,
}

oneof SchedulePlatformPartnersError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  SchedulePlatformPartnersError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  SchedulePlatformPartnersError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  SchedulePlatformPartnersError1,

  @ status - 404
  @ description
  | * `PlatformContractNotFoundError`
  | * `PlatformUserDefinedPropertyNotFoundError`: 사용자 정의 속성이 존재 하지 않는 경우
  SchedulePlatformPartnersError1,

  @ status - 409
  @ description
  | * `PlatformPartnerSchedulesAlreadyExistError`
  | * `PlatformArchivedPartnersCannotBeScheduledError`: 보관된 파트너들을 예약 업데이트하려고 하는 경우
  | * `PlatformMemberCompanyConnectedPartnersCannotBeScheduledError`: 연동 사업자로 연동된 파트너들을 예약 수정하려고 시도한 경우
  SchedulePlatformPartnersError1,
}

@ http - GET /platform/contracts/{id}/schedule
@ description - 주어진 아이디에 대응되는 계약의 예약 업데이트를 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformContractSchedule =
  GetPlatformContractScheduleInput ->
  GetPlatformContractScheduleOutput throws GetPlatformContractScheduleError

struct GetPlatformContractScheduleInput {
  @ in - path
  @ summary - 계약 아이디
  id: string,
}

oneof GetPlatformContractScheduleOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 계약 객체를 반환합니다.
  PlatformContract,
}

oneof GetPlatformContractScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformContractScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformContractScheduleError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformContractScheduleError1,

  @ status - 404
  @ description - * `PlatformContractNotFoundError`
  GetPlatformContractScheduleError1,
}

@ http - PUT /platform/contracts/{id}/schedule
@ description - 주어진 아이디에 대응되는 계약에 예약 업데이트를 재설정합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc RescheduleContract =
  RescheduleContractInput ->
  RescheduleContractOutput throws RescheduleContractError

@ description - 계약 예약 업데이트 재설정을 위한 입력 정보
struct RescheduleContractInput {
  @ in - path
  @ summary - 계약 아이디
  id: string,

  @ description - 반영할 업데이트 내용
  update: UpdatePlatformContractBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

oneof RescheduleContractOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 계약 객체를 반환합니다.
  ReschedulePlatformContractResponse,
}

oneof RescheduleContractError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  RescheduleContractError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  RescheduleContractError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  RescheduleContractError1,

  @ status - 404
  @ description - * `PlatformContractNotFoundError`
  RescheduleContractError1,
}

@ http - POST /platform/contracts/{id}/schedule
@ description - 주어진 아이디에 대응되는 계약에 업데이트를 예약합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ScheduleContract =
  ScheduleContractInput ->
  ScheduleContractOutput throws ScheduleContractError

@ description - 계약 업데이트 예약을 위한 입력 정보
struct ScheduleContractInput {
  @ in - path
  @ summary - 계약 아이디
  id: string,

  @ description - 반영할 업데이트 내용
  update: UpdatePlatformContractBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

oneof ScheduleContractOutput {
  @ status - 200
  @ description - 성공 응답으로 예약된 계약 객체를 반환합니다.
  SchedulePlatformContractResponse,
}

oneof ScheduleContractError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ScheduleContractError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ScheduleContractError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  ScheduleContractError1,

  @ status - 404
  @ description - * `PlatformContractNotFoundError`
  ScheduleContractError1,

  @ status - 409
  @ description
  | * `PlatformContractScheduleAlreadyExistsError`
  | * `PlatformArchivedContractError`: 보관된 계약을 업데이트하려고 하는 경우
  ScheduleContractError1,
}

@ http - DELETE /platform/contracts/{id}/schedule
@ description - 주어진 아이디에 대응되는 계약의 예약 업데이트를 취소합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CancelPlatformContractSchedule =
  CancelPlatformContractScheduleInput ->
  CancelPlatformContractScheduleOutput throws CancelPlatformContractScheduleError

struct CancelPlatformContractScheduleInput {
  @ in - path
  @ summary - 계약 아이디
  id: string,
}

oneof CancelPlatformContractScheduleOutput {
  @ status - 200
  @ description - 성공 응답
  CancelPlatformContractScheduleResponse,
}

oneof CancelPlatformContractScheduleError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CancelPlatformContractScheduleError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CancelPlatformContractScheduleError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CancelPlatformContractScheduleError1,

  @ status - 404
  @ description - * `PlatformContractNotFoundError`
  CancelPlatformContractScheduleError1,
}

@ http - GET /platform/setting
@ summary - 플랫폼 설정 조회
@ description - 설정 정보를 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformSetting =
  void ->
  GetPlatformSettingOutput throws GetPlatformSettingError

oneof GetPlatformSettingOutput {
  @ status - 200
  @ description - 성곰 응답으로 플랫폼 설정 정보를 반환합니다.
  PlatformSetting,
}

oneof GetPlatformSettingError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformSettingError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformSettingError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformSettingError1,
}

@ http - PATCH /platform/setting
@ summary - 플랫폼 설정 업데이트
@ description - 설정 정보를 업데이트합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc UpdatePlatformSetting =
  UpdatePlatformSettingBody ->
  UpdatePlatformSettingOutput throws UpdatePlatformSettingError

oneof UpdatePlatformSettingOutput {
  @ status - 200
  @ description - 성곰 응답으로 플랫폼 설정 정보를 반환합니다.
  UpdatePlatformSettingResponse,
}

oneof UpdatePlatformSettingError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  UpdatePlatformSettingError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  UpdatePlatformSettingError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  UpdatePlatformSettingError1,
}
