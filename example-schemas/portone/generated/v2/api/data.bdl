# standard - portone-rest-api

@ description - 분리 형식 주소
@ discriminator - type
oneof Address {
  @ description - 한 줄 형식
  @ mapping - ONE_LINE
  OneLineAddress,

  @ description - 분리 형식
  @ mapping - SEPARATED
  SeparatedAddress,
}

@ description - 결제가 이미 완료된 경우
struct AlreadyPaidError {
  type: string,
  message?: string,
}

@ description - 결제가 이미 완료되었거나 대기중인 경우
struct AlreadyPaidOrWaitingError {
  type: string,
  message?: string,
}

struct Analytics {}

@ description - 고객사의 평균 거래액 현황 조회 응답
struct AnalyticsAverageAmountChart {
  stats: AnalyticsAverageAmountChartStat[],
  summary: AnalyticsAverageAmountChartSummary,
}

@ description - 특정 시점의 건별 평균 거래액, 고객 당 평균 거래액을 나타냅니다.
struct AnalyticsAverageAmountChartStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 건별 평균 거래액
  paymentAverageAmount: int64,

  @ description - 고객 당 평균 거래액
  customerAverageAmount: int64,
}

@ description - 전체 구간의 건별 평균 거래액, 고객 당 평균 거래액을 나타냅니다.
struct AnalyticsAverageAmountChartSummary {
  @ description - 건별 평균 거래액
  paymentAverageAmount: int64,

  @ description - 고객 당 평균 거래액
  customerAverageAmount: int64,
}

@ description - 고객사의 환불율 정보
struct AnalyticsCancellationRate {
  cancellationRate: float64,
}

@ description - 고객사의 카드결제 현황 차트 정보
struct AnalyticsCardChart {
  stats: AnalyticsCardChartStat[],
}

@ description - 특정 시점의 카드결제 거래 건 수와 금액을 나타냅니다.
struct AnalyticsCardChartStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 거래액
  amount: int64,

  @ description - 거래 건수
  count: int64,
}

@ description - 고객사의 카드사별 결제 현황 조회 응답
struct AnalyticsCardCompanyChart {
  stats: AnalyticsCardCompanyChartStat[],
  remainderStats: AnalyticsCardCompanyChartRemainderStat[],
  summary: AnalyticsCardCompanyChartSummary,
}

@ description - 특정 시점의 나머지 카드사들의 결제금액, 결제 건수를 나타냅니다.
struct AnalyticsCardCompanyChartRemainderStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 결제금액
  amount: int64,

  @ description - 결제 건수
  count: int64,
}

@ description - 특정 시점의 카드사 별 결제금액, 결제 건수를 나타냅니다.
struct AnalyticsCardCompanyChartStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 카드사
  cardCompany: CardCompany,

  @ description - 결제금액
  amount: int64,

  @ description - 결제 건수
  count: int64,
}

@ description - 결제금액, 결제 건수의 총합을 나타냅니다.
struct AnalyticsCardCompanyChartSummary {
  @ description - 결제금액 합
  totalAmount: int64,

  @ description - 결제 건수 합
  totalCount: int64,
}

@ description - 고객사의 간편결제 현황 차트 정보
struct AnalyticsEasyPayChart {
  stats: AnalyticsEasyPayChartStat[],
}

@ description - 특정 시점의 간편결제 거래 건수와 금액을 나타냅니다.
struct AnalyticsEasyPayChartStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 거래액
  amount: int64,

  @ description - 거래 건수
  count: int64,
}

@ description - 고객사의 간편결제사별 결제 현황 차트 정보
struct AnalyticsEasyPayProviderChart {
  stats: AnalyticsEasyPayProviderChartStat[],
  remainderStats: AnalyticsEasyPayProviderChartRemainderStat[],
  summary: AnalyticsEasyPayProviderChartSummary,
}

@ description - 특정 시점의 나머지 간편결제사들의 결제금액, 결제 건수를 나타냅니다.
struct AnalyticsEasyPayProviderChartRemainderStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 결제금액
  amount: int64,

  @ description - 결제 건수
  count: int64,
}

@ description - 특정 시점의 간편결제사별 결제금액, 결제 건수를 나타냅니다.
struct AnalyticsEasyPayProviderChartStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 간편결제사
  easyPayProvider: EasyPayProvider,

  @ description - 결제금액
  amount: int64,

  @ description - 결제 건수
  count: int64,
}

@ description - 결제금액, 결제 건수의 총합을 나타냅니다.
struct AnalyticsEasyPayProviderChartSummary {
  @ description - 결제금액의 합
  totalAmount: int64,

  @ description - 결제 건수의 합
  totalCount: int64,
}

@ description - 고객사의 해외 결제 사용 여부
struct AnalyticsOverseasPaymentUsage {
  isUsing: boolean,
}

@ description - 고객사의 결제 현황 차트 정보
struct AnalyticsPaymentChart {
  stats: AnalyticsPaymentChartStat[],
}

@ description - 고객사의 결제 현황 인사이트 정보
struct AnalyticsPaymentChartInsight {
  @ description - 월간 최고 거래액 발생일
  highestDateInMonth?: int64,

  @ description - 월간 최저 거래액 발생일
  lowestDateInMonth?: int64,

  @ description - 주간 최고 거래액 발생 요일
  highestDayInWeek?: DayOfWeek,

  @ description - 주간 최저 거래액 발생 요일
  lowestDayInWeek?: DayOfWeek,

  @ description - 일간 최고 거래액 발생 시간
  highestHourInDay: int64,

  @ description - 일간 최저 거래액 발생 시간
  lowestHourInDay: int64,
}

@ description - 특정 시점의 거래 건 수와 금액을 나타냅니다.
struct AnalyticsPaymentChartStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 거래액
  amount: int64,

  @ description - 거래 건수
  count: int64,
}

@ description - 고객사의 결제수단 현황 차트 정보
struct AnalyticsPaymentMethodChart {
  stats: AnalyticsPaymentMethodChartStat[],
}

@ description - 결제수단별 결제금액, 결제 건수를 나타냅니다.
struct AnalyticsPaymentMethodChartStat {
  @ description - 결제수단
  paymentMethod?: PaymentMethodType,

  @ description - 결제수단별 결제금액
  amount: int64,

  @ description - 결제수단별 결제 건수
  count: int64,
}

@ description - 고객사의 결제수단 트렌드 차트 정보
struct AnalyticsPaymentMethodTrendChart {
  @ description - 결제수단별 결제금액, 결제 건수 데이터
  stats: AnalyticsPaymentMethodTrendChartStat[],
}

@ description - 특정 시점의 결제수단별 결제금액, 결제 건수를 나타냅니다.
struct AnalyticsPaymentMethodTrendChartStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 결제수단
  paymentMethod?: PaymentMethodType,

  @ description - 결제금액
  amount: int64,

  @ description - 결제 건수
  count: int64,
}

@ description - 고객사의 결제 환경 별 결제 상태 차트 정보
struct AnalyticsPaymentStatusByPaymentClientChart {
  stats: AnalyticsPaymentStatusByPaymentClientChartStat[],
}

@ description - 고객사의 결제 환경 별 결제 상태 차트 정보
struct AnalyticsPaymentStatusByPaymentClientChartStat {
  @ description - 결제가 발생한 클라이언트 환경
  paymentClientType: PaymentClientType,

  @ description - 결제 건 상태
  paymentStatus: PaymentStatus,

  @ description - 거래액
  amount: int64,

  @ description - 거래 건수
  count: int64,
}

@ description - 고객사의 결제 수단 별 결제 상태 차트 정보
struct AnalyticsPaymentStatusByPaymentMethodChart {
  stats: AnalyticsPaymentStatusByPaymentMethodChartStat[],
}

@ description - 각 결제수단, 상태 별 건수와 금액을 나타냅니다.
struct AnalyticsPaymentStatusByPaymentMethodChartStat {
  @ description - 결제수단
  paymentMethod?: PaymentMethodType,

  @ description - 결제 건 상태
  paymentStatus: PaymentStatus,

  @ description - 거래액
  amount: int64,

  @ description - 거래 건수
  count: int64,
}

@ description - 고객사의 PG사 별 결제 상태 차트 정보
struct AnalyticsPaymentStatusByPgCompanyChart {
  stats: AnalyticsPaymentStatusByPgCompanyChartStat[],
}

@ description - 각 상태의 건수와 금액, 사분위수를 나타냅니다.
struct AnalyticsPaymentStatusByPgCompanyChartStat {
  @ description - PG사
  pgCompany: PgCompany,

  @ description - 결제 건 상태
  paymentStatus: PaymentStatus,

  @ description - 거래액
  amount: int64,

  @ description - 거래 건수
  count: int64,
}

@ description - 고객사의 결제 상태 차트 정보
struct AnalyticsPaymentStatusChart {
  stats: AnalyticsPaymentStatusChartStat[],
}

@ description - 각 상태의 건수와 금액, 사분위수를 나타냅니다.
struct AnalyticsPaymentStatusChartStat {
  @ description - 결제 건 상태
  paymentStatus: PaymentStatus,

  @ description - 거래액
  amount: int64,

  @ description - 거래 건수
  count: int64,

  @ description - 해당 상태 비율
  averageRatio: int64,

  @ description - 1 사분위수
  firstQuantile: int64,

  @ description - 중앙값
  median: int64,

  @ description - 3 사분위수
  thirdQuantile: int64,
}

@ description - 고객사의 결제대행사 현황 차트 정보
struct AnalyticsPgCompanyChart {
  stats: AnalyticsPgCompanyChartStat[],
}

@ description - 결제대행사별 결제금액, 결제 건수를 나타냅니다.
struct AnalyticsPgCompanyChartStat {
  @ description - 결제대행사
  pgCompany: PgCompany,

  @ description - 결제대행사별 결제금액
  amount: int64,

  @ description - 결제대행사별 결제 건수
  count: int64,
}

@ description - 고객사의 결제대행사별 거래 추이 차트 정보
struct AnalyticsPgCompanyTrendChart {
  stats: AnalyticsPgCompanyTrendChartStat[],
}

@ description - 특정 시점의 결제대행사 별 결제금액, 결제 건수를 나타냅니다.
struct AnalyticsPgCompanyTrendChartStat {
  @ description - 시점
  timestamp: datetime,

  @ description - 결제대행사
  pgCompany: PgCompany,

  @ description - 결제금액
  amount: int64,

  @ description - 결제 건수
  count: int64,
}

@ description - 하나의 단위 필드만 선택하여 입력합니다.
struct AnalyticsTimeGranularity {
  minute?: AnalyticsTimeGranularityMinute,
  hour?: AnalyticsTimeGranularityHour,
  day?: AnalyticsTimeGranularityDay,
  week?: AnalyticsTimeGranularityWeek,
  month?: AnalyticsTimeGranularityMonth,
}

@ description - 일
struct AnalyticsTimeGranularityDay {
  timezoneHourOffset: int32,
}

@ description - 시간
struct AnalyticsTimeGranularityHour {}

@ description - 분
struct AnalyticsTimeGranularityMinute {}

@ description - 월
struct AnalyticsTimeGranularityMonth {
  timezoneHourOffset: int32,
}

@ description - 주
struct AnalyticsTimeGranularityWeek {
  timezoneHourOffset: int32,
}

@ description - ApplyEscrowLogisticsError
@ discriminator - type
oneof ApplyEscrowLogisticsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - PAYMENT_NOT_PAID
  PaymentNotPaidError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 에스크로 배송 정보 등록 성공 응답
struct ApplyEscrowLogisticsResponse {
  @ description - 송장 번호
  invoiceNumber: string,

  @ description - 발송 시점
  sentAt: datetime,

  @ description - 에스크로 정보 등록 시점
  appliedAt: datetime,
}

@ description - 파트너 상태를 승인 완료로 변경하기 위한 입력 정보
struct ApprovePlatformPartnerBody {
  @ description - 파트너 메모. 값이 명시되지 않은 경우 업데이트하지 않습니다.
  memo?: string,
}

@ description - ApprovePlatformPartnerError
@ discriminator - type
oneof ApprovePlatformPartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ARCHIVED_PARTNER
  PlatformArchivedPartnerError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 승인 성공 응답
struct ApprovePlatformPartnerResponse {
  @ description - 승인된 파트너
  partner: PlatformPartner,
}

@ description - ArchivePlatformAdditionalFeePolicyError
@ discriminator - type
oneof ArchivePlatformAdditionalFeePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND
  PlatformAdditionalFeePolicyNotFoundError,

  @ mapping - PLATFORM_CANNOT_ARCHIVE_SCHEDULED_ADDITIONAL_FEE_POLICY
  PlatformCannotArchiveScheduledAdditionalFeePolicyError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 추가 수수료 정책 보관 성공 응답
struct ArchivePlatformAdditionalFeePolicyResponse {
  @ description - 보관된 추가 수수료 정책
  additionalFeePolicy: PlatformAdditionalFeePolicy,
}

@ description - ArchivePlatformContractError
@ discriminator - type
oneof ArchivePlatformContractError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CANNOT_ARCHIVE_SCHEDULED_CONTRACT
  PlatformCannotArchiveScheduledContractError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 계약 보관 성공 응답
struct ArchivePlatformContractResponse {
  @ description - 보관된 계약
  contract: PlatformContract,
}

@ description - ArchivePlatformDiscountSharePolicyError
@ discriminator - type
oneof ArchivePlatformDiscountSharePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CANNOT_ARCHIVE_SCHEDULED_DISCOUNT_SHARE_POLICY
  PlatformCannotArchiveScheduledDiscountSharePolicyError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 할인 분담 보관 성공 응답
struct ArchivePlatformDiscountSharePolicyResponse {
  @ description - 보관된 할인 분담
  discountSharePolicy: PlatformDiscountSharePolicy,
}

@ description - ArchivePlatformPartnerError
@ discriminator - type
oneof ArchivePlatformPartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CANNOT_ARCHIVE_SCHEDULED_PARTNER
  PlatformCannotArchiveScheduledPartnerError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 보관 성공 응답
struct ArchivePlatformPartnerResponse {
  @ description - 보관된 파트너
  partner: PlatformPartner,
}

@ description - 세금계산서 파일 첨부 정보
struct AttachB2bTaxInvoiceFileBody {
  @ description - 파일 아이디
  fileId: string,
}

@ description - AttachB2bTaxInvoiceFileError
@ discriminator - type
oneof AttachB2bTaxInvoiceFileError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_FILE_NOT_FOUND
  B2bFileNotFoundError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_DRAFTED_STATUS
  B2bTaxInvoiceNotDraftedStatusError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 과세 유형을 수정할 수 없는 경우
struct B2BCannotChangeTaxTypeError {
  type: string,
  message?: string,
}

@ description - 원본 세금계산서가 전송완료 상태가 아닌 경우
struct B2BTaxInvoiceStatusNotSendingCompletedError {
  type: string,
  message?: string,
}

@ description - 계좌가 존재하지 않는 경우
struct B2bBankAccountNotFoundError {
  type: string,
  message?: string,
}

@ description - 사업자등록 정보
struct B2bBusinessInfo {
  @ description - 사업자등록번호
  brn: string,

  @ description - 상호
  name: string,

  @ description - 대표자명
  ceoName: string,

  @ description - 우편번호
  zipCode: string,

  @ description - 주소
  address: string,

  @ description - 사업자 유형
  businessEntityType: string,

  @ description - 사업 상태
  businessStatus: string,

  @ description - 과세 유형
  taxationType: string,

  @ description - 간이과세-일반과세 전환일
  simplifiedTaxationTypeDate?: string,

  @ description - 폐업일
  closingDate?: string,

  @ description - 개업일
  openingDate: string,

  @ description - 업태
  businessType: string,

  @ description - 종목
  businessClass: string,

  @ description - 업종코드
  businessCategoryCode: string,

  @ description - 법인등록번호
  corpRegNo?: string,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 관할세무서코드
  taxOfficeCode?: string,

  @ description - 관할세무서명
  taxOfficeName?: string,
}

@ description - 사업자등록 정보조회 결과
struct B2bBusinessInfoResult {
  @ description - 사업자등록번호
  brn: string,

  @ description - 사업자등록 정보
  businessInfo?: B2bBusinessInfo,

  @ description - 조회 실패 시 에러 메시지
  error?: string,
}

struct B2bCertificate {
  @ description - 등록일시
  registeredAt: datetime,

  @ description - 만료일시
  expiredAt: datetime,

  @ description - 발행자명
  issuerName: string,

  @ description - 본인명
  subjectName: string,

  @ description - 인증서 타입
  certificateType: B2bCertificateType,

  @ description - OID
  oid: string,

  @ description - 등록 담당자 성명
  registrantContactName: string,

  @ description - 등록 담당자 ID
  registrantContactId: string,
}

@ description - 인증서 타입
enum B2bCertificateType {
  @ description - 전자세금용 공동인증서
  E_TAX,

  @ description - 특수목적용 공동인증서
  PORTONE,

  @ description - 기타
  ETC,
}

@ description - 인증서가 등록되어 있지 않은 경우
struct B2bCertificateUnregisteredError {
  type: string,
  message?: string,
}

@ description - 사업자가 이미 연동되어 있는 경우
struct B2bCompanyAlreadyRegisteredError {
  type: string,
  message?: string,
}

@ description - 담당자 정보
struct B2bCompanyContact {
  @ description - 담당자 성명
  name: string,

  @ description - 담당자 핸드폰 번호
  phoneNumber: string,

  @ description - 담당자 이메일
  email: string,
}

@ description - 담당자 관련 입력 정보
struct B2bCompanyContactInput {
  @ description - 담당자 성명
  name: string,

  @ description - 담당자 핸드폰 번호
  phoneNumber: string,

  @ description - 담당자 이메일
  email: string,
}

@ description - 사업자가 존재하지 않는 경우
struct B2bCompanyNotFoundError {
  type: string,
  message?: string,
}

@ description - 사업자 상태
struct B2bCompanyState {
  @ description - 사업자 과세 유형
  taxationType: B2bCompanyStateTaxationType,

  @ description - 과세 유형 변경 일자
  taxationTypeUpdateDate?: date,

  @ description - 사업자 영업 상태
  businessStatus: B2bCompanyStateBusinessStatus,

  @ description - 휴폐업 일자
  closedSuspendedDate?: date,
}

@ description - 영업 상태
enum B2bCompanyStateBusinessStatus {
  @ description - 영업중
  IN_BUSINESS,

  @ description - 폐업
  CLOSED,

  @ description - 휴업
  SUSPENDED,
}

@ description - 사업자 과세 유형
enum B2bCompanyStateTaxationType {
  @ description - 일반 과세
  NORMAL,

  @ description - 면세
  TAX_FREE,

  @ description - 간이 과세
  SIMPLE,

  @ description - 간이 과세 세금계산서 발급 사업자
  SIMPLE_TAX_INVOICE_ISSUER,

  @ description - 비영리법인 또는 국가기관, 고유번호가 부여된 단체
  ASSIGNED_ID_NUMBER,
}

@ description - 문서번호 수정이 요청된 경우
struct B2bDocumentKeyCannotBeChangedError {
  type: string,
  message?: string,
}

@ description - 외부 서비스에서 에러가 발생한 경우
struct B2bExternalServiceError {
  type: string,
  message?: string,
}

@ description - 업로드한 파일을 찾을 수 없는 경우
struct B2bFileNotFoundError {
  type: string,
  message?: string,
}

@ description - 금융기관과의 통신에 실패한 경우
struct B2bFinancialSystemCommunicationError {
  type: string,
  message?: string,
}

@ description - 금융기관 장애
struct B2bFinancialSystemFailureError {
  type: string,
  message?: string,
}

@ description - 금융기관 시스템이 점검 중인 경우
struct B2bFinancialSystemUnderMaintenanceError {
  type: string,
  message?: string,
}

@ description - 계좌 정보 조회가 불가능한 외화 계좌인 경우
struct B2bForeignExchangeAccountError {
  type: string,
  message?: string,
}

@ description - 홈택스가 점검중이거나 순단이 발생한 경우
struct B2bHometaxUnderMaintenanceError {
  type: string,
  message?: string,
}

@ description - ID가 이미 사용중인 경우
struct B2bIdAlreadyExistsError {
  type: string,
  message?: string,
}

struct B2bMemberCompany {
  @ description - 사업자 고유 아이디
  id: string,

  graphqlId: string,

  @ description - 외부 공개용 아이디
  externalId?: string,

  @ description - 사업자등록번호
  brn: string,

  @ description - 회사명
  companyName: string,

  @ description - 대표자 성명
  representativeName: string,

  @ description - 회사 주소
  address: string,

  @ description - 업태
  businessType: string,

  @ description - 업종
  businessClass: string,

  @ description - 담당자 정보
  contact: B2bCompanyContact,
}

@ description - 사업자 입력 정보
struct B2bMemberCompanyInput {
  @ description - 사업자등록번호
  brn: string,

  @ description - 회사명
  companyName: string,

  @ description - 대표자 성명
  representativeName: string,

  @ description - 회사 주소
  address: string,

  @ description - 업태
  businessType: string,

  @ description - 업종
  businessClass: string,

  @ description - 담당자 정보
  contact: B2bCompanyContactInput,
}

@ description - 연동 사업자가 존재하지 않는 경우
struct B2bMemberCompanyNotFoundError {
  type: string,
  message?: string,
}

@ description - 세금계산서 수정 입력 정보를 찾을 수 없는 경우
struct B2bModificationNotProvidedError {
  type: string,
  message?: string,
}

@ description - B2B 기능이 활성화되지 않은 경우
struct B2bNotEnabledError {
  type: string,
  message?: string,
}

@ description - 원본 세금계산서가 존재하지 않은 경우
struct B2bOriginalTaxInvoiceNotFoundError {
  type: string,
  message?: string,
}

@ description - 공급받는자가 존재하지 않은 경우
struct B2bRecipientNotFoundError {
  type: string,
  message?: string,
}

@ description - 금융기관 시스템이 정기 점검 중인 경우
struct B2bRegularMaintenanceTimeError {
  type: string,
  message?: string,
}

@ description - 조회 기준
enum B2bSearchDateType {
  @ description - 등록일
  REGISTER,

  @ description - 작성일
  WRITE,

  @ description - 발행일
  ISSUE,
}

@ description - 공급자가 존재하지 않은 경우
struct B2bSupplierNotFoundError {
  type: string,
  message?: string,
}

@ description - 정지 계좌인 경우
struct B2bSuspendedAccountError {
  type: string,
  message?: string,
}

@ description - 세금계산서
struct B2bTaxInvoice {
  @ description - 세금계산서 아이디
  id: string,

  @ description - 상태
  status: B2bTaxInvoiceStatus,

  @ description - 과세 유형
  taxationType: B2bTaxInvoiceTaxationType,

  @ description - 문서 유형
  documentModificationType: B2bTaxInvoiceDocumentModificationType,

  @ description - 지연 발행 여부
  isDelayed?: boolean,

  @ description - 발행 유형
  issuanceType: B2bTaxInvoiceIssuanceType,

  @ description - 일괄 발행 아이디
  bulkTaxInvoiceId?: string,

  @ description - 일련번호
  serialNumber?: string,

  @ description - 책번호 - 권
  bookVolume?: int32,

  @ description - 책번호 - 호
  bookIssue?: int32,

  @ description - 작성일
  writeDate: date,

  @ description - 발행 마감일
  issuanceDueDate: date,

  @ description - 영수/청구
  purposeType: B2bTaxInvoicePurposeType,

  @ description - 공급가액 합계
  totalSupplyAmount: int64,

  @ description - 세액 합계
  totalTaxAmount: int64,

  @ description - 합계 금액
  totalAmount: int64,

  @ description - 현금
  cashAmount?: int64,

  @ description - 수표
  checkAmount?: int64,

  @ description - 외상
  creditAmount?: int64,

  @ description - 어음
  noteAmount?: int64,

  @ description - 비고
  remarks: string[],

  @ description - 공급자 문서번호
  supplierDocumentKey?: string,

  @ description - 공급자
  supplier: B2bTaxInvoiceCompany,

  @ description - 공급받는자 문서번호
  recipientDocumentKey?: string,

  @ description - 공급받는자
  recipient: B2bTaxInvoiceCompany,

  @ description - 문자 전송 여부
  sendSms?: boolean,

  @ description - 수정 사유 기재
  modification?: B2bTaxInvoiceModification,

  @ description - 품목
  items: B2bTaxInvoiceItem[],

  @ description - 추가 담당자
  additionalContacts: B2bTaxInvoiceAdditionalContact[],

  @ description - 메모
  memo?: string,

  @ description - 임시 저장 일시
  draftedAt?: datetime,

  @ description - 발행 요청 일시
  requestedAt?: datetime,

  @ description - 발행 일시
  issuedAt?: datetime,

  @ description - 상태 변경 일시
  statusUpdatedAt?: datetime,

  @ description - 국세청 전송 일시
  ntsSentAt?: datetime,

  @ description - 국세청 승인번호
  ntsApprovalNumber?: string,

  @ description - 국세청 전송 결과
  ntsResult?: string,

  @ description - 국세청 결과 코드
  ntsResultCode?: string,

  @ description - 국세청 결과 수신 일시
  ntsResultReceivedAt?: datetime,

  @ description - 삭제 일시
  deletedAt?: datetime,
}

@ description - 추가 담당자
struct B2bTaxInvoiceAdditionalContact {
  @ description - 성명
  name?: string,

  @ description - 이메일
  email: string,
}

@ description - 세금계산서 첨부파일
struct B2bTaxInvoiceAttachment {
  @ description - 첨부 파일 아이디
  id: string,

  @ description - 첨부 파일명
  name: string,

  @ description - 첨부 일시
  attachedAt: datetime,
}

@ description - 세금계산서의 첨부파일을 찾을 수 없는 경우
struct B2bTaxInvoiceAttachmentNotFoundError {
  type: string,
  message?: string,
}

struct B2bTaxInvoiceCompany {
  @ description - 사업자등록번호
  brn: string,

  @ description - 종사업자 식별 번호
  taxRegistrationId?: string,

  @ description - 상호명
  name?: string,

  @ description - 대표자 성명
  representativeName?: string,

  @ description - 주소
  address?: string,

  @ description - 업태
  businessType?: string,

  @ description - 종목
  businessClass?: string,

  @ description - 담당자
  contact?: B2bTaxInvoiceContact,
}

@ description - 세금계산서 담당자
struct B2bTaxInvoiceContact {
  @ description - 성명
  name?: string,

  @ description - 부서
  department?: string,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 휴대전화번호
  mobilePhoneNumber?: string,

  @ description - 이메일
  email?: string,
}

@ description - 세금계산서 문서 수정 발행 유형
enum B2bTaxInvoiceDocumentModificationType {
  @ description - 정상발행
  NORMAL,

  @ description - 수정발행
  MODIFICATION,
}

@ description - 세금계산서 생성 요청 정보
struct B2bTaxInvoiceInput {
  @ description - 과세 유형
  taxationType: B2bTaxInvoiceTaxationType,

  @ description - 일련번호
  serialNumber?: string,

  @ description - 권
  bookVolume?: int32,

  @ description - 호
  bookIssue?: int32,

  @ description - 작성일
  writeDate: date,

  @ description - 영수/청구
  purposeType: B2bTaxInvoicePurposeType,

  @ description - 공급가액 합계
  totalSupplyAmount: int64,

  @ description - 세액 합계
  totalTaxAmount: int64,

  @ description - 합계 금액
  totalAmount: int64,

  @ description - 현금
  cashAmount?: int64,

  @ description - 수표
  checkAmount?: int64,

  @ description - 외상
  creditAmount?: int64,

  @ description - 어음
  noteAmount?: int64,

  @ description - 비고
  remarks?: string[],

  @ description - 공급자 문서번호
  supplierDocumentKey?: string,

  @ description - 공급자
  supplier: B2bTaxInvoiceCompany,

  @ description - 공급받는자 문서번호
  recipientDocumentKey?: string,

  @ description - 공급받는자
  recipient: B2bTaxInvoiceCompany,

  @ description - 문자 전송 여부
  sendSms?: boolean,

  @ description - 품목
  items?: B2bTaxInvoiceItem[],

  @ description - 추가 담당자
  additionalContacts?: B2bTaxInvoiceAdditionalContact[],
}

@ description - 발행 유형
enum B2bTaxInvoiceIssuanceType {
  @ description - 정발행
  NORMAL,

  @ description - 역발행
  REVERSE,
}

@ description - 품목
struct B2bTaxInvoiceItem {
  @ description - 결제일
  purchaseDate?: date,

  @ description - 품명
  name?: string,

  @ description - 규격
  spec?: string,

  @ description - 수량
  quantity?: Decimal,

  @ description - 단가
  unitCostAmount?: Decimal,

  @ description - 공급가액
  supplyCostAmount?: int64,

  @ description - 세액
  taxAmount?: int64,

  @ description - 비고
  remark?: string,
}

@ description - 세금계산서 식별자 유형
enum B2bTaxInvoiceKeyType {
  @ description - 공급자용 문서 번호
  SUPPLIER,

  @ description - 공급받는자용 문서 번호
  RECIPIENT,

  @ description - 세금계산서 아이디
  TAX_INVOICE_ID,
}

@ description - 세금 계산서 수정
struct B2bTaxInvoiceModification {
  @ description - 수정 사유
  type: B2bTaxInvoiceModificationType,

  @ description - 수정 대상 원본 세금계산서 국세청 승인 번호
  originalNtsApprovalNumber: string,

  @ description - 원본 세금계산서 아이디
  originalTaxInvoiceId: string,

  @ description - 최초 원본 세금계산서 아이디
  rootTaxInvoiceId: string,
}

@ description - 수정 세금계산서 생성 입력 정보
struct B2bTaxInvoiceModificationCreateBody {
  @ description - 수정 사유
  type: B2bTaxInvoiceModificationType,

  @ description - 사업자등록번호
  brn?: string,

  @ description - 세금계산서 문서 번호
  taxInvoiceKey: string,

  @ description - 문서 번호 유형
  taxInvoiceKeyType?: B2bTaxInvoiceKeyType,
}

@ description - 수정 사유
enum B2bTaxInvoiceModificationType {
  @ description - 기재사항 착오 정정
  CORRECTION_OF_ENTRY_ERRORS,

  @ description - 공금가액 변동
  CHANGE_IN_SUPPLY_COST,

  @ description - 환입
  RETURN,

  @ description - 계약 해제
  CANCELLATION_OF_CONTRACT,

  @ description - 착오에 의한 이중 발급
  DUPLICATE_ISSUANCE_DUE_TO_ERROR,
}

@ description - 세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우
struct B2bTaxInvoiceNoRecipientDocumentKeyError {
  type: string,
  message?: string,
}

@ description - 세금계산서에 공급자 문서 번호가 기입되지 않은 경우
struct B2bTaxInvoiceNoSupplierDocumentKeyError {
  type: string,
  message?: string,
}

@ description - 삭제 가능한 상태는 `DRAFTED`, `ISSUE_REFUSED`, `REQUEST_CANCELLED_BY_RECIPIENT`, `ISSUE_CANCELLED_BY_SUPPLIER`, `SENDING_FAILED` 입니다.
struct B2bTaxInvoiceNonDeletableStatusError {
  type: string,
  message?: string,
}

@ description - 세금계산서가 임시저장 상태가 아닌 경우
struct B2bTaxInvoiceNotDraftedStatusError {
  type: string,
  message?: string,
}

@ description - 세금계산서가 존재하지 않은 경우
struct B2bTaxInvoiceNotFoundError {
  type: string,
  message?: string,
}

@ description - 세금계산서가 발행된(ISSUED) 상태가 아닌 경우
struct B2bTaxInvoiceNotIssuedStatusError {
  type: string,
  message?: string,
}

@ description - 세금계산서가 역발행 대기 상태가 아닌 경우
struct B2bTaxInvoiceNotRequestedStatusError {
  type: string,
  message?: string,
}

@ description - 영수/청구
enum B2bTaxInvoicePurposeType {
  @ description - 영수
  RECEIPT,

  @ description - 청구
  INVOICE,

  @ description - 없음
  NONE,
}

@ description - 세금계산서에 공급 받는자 문서 번호가 이미 사용 중인 경우
struct B2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError {
  type: string,
  message?: string,
}

enum B2bTaxInvoiceStatus {
  @ description - 임시저장
  DRAFTED,

  @ description - 임시저장 대기
  DRAFT_PENDING,

  @ description - 임시저장 실패
  DRAFT_FAILED,

  @ description - 역발행 요청 완료 (전자 서명 요청됨)
  REQUESTED,

  @ description - 역발행 요청 대기
  REQUEST_PENDING,

  @ description - 역발행 요청 실패
  REQUEST_FAILED,

  @ description - 공급받는자에 의한 발행취소
  REQUEST_CANCELLED,

  @ description - 발행완료
  ISSUED,

  @ description - 전송전
  BEFORE_SENDING,

  @ description - 전송대기
  WAITING_SENDING,

  @ description - 전송중
  SENDING,

  @ description - 전송완료
  SENDING_COMPLETED,

  @ description - 전송실패
  SENDING_FAILED,

  @ description - 공급자의 발행거부
  REQUEST_REFUSED,

  @ description - 공급자에 의한 발행 취소
  ISSUANCE_CANCELLED,
}

@ description - 세금계산서 요약
struct B2bTaxInvoiceSummary {
  @ description - 세금계산서 아이디
  id: string,

  @ description - 과세 유형
  taxationType: B2bTaxInvoiceTaxationType,

  @ description - 문서 유형
  documentModificationType: B2bTaxInvoiceDocumentModificationType,

  @ description - 지연 발행 여부
  isDelayed?: boolean,

  @ description - 발행 유형
  issuanceType: B2bTaxInvoiceIssuanceType,

  @ description - 일괄 발행 아이디
  bulkTaxInvoiceId?: string,

  @ description - 공급가액 합계
  totalSupplyAmount: int64,

  @ description - 세액 합계
  totalTaxAmount: int64,

  @ description - 합계 금액
  totalAmount: int64,

  @ description - 영수/청구
  purposeType: B2bTaxInvoicePurposeType,

  @ description - 공급자 사업자등록번호
  supplierBrn: string,

  @ description - 공급자 상호
  supplierName: string,

  @ description - 공급자 대표자 성명
  supplierRepresentativeName: string,

  @ description - 공급자 문서번호
  supplierDocumentKey?: string,

  @ description - 공급받는자 사업자등록번호
  recipientBrn: string,

  @ description - 공급받는자 상호
  recipientName: string,

  @ description - 공급받는자 대표자 성명
  recipientRepresentativeName: string,

  @ description - 공급받는자 문서번호
  recipientDocumentKey?: string,

  @ description - 공급받는자 영업 상태
  recipientBusinessStatus?: B2bCompanyStateBusinessStatus,

  @ description - 공급받는자 휴폐업일자
  recipientClosedSuspendedDate?: date,

  @ description - 작성일
  writeDate: date,

  @ description - 발행 마감일
  issuanceDueDate: date,

  @ description - 상태
  status: B2bTaxInvoiceStatus,

  @ description - 임시 저장 일시
  draftedAt?: datetime,

  @ description - 발행 요청 일시
  requestedAt?: datetime,

  @ description - 발행 일시
  issuedAt?: datetime,

  @ description - 개봉 일시
  openedAt?: datetime,

  @ description - 상태 변경 일시
  statusUpdatedAt: datetime,

  @ description - 국세청 전송 일시
  ntsSentAt?: datetime,

  @ description - 국세청 승인번호
  ntsApprovalNumber?: string,

  @ description - 국세청 전송 결과
  ntsResult?: string,

  @ description - 국세청 결과 수신 일시
  ntsResultReceivedAt?: datetime,

  @ description - 국세청 결과 코드
  ntsResultCode?: string,

  @ description - 메모
  memo?: string,
}

@ description - 세금계산서에 공급자 문서 번호가 이미 사용 중인 경우
struct B2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError {
  type: string,
  message?: string,
}

@ description - 과세 유형
enum B2bTaxInvoiceTaxationType {
  @ description - 과세
  TAXABLE,

  @ description - 영세
  ZERO_RATED,

  @ description - 면세
  FREE,
}

@ description - 이벤트 유형
enum B2bTaxInvoiceWebhookEventType {
  Issue,
  CLOSEDOWN,
  OPEN,
  CancelRequest,
  CancelIssue,
  NTS,
  Request,
  Refuse,
}

@ description - 은행
enum Bank {
  @ description - 한국은행
  BANK_OF_KOREA,

  @ description - 산업은행
  KDB,

  @ description - 기업은행
  IBK,

  @ description - 국민은행
  KOOKMIN,

  @ description - 수협은행
  SUHYUP,

  @ description - 수출입은행
  KEXIM,

  @ description - NH농협은행
  NONGHYUP,

  @ description - 지역농축협
  LOCAL_NONGHYUP,

  @ description - 우리은행
  WOORI,

  @ description - SC제일은행
  STANDARD_CHARTERED,

  @ description - 한국씨티은행
  CITI,

  @ description - 아이엠뱅크
  DAEGU,

  @ description - 부산은행
  BUSAN,

  @ description - 광주은행
  KWANGJU,

  @ description - 제주은행
  JEJU,

  @ description - 전북은행
  JEONBUK,

  @ description - 경남은행
  KYONGNAM,

  @ description - 새마을금고
  KFCC,

  @ description - 신협
  SHINHYUP,

  @ description - 저축은행
  SAVINGS_BANK,

  @ description - 모간스탠리은행
  MORGAN_STANLEY,

  @ description - HSBC은행
  HSBC,

  @ description - 도이치은행
  DEUTSCHE,

  @ description - 제이피모간체이스은행
  JPMC,

  @ description - 미즈호은행
  MIZUHO,

  @ description - 엠유에프지은행
  MUFG,

  @ description - BOA은행
  BANK_OF_AMERICA,

  @ description - 비엔피파리바은행
  BNP_PARIBAS,

  @ description - 중국공상은행
  ICBC,

  @ description - 중국은행
  BANK_OF_CHINA,

  @ description - 산림조합중앙회
  NFCF,

  @ description - 대화은행
  UOB,

  @ description - 교통은행
  BOCOM,

  @ description - 중국건설은행
  CCB,

  @ description - 우체국
  POST,

  @ description - 신용보증기금
  KODIT,

  @ description - 기술보증기금
  KIBO,

  @ description - 하나은행
  HANA,

  @ description - 신한은행
  SHINHAN,

  @ description - 케이뱅크
  K_BANK,

  @ description - 카카오뱅크
  KAKAO,

  @ description - 토스뱅크
  TOSS,

  @ description - 기타 외국계은행(중국 농업은행 등)
  MISC_FOREIGN,

  @ description - 서울보증보험
  SGI,

  @ description - 한국신용정보원
  KCIS,

  @ description - 유안타증권
  YUANTA_SECURITIES,

  @ description - KB증권
  KB_SECURITIES,

  @ description - 상상인증권
  SANGSANGIN_SECURITIES,

  @ description - 한양증권
  HANYANG_SECURITIES,

  @ description - 리딩투자증권
  LEADING_SECURITIES,

  @ description - BNK투자증권
  BNK_SECURITIES,

  @ description - IBK투자증권
  IBK_SECURITIES,

  @ description - 다올투자증권
  DAOL_SECURITIES,

  @ description - 미래에셋증권
  MIRAE_ASSET_SECURITIES,

  @ description - 삼성증권
  SAMSUNG_SECURITIES,

  @ description - 한국투자증권
  KOREA_SECURITIES,

  @ description - NH투자증권
  NH_SECURITIES,

  @ description - 교보증권
  KYOBO_SECURITIES,

  @ description - 하이투자증권
  HI_SECURITIES,

  @ description - 현대차증권
  HYUNDAI_MOTOR_SECURITIES,

  @ description - 키움증권
  KIWOOM_SECURITIES,

  @ description - LS증권
  EBEST_SECURITIES,

  @ description - SK증권
  SK_SECURITIES,

  @ description - 대신증권
  DAISHIN_SECURITIES,

  @ description - 한화투자증권
  HANHWA_SECURITIES,

  @ description - 하나증권
  HANA_SECURITIES,

  @ description - 토스증권
  TOSS_SECURITIES,

  @ description - 신한투자증권
  SHINHAN_SECURITIES,

  @ description - DB금융투자
  DB_SECURITIES,

  @ description - 유진투자증권
  EUGENE_SECURITIES,

  @ description - 메리츠증권
  MERITZ_SECURITIES,

  @ description - 카카오페이증권
  KAKAO_PAY_SECURITIES,

  @ description - 부국증권
  BOOKOOK_SECURITIES,

  @ description - 신영증권
  SHINYOUNG_SECURITIES,

  @ description - 케이프투자증권
  CAPE_SECURITIES,

  @ description - 한국증권금융
  KOREA_SECURITIES_FINANCE,

  @ description - 한국포스증권
  KOREA_FOSS_SECURITIES,

  @ description - 우리종합금융
  WOORI_INVESTMENT_BANK,
}

@ description - 은행 정보
struct BankInfo {
  @ description - 은행
  bank: Bank,

  @ description - 언어별 명칭
  name: BankInfoName,
}

@ description - 은행 명칭
struct BankInfoName {
  @ description - 한국어 명칭
  ko: string,
}

@ description - 배송 정보 등록 전
struct BeforeRegisteredPaymentEscrow {
  @ description - 에스크로 상태
  status: string,
}

@ description - 빌링키가 이미 삭제된 경우
struct BillingKeyAlreadyDeletedError {
  type: string,
  message?: string,
}

@ description - 발급 실패 상세 정보
struct BillingKeyFailure {
  @ description - 실패 사유
  message?: string,

  @ description - PG사 실패 코드
  pgCode?: string,

  @ description - PG사 실패 사유
  pgMessage?: string,

  @ description - 실패 시점
  failedAt: datetime,
}

@ description - 빌링키 다건 조회를 위한 입력 정보
struct BillingKeyFilterInput {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 조회 기준 시점 유형
  timeRangeField?: BillingKeyTimeRangeField,

  @ description - 조회 기준 시점 범위의 시작
  from?: datetime,

  @ description - 조회 기준 시점 범위의 끝
  until?: datetime,

  @ description - 빌링키 상태 리스트
  status?: BillingKeyStatus[],

  @ description - 채널 그룹 아이디 리스트
  channelGroupIds?: string[],

  @ description - 고객 ID
  customerId?: string,

  @ description - 플랫폼 유형
  platformType?: PaymentClientType,

  @ description - 통합 검색 필터
  textSearch?: BillingKeyTextSearch,

  @ description - PG사 결제 모듈 리스트
  pgProviders?: PgProvider[],

  @ description - PG사 리스트
  pgCompanies?: PgCompany[],

  @ description - 결제수단 리스트
  methods?: BillingKeyPaymentMethodType[],

  @ description - 포트원 버전
  version?: PortOneVersion,
}

@ description - 빌링키 정보
@ discriminator - status
oneof BillingKeyInfo {
  @ description - 발급 삭제 완료
  @ mapping - DELETED
  DeletedBillingKeyInfo,

  @ description - 발급 완료
  @ mapping - ISSUED
  IssuedBillingKeyInfo,
}

struct BillingKeyInfoSummary {
  @ description - 발급된 빌링키
  billingKey: string,

  @ description - 발급된 채널
  channels?: SelectedChannel[],

  @ description - 빌링크 발급 완료 시점
  issuedAt: datetime,
}

@ description - 빌링키가 존재하지 않는 경우
struct BillingKeyNotFoundError {
  type: string,
  message?: string,
}

struct BillingKeyNotIssuedError {
  type: string,
  message?: string,
}

@ description - 빌링키 결제 요청 입력 정보
struct BillingKeyPaymentInput {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 빌링키 결제에 사용할 빌링키
  billingKey: string,

  @ description - 채널 키
  channelKey?: string,

  @ description - 주문명
  orderName: string,

  @ description - 고객 정보
  customer?: CustomerInput,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 결제 금액 세부 입력 정보
  amount: PaymentAmountInput,

  @ description - 통화
  currency: Currency,

  @ description - 할부 개월 수
  installmentMonth?: int32,

  @ description - 무이자 할부 이자를 고객사가 부담할지 여부
  useFreeInterestFromMerchant?: boolean,

  @ description - 카드 포인트 사용 여부
  useCardPoint?: boolean,

  @ description - 현금영수증 정보
  cashReceipt?: CashReceiptInput,

  @ description - 결제 국가
  country?: Country,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 개수
  productCount?: int32,

  @ description - 상품 유형
  productType?: PaymentProductType,

  @ description - 배송지 주소
  shippingAddress?: SeparatedAddressInput,

  @ description - 해당 결제에 적용할 프로모션 아이디
  promotionId?: string,

  @ description - PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고)
  bypass?: object,
}

@ description - 빌링키 발급 수단 정보
@ discriminator - type
oneof BillingKeyPaymentMethod {
  @ description - 카드 정보
  @ mapping - BillingKeyPaymentMethodCard
  BillingKeyPaymentMethodCard,

  @ description - 간편 결제 정보
  @ mapping - BillingKeyPaymentMethodEasyPay
  BillingKeyPaymentMethodEasyPay,

  @ description - 모바일 정보
  @ mapping - BillingKeyPaymentMethodMobile
  BillingKeyPaymentMethodMobile,

  @ description - 페이팔 정보
  @ mapping - BillingKeyPaymentMethodPaypal
  BillingKeyPaymentMethodPaypal,

  @ description - 계좌이체 정보
  @ mapping - BillingKeyPaymentMethodTransfer
  BillingKeyPaymentMethodTransfer,
}

@ description - 카드 정보
struct BillingKeyPaymentMethodCard {
  type: string,

  @ description - 카드 상세 정보
  card?: Card,
}

@ description - 간편 결제 정보
struct BillingKeyPaymentMethodEasyPay {
  type: string,

  @ description - 간편 결제 PG사
  provider?: EasyPayProvider,

  @ description - 간편 결제 수단
  method?: BillingKeyPaymentMethodEasyPayMethod,
}

@ description - 충전식 포인트 결제 정보
struct BillingKeyPaymentMethodEasyPayCharge {
  type: string,
}

@ description - 간편 결제 수단
@ discriminator - type
oneof BillingKeyPaymentMethodEasyPayMethod {
  @ description - 카드 정보
  @ mapping - BillingKeyPaymentMethodCard
  BillingKeyPaymentMethodCard,

  @ description - 충전식 포인트 결제 정보
  @ mapping - BillingKeyPaymentMethodEasyPayCharge
  BillingKeyPaymentMethodEasyPayCharge,

  @ description - 계좌이체 정보
  @ mapping - BillingKeyPaymentMethodTransfer
  BillingKeyPaymentMethodTransfer,
}

@ description - 모바일 정보
struct BillingKeyPaymentMethodMobile {
  type: string,

  @ description - 전화번호
  phoneNumber?: string,
}

@ description - 페이팔 정보
struct BillingKeyPaymentMethodPaypal {
  type: string,
}

@ description - 계좌이체 정보
struct BillingKeyPaymentMethodTransfer {
  type: string,

  @ description - 표준 은행 코드
  bank?: Bank,

  @ description - 계좌번호
  accountNumber?: string,
}

@ description - 빌링키 결제 수단
enum BillingKeyPaymentMethodType {
  @ description - 카드
  CARD,

  @ description - 모바일
  MOBILE,

  @ description - 간편 결제
  EASY_PAY,

  @ description - 계좌 이체
  TRANSFER,
}

@ description - 빌링키 결제 완료된 결제 건 요약 정보
struct BillingKeyPaymentSummary {
  @ description - PG사 결제 아이디
  pgTxId: string,

  @ description - 결제 완료 시점
  paidAt: datetime,
}

@ description - 빌링키 정렬 기준
enum BillingKeySortBy {
  @ description - 발급 요청 시각
  REQUESTED_AT,

  @ description - 발급 완료 시각
  ISSUED_AT,

  @ description - 삭제 완료 시각
  DELETED_AT,

  @ description - 상태 변경 시각
  STATUS_TIMESTAMP,
}

@ description - 빌링키 다건 조회 시 정렬 조건
struct BillingKeySortInput {
  @ description - 정렬 기준 필드
  by?: BillingKeySortBy,

  @ description - 정렬 순서
  order?: SortOrder,
}

@ description - 빌링키 상태
enum BillingKeyStatus {
  ISSUED,
  DELETED,
}

@ description - 통합검색 입력 정보
struct BillingKeyTextSearch {
  field: BillingKeyTextSearchField,
  value: string,
}

@ description - 통합검색 항목
enum BillingKeyTextSearchField {
  CARD_BIN,
  CARD_NUMBER,
  PG_MERCHANT_ID,
  CUSTOMER_NAME,
  CUSTOMER_EMAIL,
  CUSTOMER_PHONE_NUMBER,
  CUSTOMER_ADDRESS,
  CUSTOMER_ZIPCODE,
  USER_AGENT,
  BILLING_KEY,
  CHANNEL_GROUP_NAME,
}

@ description - 빌링키 다건 조회 시, 시각 범위를 적용할 필드
enum BillingKeyTimeRangeField {
  @ description - 발급 요청 시각
  REQUESTED_AT,

  @ description - 발급 완료 시각
  ISSUED_AT,

  @ description - 삭제 완료 시각
  DELETED_AT,

  @ description - 상태 변경 시각
  STATUS_TIMESTAMP,
}

@ description - 결제 취소 금액이 취소 가능 금액을 초과한 경우
struct CancelAmountExceedsCancellableAmountError {
  type: string,
  message?: string,
}

@ description - 세금계산서 역발행 취소 정보
struct CancelB2bTaxInvoiceIssuanceBody {
  @ description - 메모
  memo?: string,
}

@ description - CancelB2bTaxInvoiceIssuanceError
@ discriminator - type
oneof CancelB2bTaxInvoiceIssuanceError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_ISSUED_STATUS
  B2bTaxInvoiceNotIssuedStatusError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 역발행 취소 응답
struct CancelB2bTaxInvoiceIssuanceResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description - 세금계산서 역발행 요청 취소 정보
struct CancelB2bTaxInvoiceRequestBody {
  @ description - 메모
  memo?: string,
}

@ description - CancelB2bTaxInvoiceRequestError
@ discriminator - type
oneof CancelB2bTaxInvoiceRequestError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_REQUESTED_STATUS
  B2bTaxInvoiceNotRequestedStatusError,

  @ mapping - B2B_TAX_INVOICE_NO_RECIPIENT_DOCUMENT_KEY
  B2bTaxInvoiceNoRecipientDocumentKeyError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 역발행 요청 취소 응답
struct CancelB2bTaxInvoiceRequestResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description - CancelCashReceiptError
@ discriminator - type
oneof CancelCashReceiptError {
  @ mapping - CASH_RECEIPT_NOT_FOUND
  CashReceiptNotFoundError,

  @ mapping - CASH_RECEIPT_NOT_ISSUED
  CashReceiptNotIssuedError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 현금 영수증 취소 성공 응답
struct CancelCashReceiptResponse {
  @ description - 취소 금액
  cancelledAmount: int64,

  @ description - 현금 영수증 취소 완료 시점
  cancelledAt: datetime,
}

@ description - 결제 취소 요청 입력 정보
struct CancelPaymentBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 취소 총 금액
  amount?: int64,

  @ description - 취소 금액 중 면세 금액
  taxFreeAmount?: int64,

  @ description - 취소 금액 중 부가세액
  vatAmount?: int64,

  @ description - 취소 사유
  reason: string,

  @ description - 취소 요청자
  requester?: CancelRequester,

  @ description - 프로모션 할인율 유지 옵션
  promotionDiscountRetainOption?: PromotionDiscountRetainOption,

  @ description - 결제 건의 취소 가능 잔액
  currentCancellableAmount?: int64,

  @ description - 환불 계좌
  refundAccount?: CancelPaymentBodyRefundAccount,
}

@ description - 고객 정보 입력 형식
struct CancelPaymentBodyRefundAccount {
  @ description - 은행
  bank: Bank,

  @ description - 계좌번호
  number: string,

  @ description - 예금주
  holderName: string,

  @ description - 예금주 연락처 - 스마트로 가상계좌 결제인 경우에 필요합니다.
  holderPhoneNumber?: string,
}

@ description - CancelPaymentError
@ discriminator - type
oneof CancelPaymentError {
  @ mapping - CANCELLABLE_AMOUNT_CONSISTENCY_BROKEN
  CancellableAmountConsistencyBrokenError,

  @ mapping - CANCEL_AMOUNT_EXCEEDS_CANCELLABLE_AMOUNT
  CancelAmountExceedsCancellableAmountError,

  @ mapping - CANCEL_TAX_AMOUNT_EXCEEDS_CANCELLABLE_TAX_AMOUNT
  CancelTaxAmountExceedsCancellableTaxAmountError,

  @ mapping - CANCEL_TAX_FREE_AMOUNT_EXCEEDS_CANCELLABLE_TAX_FREE_AMOUNT
  CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - NEGATIVE_PROMOTION_ADJUSTED_CANCEL_AMOUNT
  NegativePromotionAdjustedCancelAmountError,

  @ mapping - PAYMENT_ALREADY_CANCELLED
  PaymentAlreadyCancelledError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - PAYMENT_NOT_PAID
  PaymentNotPaidError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - PROMOTION_DISCOUNT_RETAIN_OPTION_SHOULD_NOT_BE_CHANGED
  PromotionDiscountRetainOptionShouldNotBeChangedError,

  @ mapping - SUM_OF_PARTS_EXCEEDS_CANCEL_AMOUNT
  SumOfPartsExceedsCancelAmountError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제 취소 성공 응답
struct CancelPaymentResponse {
  @ description - 결체 취소 내역
  cancellation: PaymentCancellation,
}

@ description - CancelPlatformAdditionalFeePolicyScheduleError
@ discriminator - type
oneof CancelPlatformAdditionalFeePolicyScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND
  PlatformAdditionalFeePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 추가 수수료 정책 예약 업데이트 취소 성공 응답
struct CancelPlatformAdditionalFeePolicyScheduleResponse {}

@ description - CancelPlatformContractScheduleError
@ discriminator - type
oneof CancelPlatformContractScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 계약 예약 업데이트 취소 성공 응답
struct CancelPlatformContractScheduleResponse {}

@ description - CancelPlatformDiscountSharePolicyScheduleError
@ discriminator - type
oneof CancelPlatformDiscountSharePolicyScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 할인 분담 정책 예약 업데이트 취소 성공 응답
struct CancelPlatformDiscountSharePolicyScheduleResponse {}

@ description - CancelPlatformPartnerScheduleError
@ discriminator - type
oneof CancelPlatformPartnerScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 예약 업데이트 취소 성공 응답
struct CancelPlatformPartnerScheduleResponse {}

enum CancelRequester {
  CUSTOMER,
  ADMIN,
}

@ description - 취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우
struct CancelTaxAmountExceedsCancellableTaxAmountError {
  type: string,
  message?: string,
}

@ description - 취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우
struct CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError {
  type: string,
  message?: string,
}

@ description - 취소 가능 잔액 검증에 실패한 경우
struct CancellableAmountConsistencyBrokenError {
  type: string,
  message?: string,
}

@ description - 발급 취소
struct CancelledCashReceipt {
  @ description - 현금영수증 상태
  status: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 현금영수증 발급에 사용된 채널
  channel: SelectedChannel,

  @ description - 결제 금액
  amount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세액
  vatAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 주문명
  orderName: string,

  @ description - 수동 발급 여부
  isManual: boolean,

  @ description - 현금영수증 유형
  type?: CashReceiptType,

  @ description - PG사 현금영수증 아이디
  pgReceiptId?: string,

  @ description - 승인번호
  issueNumber: string,

  @ description - 현금영수증 URL
  url?: string,

  @ description - 발급 시점
  issuedAt: datetime,

  @ description - 취소 시점
  cancelledAt: datetime,

  @ description - 상태 업데이트 시점
  statusUpdatedAt?: datetime,
}

@ description - 결제 취소 상태 건
struct CancelledPayment {
  @ description - 결제 건 상태
  status: string,

  @ description - 결제 건 아이디
  id: string,

  @ description - 결제 건 포트원 채번 아이디
  transactionId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - 결제 완료 시점
  paidAt?: datetime,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - 현금영수증
  cashReceipt?: PaymentCashReceipt,

  @ description - 거래 영수증 URL
  receiptUrl?: string,

  @ description - 결제 취소 내역
  cancellations: PaymentCancellation[],

  @ description - 결제 취소 시점
  cancelledAt: datetime,
}

@ description - 취소된 현금영수증
struct CancelledPaymentCashReceipt {
  @ description - 결제 건 내 현금영수증 상태
  status: string,

  @ description - 현금영수증 유형
  type?: CashReceiptType,

  @ description - PG사 영수증 발급 아이디
  pgReceiptId?: string,

  @ description - 승인 번호
  issueNumber: string,

  @ description - 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 현금영수증 URL
  url?: string,

  @ description - 발급 시점
  issuedAt: datetime,

  @ description - 취소 시점
  cancelledAt: datetime,
}

@ description - 거래 취소
struct CancelledPaymentEscrow {
  @ description - 에스크로 상태
  status: string,

  @ description - 택배사
  company: string,

  @ description - 송장번호
  invoiceNumber: string,

  @ description - 발송 일시
  sentAt?: datetime,

  @ description - 배송등록 처리 일자
  appliedAt?: datetime,
}

@ description - 결제 취소 상태 건
struct CancelledPaymentTransaction {
  @ description - 결제 시도 상태
  status: string,

  @ description - 결제 시도 아이디 (transactionId)
  id: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - 결제 완료 시점
  paidAt?: datetime,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - 현금영수증
  cashReceipt?: PaymentCashReceipt,

  @ description - 거래 영수증 URL
  receiptUrl?: string,

  @ description - 결제 취소 내역
  cancellations: PaymentCancellation[],

  @ description - 결제 취소 시점
  cancelledAt: datetime,
}

@ description - 카드 상세 정보
struct Card {
  @ description - 발행사 코드
  publisher?: string,

  @ description - 발급사 코드
  issuer?: string,

  @ description - 카드 브랜드
  brand?: CardBrand,

  @ description - 카드 유형
  type?: CardType,

  @ description - 카드 소유주 유형
  ownerType?: CardOwnerType,

  @ description - 카드 번호 앞 6자리 또는 8자리의 BIN (Bank Identification Number)
  bin?: string,

  @ description - 카드 상품명
  name?: string,

  @ description - 마스킹된 카드 번호
  number?: string,
}

@ description - 카드 브랜드
enum CardBrand {
  LOCAL,
  MASTER,
  UNIONPAY,
  VISA,
  JCB,
  AMEX,
  DINERS,
}

@ description - 카드사
enum CardCompany {
  @ description - KDB산업은행
  KOREA_DEVELOPMENT_BANK,

  @ description - 새마을금고
  KFCC,

  @ description - 신협
  SHINHYUP,

  @ description - 우체국
  EPOST,

  @ description - 저축은행
  SAVINGS_BANK_KOREA,

  @ description - 카카오뱅크
  KAKAO_BANK,

  @ description - 케이뱅크
  K_BANK,

  @ description - 토스뱅크
  TOSS_BANK,

  @ description - 우리카드
  WOORI_CARD,

  @ description - BC카드
  BC_CARD,

  @ description - 광주카드
  GWANGJU_CARD,

  @ description - 삼성카드
  SAMSUNG_CARD,

  @ description - 신한카드
  SHINHAN_CARD,

  @ description - 현대카드
  HYUNDAI_CARD,

  @ description - 롯데카드
  LOTTE_CARD,

  @ description - 수협카드
  SUHYUP_CARD,

  @ description - 씨티카드
  CITI_CARD,

  @ description - NH카드
  NH_CARD,

  @ description - 전북카드
  JEONBUK_CARD,

  @ description - 제주카드
  JEJU_CARD,

  @ description - 하나카드
  HANA_CARD,

  @ description - 국민카드
  KOOKMIN_CARD,

  @ description - 해외카드
  UNIDENTIFIED_GLOBAL_CARD,

  @ description - 차이뱅크
  CHAI_CARD,

  @ description - 아맥스카드
  AMEX_CARD,

  @ description - 러시아 미르카드
  MIR_CARD,

  @ description - 은련카드
  UNION_CARD,

  @ description - JCB카드
  JCB_CARD,

  @ description - VISA카드
  VISA_CARD,

  @ description - MASTER카드
  MASTER_CARD,

  @ description - DINERS카드
  DINERS_CARD,

  @ description - DISCOVER카드
  DISCOVER_CARD,

  @ description - IBK기업은행
  IBK,

  @ description - NH농협은행
  NH_BANK,

  @ description - 대구은행
  DAEGU_CARD,

  @ description - 부산은행
  BUSAN_CARD,

  @ description - SC제일은행
  SC_BANK,

  @ description - 경남은행
  KYONGNAM_CARD,

  @ description - 우리은행
  WOORI_BANK,

  @ description - 중국은행
  CHINA_BANK,

  @ description - 산림조합중앙회
  NFCF,

  @ description - KB증권
  KB_SECURITIES,

  @ description - 유안타증권
  YUANTA_SECURITIES,

  @ description - NH투자증권
  NH_SECURITIES,

  @ description - DB금융투자
  DB_SECURITIES,

  @ description - SK증권
  SK_SECURITIES,

  @ description - 유진투자증권
  EUGENE_SECURITIES,

  @ description - 교보증권
  KYOBO_SECURITIES,

  @ description - 미래에셋증권
  MIRAE_ASSET_SECURITIES,

  @ description - 한국투자증권
  KOREA_SECURITIES,

  @ description - 한화투자증권
  HANHWA_SECURITIES,

  @ description - SSG카드
  SSG,

  @ description - 코나아이
  KONA_I,

  @ description - 차이코퍼레이션
  CHAI,

  @ description - 토스카드
  TOSS_CARD,

  @ description - 페이코
  PAYCO,

  @ description - 지머니트랜스
  GMONEY_TRANS,

  @ description - 디셈버앤컴퍼니
  FINT,

  @ description - KG모빌리언스
  KG_MOBILIANS,

  @ description - 한패스
  HANPASS,

  @ description - 핀샷
  FINSHOT,

  @ description - 비즈플레이
  BIZPLAY,

  @ description - 나이스정보통신
  NICE,

  @ description - 다날
  DANAL,

  @ description - 섹타나인
  SECTA,

  @ description - 글로벌머니익스프레스
  GME,

  @ description - 로드시스템
  LORD_SYSTEM,

  @ description - 네이버페이
  NAVERPAY,

  @ description - 카카오페이
  KAKAOPAY,

  @ description - KCB산은캐피탈
  KDBC,

  @ description - 틴캐쉬
  TEEN_CASH,

  @ description - 에그머니
  EGG_MONEY,

  @ description - 온캐쉬
  ON_CASH,

  @ description - 갤럭시아 머니트리
  GALAXIA_MONEY_TREE,

  @ description - 레몬트리 퍼핀
  FIRFIN,
}

@ description - 카드 인증 관련 정보
struct CardCredential {
  @ description - 카드 번호 (숫자만)
  number: string,

  @ description - 유효 기간 만료 연도 (2자리)
  expiryYear: string,

  @ description - 유효 기간 만료 월 (2자리)
  expiryMonth: string,

  @ description - 생년월일 (yyMMdd) 또는 사업자 등록 번호 (10자리, 숫자만)
  birthOrBusinessRegistrationNumber?: string,

  @ description - 비밀번호 앞 2자리
  passwordTwoDigits?: string,
}

@ description - 카드 소유주 유형
enum CardOwnerType {
  @ description - 개인
  PERSONAL,

  @ description - 법인
  CORPORATE,
}

@ description - 카드 프로모션
struct CardPromotion {
  @ description - 프로모션 유형
  type: string,

  @ description - 프로모션 아이디
  id: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 프로모션 이름
  name: string,

  @ description - 할인 정책
  discountPolicy: PromotionDiscountPolicy,

  @ description - 총 예산
  totalBudget: int64,

  @ description - 최대 할인 금액
  maxDiscountAmount?: int64,

  @ description - 소진 금액
  spentAmount: int64,

  @ description - 금액 화폐
  currency: Currency,

  @ description - 프로모션 시작 시각
  startAt: datetime,

  @ description - 프로모션 종료 시각
  endAt: datetime,

  @ description - 프로모션 중단 시각
  terminatedAt?: datetime,

  @ description - 프로모션 카드사
  cardCompany: PromotionCardCompany,

  @ description - 프로모션 상태
  status: PromotionStatus,

  @ description - 프로모션 생성 시각
  createdAt: datetime,

  @ description - 결제 취소 시 프로모션 예산 복구 옵션
  recoverOption: PromotionRecoverOption,
}

@ description - 카드 유형
enum CardType {
  @ description - 신용카드
  CREDIT,

  @ description - 체크카드
  DEBIT,

  @ description - 기프트카드
  GIFT,
}

@ description - 통신사
enum Carrier {
  @ description - SKT
  SKT,

  @ description - KT
  KT,

  @ description - LG 유플러스
  LGU,

  @ description - SKT 알뜰폰
  SKT_MVNO,

  @ description - KT 알뜰폰
  KT_MVNO,

  @ description - LGU 알뜰폰
  LGU_MVNO,
}

@ description - 현금영수증 내역
@ discriminator - status
oneof CashReceipt {
  @ description - 발급 취소
  @ mapping - CANCELLED
  CancelledCashReceipt,

  @ description - 발급 완료
  @ mapping - ISSUED
  IssuedCashReceipt,

  @ description - 발급 실패
  @ mapping - ISSUE_FAILED
  IssueFailedCashReceipt,
}

@ description - 현금영수증이 이미 발급된 경우
struct CashReceiptAlreadyIssuedError {
  type: string,
  message?: string,
}

@ description - 현금영수증 다건 조회를 위한 입력 정보
struct CashReceiptFilterInput {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 조회 기준 시점 유형
  timeRangeField?: CashReceiptTimeRangeField,

  @ description - 조회 기준 시점 범위의 시작
  from?: datetime,

  @ description - 조회 기준 시점 범위의 끝
  until?: datetime,

  @ description - 고객사 결제 아이디
  paymentId?: string,

  @ description - 테스트 결제 필터링
  isTest?: boolean,

  @ description - 주문명
  orderName?: string,

  @ description - 현금영수증 발급 상태 리스트
  statuses?: CashReceiptStatus[],

  @ description - 수동 발급 여부
  isManual?: boolean,

  @ description - PG사 현금영수증 발급 번호
  pgReceiptId?: string,

  @ description - PG 상점아이디
  pgMerchantId?: string,

  @ description - PG사 결제 모듈 리스트
  pgProviders?: PgProvider[],

  @ description - PG사 리스트
  pgCompanies?: PgCompany[],

  @ description - 포트원 버전
  version?: PortOneVersion,
}

@ description - 현금영수증 입력 정보
struct CashReceiptInput {
  @ description - 현금영수증 유형
  type: CashReceiptInputType,

  @ description - 사용자 식별 번호
  customerIdentityNumber?: string,
}

@ description - 입력 시 발급 유형
enum CashReceiptInputType {
  @ description - 소득공제용
  PERSONAL,

  @ description - 지출증빙용
  CORPORATE,

  @ description - 미발행
  NO_RECEIPT,
}

@ description - 현금영수증이 존재하지 않는 경우
struct CashReceiptNotFoundError {
  type: string,
  message?: string,
}

@ description - 현금영수증이 발급되지 않은 경우
struct CashReceiptNotIssuedError {
  type: string,
  message?: string,
}

@ description - 현금영수증 정렬 기준
enum CashReceiptSortBy {
  @ description - 발급 시각
  ISSUED_AT,

  @ description - 취소 시각
  CANCELLED_AT,

  @ description - 상태 변경 시각
  STATUS_UPDATED_AT,
}

@ description - 현금영수증 다건 조회 시 정렬 조건
struct CashReceiptSortInput {
  @ description - 정렬 기준 필드
  by?: CashReceiptSortBy,

  @ description - 정렬 순서
  order?: SortOrder,
}

@ description - 현금영수증 발급 건 상태
enum CashReceiptStatus {
  ISSUED,
  CANCELLED,
  FAILED,
}

@ description - 현금영수증 내역
struct CashReceiptSummary {
  @ description - 발행 번호
  issueNumber: string,

  @ description - 현금 영수증 URL
  url: string,

  @ description - PG사 현금영수증 아이디
  pgReceiptId: string,
}

@ description - 현금영수증 다건 조회 시, 시각 범위를 적용할 필드
enum CashReceiptTimeRangeField {
  @ description - 발급 시각
  ISSUED_AT,

  @ description - 취소 시각
  CANCELLED_AT,

  @ description - 상태 변경 시각
  STATUS_UPDATED_AT,
}

@ description - 발급 유형
enum CashReceiptType {
  @ description - 소득공제용
  PERSONAL,

  @ description - 지출증빙용
  CORPORATE,
}

@ description - 채널 정보
struct Channel {
  @ description - 채널 아이디
  id: string,

  @ description - 채널명
  name: string,

  @ description - PG사 모듈
  pgProvider: PgProvider,

  @ description - PG사 모듈에 해당하는 PG사
  pgCompany: PgCompany,

  @ description - 채널 유형
  type: ChannelType,

  @ description - PG사 상점 아이디
  pgMerchantId: string,

  @ description - 결제용 채널 여부
  isForPayment: boolean,

  @ description - 본인인증용 채널 여부
  isForIdentityVerification: boolean,

  @ description - 채널 키
  key: string,
}

@ description - 이름 중복이 허용되지 않는데 이름이 겹치는 대상이 있는 경우
struct ChannelDuplicateNameError {
  type: string,
  message?: string,
}

@ description - 채널 그룹 정보
struct ChannelGroupSummary {
  @ description - 채널 그룹 아이디
  id: string,

  @ description - 채널 그룹 이름
  name: string,

  @ description - 테스트 채널 그룹 여부
  isForTest: boolean,
}

@ description - 요청된 채널이 존재하지 않는 경우
struct ChannelNotFoundError {
  type: string,
  message?: string,
}

@ description - 여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우
struct ChannelSpecificError {
  type: string,
  message?: string,
  failures: ChannelSpecificFailure[],

  @ description - (결제, 본인인증 등에) 선택된 채널 정보
  succeededChannels: SelectedChannel[],
}

@ description - ChannelSpecificFailure
@ discriminator - type
oneof ChannelSpecificFailure {
  @ description - 요청된 입력 정보가 유효하지 않은 경우
  @ mapping - INVALID_REQUEST
  ChannelSpecificFailureInvalidRequest,

  @ description - PG사에서 오류를 전달한 경우
  @ mapping - PG_PROVIDER
  ChannelSpecificFailurePgProvider,
}

@ description - 허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.
struct ChannelSpecificFailureInvalidRequest {
  type: string,
  channel: SelectedChannel,
  message?: string,
}

@ description - PG사에서 오류를 전달한 경우
struct ChannelSpecificFailurePgProvider {
  type: string,
  channel: SelectedChannel,
  message?: string,
  pgCode: string,
  pgMessage: string,
}

@ description - 채널 유형
enum ChannelType {
  @ description - 라이브 채널
  LIVE,

  @ description - 고객사 전용 테스트 채널
  MERCHANT_TEST,

  @ description - 공용 테스트 채널
  SHARED_TEST,
}

@ description - CloseVirtualAccountError
@ discriminator - type
oneof CloseVirtualAccountError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - PAYMENT_NOT_WAITING_FOR_DEPOSIT
  PaymentNotWaitingForDepositError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 가상계좌 말소 성공 응답
struct CloseVirtualAccountResponse {
  @ description - 가상계좌 말소 시점
  closedAt: datetime,
}

@ description - 에스크로 구매 확정 입력 정보
struct ConfirmEscrowBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 확인 주체가 상점인지 여부
  fromStore?: boolean,
}

@ description - ConfirmEscrowError
@ discriminator - type
oneof ConfirmEscrowError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - PAYMENT_NOT_PAID
  PaymentNotPaidError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 에스크로 구매 확정 성공 응답
struct ConfirmEscrowResponse {
  @ description - 에스크로 구매 확정 시점
  completedAt: datetime,
}

@ description - 본인인증 확인을 위한 입력 정보
struct ConfirmIdentityVerificationBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - OTP (One-Time Password)
  otp?: string,
}

@ description - ConfirmIdentityVerificationError
@ discriminator - type
oneof ConfirmIdentityVerificationError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - IDENTITY_VERIFICATION_ALREADY_VERIFIED
  IdentityVerificationAlreadyVerifiedError,

  @ mapping - IDENTITY_VERIFICATION_NOT_FOUND
  IdentityVerificationNotFoundError,

  @ mapping - IDENTITY_VERIFICATION_NOT_SENT
  IdentityVerificationNotSentError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 본인인증 확인 성공 응답
struct ConfirmIdentityVerificationResponse {
  @ description - 완료된 본인인증 내역
  identityVerification: VerifiedIdentityVerification,
}

@ description - 구매 확정
struct ConfirmedPaymentEscrow {
  @ description - 에스크로 상태
  status: string,

  @ description - 택배사
  company: string,

  @ description - 송장번호
  invoiceNumber: string,

  @ description - 발송 일시
  sentAt?: datetime,

  @ description - 배송등록 처리 일자
  appliedAt?: datetime,

  @ description - 자동 구매 확정 처리 여부
  isAutomaticallyConfirmed: boolean,
}

@ description - 파트너들을 연동 사업자로 일괄 연동합니다.
struct ConnectBulkPartnerMemberCompanyBody {
  @ description - 연동 사업자로 일괄 연동할 파트너 조건 필터
  filter?: PlatformPartnerFilterInput,
}

@ description - ConnectBulkPartnerMemberCompanyError
@ discriminator - type
oneof ConnectBulkPartnerMemberCompanyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_BTX_NOT_ENABLED
  PlatformBtxNotEnabledError,

  @ mapping - PLATFORM_EXTERNAL_API_FAILED
  PlatformExternalApiFailedError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - PLATFORM_TARGET_PARTNER_NOT_FOUND
  PlatformTargetPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 연동 사업자 일괄 연동 요청 응답
struct ConnectBulkPartnerMemberCompanyResponse {
  bulkTask: PlatformBulkTask,
}

@ description - ConnectPartnerMemberCompanyError
@ discriminator - type
oneof ConnectPartnerMemberCompanyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_BTX_NOT_ENABLED
  PlatformBtxNotEnabledError,

  @ mapping - PLATFORM_EXTERNAL_API_FAILED
  PlatformExternalApiFailedError,

  @ mapping - PLATFORM_MEMBER_COMPANY_NOT_CONNECTABLE_STATUS
  PlatformMemberCompanyNotConnectableStatusError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - PLATFORM_PARTNER_SCHEDULE_EXISTS
  PlatformPartnerScheduleExistsError,

  @ mapping - PLATFORM_PARTNER_TAXATION_TYPE_IS_SIMPLE
  PlatformPartnerTaxationTypeIsSimpleError,

  @ mapping - PLATFORM_PARTNER_TYPE_IS_NOT_BUSINESS
  PlatformPartnerTypeIsNotBusinessError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 연동 사업자 연동 요청 응답
struct ConnectPartnerMemberCompanyResponse {
  partner: PlatformPartner,
}

@ description - 국가
enum Country {
  @ description - Andorra
  AD,

  @ description - United Arab Emirates (the)
  AE,

  @ description - Afghanistan
  AF,

  @ description - Antigua and Barbuda
  AG,

  @ description - Anguilla
  AI,

  @ description - Albania
  AL,

  @ description - Armenia
  AM,

  @ description - Angola
  AO,

  @ description - Antarctica
  AQ,

  @ description - Argentina
  AR,

  @ description - American Samoa
  AS,

  @ description - Austria
  AT,

  @ description - Australia
  AU,

  @ description - Aruba
  AW,

  @ description - Åland Islands
  AX,

  @ description - Azerbaijan
  AZ,

  @ description - Bosnia and Herzegovina
  BA,

  @ description - Barbados
  BB,

  @ description - Bangladesh
  BD,

  @ description - Belgium
  BE,

  @ description - Burkina Faso
  BF,

  @ description - Bulgaria
  BG,

  @ description - Bahrain
  BH,

  @ description - Burundi
  BI,

  @ description - Benin
  BJ,

  @ description - Saint Barthélemy
  BL,

  @ description - Bermuda
  BM,

  @ description - Brunei Darussalam
  BN,

  @ description - Bolivia (Plurinational State of)
  BO,

  @ description - Bonaire, Sint Eustatius and Saba
  BQ,

  @ description - Brazil
  BR,

  @ description - Bahamas (the)
  BS,

  @ description - Bhutan
  BT,

  @ description - Bouvet Island
  BV,

  @ description - Botswana
  BW,

  @ description - Belarus
  BY,

  @ description - Belize
  BZ,

  @ description - Canada
  CA,

  @ description - Cocos (Keeling) Islands (the)
  CC,

  @ description - Congo (the Democratic Republic of the)
  CD,

  @ description - Central African Republic (the)
  CF,

  @ description - Congo (the)
  CG,

  @ description - Switzerland
  CH,

  @ description - Côte d'Ivoire
  CI,

  @ description - Cook Islands (the)
  CK,

  @ description - Chile
  CL,

  @ description - Cameroon
  CM,

  @ description - China
  CN,

  @ description - Colombia
  CO,

  @ description - Costa Rica
  CR,

  @ description - Cuba
  CU,

  @ description - Cabo Verde
  CV,

  @ description - Curaçao
  CW,

  @ description - Christmas Island
  CX,

  @ description - Cyprus
  CY,

  @ description - Czechia
  CZ,

  @ description - Germany
  DE,

  @ description - Djibouti
  DJ,

  @ description - Denmark
  DK,

  @ description - Dominica
  DM,

  @ description - Dominican Republic (the)
  DO,

  @ description - Algeria
  DZ,

  @ description - Ecuador
  EC,

  @ description - Estonia
  EE,

  @ description - Egypt
  EG,

  @ description - Western Sahara
  EH,

  @ description - Eritrea
  ER,

  @ description - Spain
  ES,

  @ description - Ethiopia
  ET,

  @ description - Finland
  FI,

  @ description - Fiji
  FJ,

  @ description - Falkland Islands (the) [Malvinas]
  FK,

  @ description - Micronesia (Federated States of)
  FM,

  @ description - Faroe Islands (the)
  FO,

  @ description - France
  FR,

  @ description - Gabon
  GA,

  @ description - United Kingdom of Great Britain and Northern Ireland (the)
  GB,

  @ description - Grenada
  GD,

  @ description - Georgia
  GE,

  @ description - French Guiana
  GF,

  @ description - Guernsey
  GG,

  @ description - Ghana
  GH,

  @ description - Gibraltar
  GI,

  @ description - Greenland
  GL,

  @ description - Gambia (the)
  GM,

  @ description - Guinea
  GN,

  @ description - Guadeloupe
  GP,

  @ description - Equatorial Guinea
  GQ,

  @ description - Greece
  GR,

  @ description - South Georgia and the South Sandwich Islands
  GS,

  @ description - Guatemala
  GT,

  @ description - Guam
  GU,

  @ description - Guinea-Bissau
  GW,

  @ description - Guyana
  GY,

  @ description - Hong Kong
  HK,

  @ description - Heard Island and McDonald Islands
  HM,

  @ description - Honduras
  HN,

  @ description - Croatia
  HR,

  @ description - Haiti
  HT,

  @ description - Hungary
  HU,

  @ description - Indonesia
  ID,

  @ description - Ireland
  IE,

  @ description - Israel
  IL,

  @ description - Isle of Man
  IM,

  @ description - India
  IN,

  @ description - British Indian Ocean Territory (the)
  IO,

  @ description - Iraq
  IQ,

  @ description - Iran (Islamic Republic of)
  IR,

  @ description - Iceland
  IS,

  @ description - Italy
  IT,

  @ description - Jersey
  JE,

  @ description - Jamaica
  JM,

  @ description - Jordan
  JO,

  @ description - Japan
  JP,

  @ description - Kenya
  KE,

  @ description - Kyrgyzstan
  KG,

  @ description - Cambodia
  KH,

  @ description - Kiribati
  KI,

  @ description - Comoros (the)
  KM,

  @ description - Saint Kitts and Nevis
  KN,

  @ description - Korea (the Democratic People's Republic of)
  KP,

  @ description - Korea (the Republic of)
  KR,

  @ description - Kuwait
  KW,

  @ description - Cayman Islands (the)
  KY,

  @ description - Kazakhstan
  KZ,

  @ description - Lao People's Democratic Republic (the)
  LA,

  @ description - Lebanon
  LB,

  @ description - Saint Lucia
  LC,

  @ description - Liechtenstein
  LI,

  @ description - Sri Lanka
  LK,

  @ description - Liberia
  LR,

  @ description - Lesotho
  LS,

  @ description - Lithuania
  LT,

  @ description - Luxembourg
  LU,

  @ description - Latvia
  LV,

  @ description - Libya
  LY,

  @ description - Morocco
  MA,

  @ description - Monaco
  MC,

  @ description - Moldova (the Republic of)
  MD,

  @ description - Montenegro
  ME,

  @ description - Saint Martin (French part)
  MF,

  @ description - Madagascar
  MG,

  @ description - Marshall Islands (the)
  MH,

  @ description - North Macedonia
  MK,

  @ description - Mali
  ML,

  @ description - Myanmar
  MM,

  @ description - Mongolia
  MN,

  @ description - Macao
  MO,

  @ description - Northern Mariana Islands (the)
  MP,

  @ description - Martinique
  MQ,

  @ description - Mauritania
  MR,

  @ description - Montserrat
  MS,

  @ description - Malta
  MT,

  @ description - Mauritius
  MU,

  @ description - Maldives
  MV,

  @ description - Malawi
  MW,

  @ description - Mexico
  MX,

  @ description - Malaysia
  MY,

  @ description - Mozambique
  MZ,

  @ description - Namibia
  NA,

  @ description - New Caledonia
  NC,

  @ description - Niger (the)
  NE,

  @ description - Norfolk Island
  NF,

  @ description - Nigeria
  NG,

  @ description - Nicaragua
  NI,

  @ description - Netherlands (Kingdom of the)
  NL,

  @ description - Norway
  NO,

  @ description - Nepal
  NP,

  @ description - Nauru
  NR,

  @ description - Niue
  NU,

  @ description - New Zealand
  NZ,

  @ description - Oman
  OM,

  @ description - Panama
  PA,

  @ description - Peru
  PE,

  @ description - French Polynesia
  PF,

  @ description - Papua New Guinea
  PG,

  @ description - Philippines (the)
  PH,

  @ description - Pakistan
  PK,

  @ description - Poland
  PL,

  @ description - Saint Pierre and Miquelon
  PM,

  @ description - Pitcairn
  PN,

  @ description - Puerto Rico
  PR,

  @ description - Palestine, State of
  PS,

  @ description - Portugal
  PT,

  @ description - Palau
  PW,

  @ description - Paraguay
  PY,

  @ description - Qatar
  QA,

  @ description - Réunion
  RE,

  @ description - Romania
  RO,

  @ description - Serbia
  RS,

  @ description - Russian Federation (the)
  RU,

  @ description - Rwanda
  RW,

  @ description - Saudi Arabia
  SA,

  @ description - Solomon Islands
  SB,

  @ description - Seychelles
  SC,

  @ description - Sudan (the)
  SD,

  @ description - Sweden
  SE,

  @ description - Singapore
  SG,

  @ description - Saint Helena, Ascension and Tristan da Cunha
  SH,

  @ description - Slovenia
  SI,

  @ description - Svalbard and Jan Mayen
  SJ,

  @ description - Slovakia
  SK,

  @ description - Sierra Leone
  SL,

  @ description - San Marino
  SM,

  @ description - Senegal
  SN,

  @ description - Somalia
  SO,

  @ description - Suriname
  SR,

  @ description - South Sudan
  SS,

  @ description - Sao Tome and Principe
  ST,

  @ description - El Salvador
  SV,

  @ description - Sint Maarten (Dutch part)
  SX,

  @ description - Syrian Arab Republic (the)
  SY,

  @ description - Eswatini
  SZ,

  @ description - Turks and Caicos Islands (the)
  TC,

  @ description - Chad
  TD,

  @ description - French Southern Territories (the)
  TF,

  @ description - Togo
  TG,

  @ description - Thailand
  TH,

  @ description - Tajikistan
  TJ,

  @ description - Tokelau
  TK,

  @ description - Timor-Leste
  TL,

  @ description - Turkmenistan
  TM,

  @ description - Tunisia
  TN,

  @ description - Tonga
  TO,

  @ description - Türkiye
  TR,

  @ description - Trinidad and Tobago
  TT,

  @ description - Tuvalu
  TV,

  @ description - Taiwan (Province of China)
  TW,

  @ description - Tanzania, the United Republic of
  TZ,

  @ description - Ukraine
  UA,

  @ description - Uganda
  UG,

  @ description - United States Minor Outlying Islands (the)
  UM,

  @ description - United States of America (the)
  US,

  @ description - Uruguay
  UY,

  @ description - Uzbekistan
  UZ,

  @ description - Holy See (the)
  VA,

  @ description - Saint Vincent and the Grenadines
  VC,

  @ description - Venezuela (Bolivarian Republic of)
  VE,

  @ description - Virgin Islands (British)
  VG,

  @ description - Virgin Islands (U.S.)
  VI,

  @ description - Viet Nam
  VN,

  @ description - Vanuatu
  VU,

  @ description - Wallis and Futuna
  WF,

  @ description - Samoa
  WS,

  @ description - Yemen
  YE,

  @ description - Mayotte
  YT,

  @ description - South Africa
  ZA,

  @ description - Zambia
  ZM,

  @ description - Zimbabwe
  ZW,
}

@ description - 파일 업로드 URL 생성 요청 정보
struct CreateB2bFileUploadUrlBody {
  @ description - 파일 이름
  fileName: string,
}

@ description - CreateB2bFileUploadUrlError
@ discriminator - type
oneof CreateB2bFileUploadUrlError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파일 업로드 URL 생성 성공 응답
struct CreateB2bFileUploadUrlPayload {
  @ description - 파일 아이디
  fileId: string,

  @ description - 파일 업로드 URL
  url: string,
}

struct CreateManualTransferResponse {
  transfer: PlatformManualTransfer,
}

struct CreateOrderCancelTransferResponse {
  transfer: PlatformOrderCancelTransfer,
}

struct CreateOrderTransferResponse {
  transfer: PlatformOrderTransfer,
}

@ description - CreatePaymentReconciliationChannelError
@ discriminator - type
oneof CreatePaymentReconciliationChannelError {
  @ mapping - DUPLICATE_CHANNEL_NAME
  ChannelDuplicateNameError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - NOT_ALLOWED_PG_MERCHANT_ID
  NotAllowedPgMerchantIdError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct CreatePaymentReconciliationChannelResponse {
  channel: PaymentReconciliationChannel,
}

@ description - 결제 예약 요청 입력 정보
struct CreatePaymentScheduleBody {
  @ description - 빌링키 결제 입력 정보
  payment: BillingKeyPaymentInput,

  @ description - 결제 예정 시점
  timeToPay: datetime,
}

@ description - CreatePaymentScheduleError
@ discriminator - type
oneof CreatePaymentScheduleError {
  @ mapping - ALREADY_PAID_OR_WAITING
  AlreadyPaidOrWaitingError,

  @ mapping - BILLING_KEY_ALREADY_DELETED
  BillingKeyAlreadyDeletedError,

  @ mapping - BILLING_KEY_NOT_FOUND
  BillingKeyNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_SCHEDULE_ALREADY_EXISTS
  PaymentScheduleAlreadyExistsError,

  @ mapping - SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT
  SumOfPartsExceedsTotalAmountError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제 예약 성공 응답
struct CreatePaymentScheduleResponse {
  @ description - 결제 예약 건
  schedule: PaymentScheduleSummary,
}

@ description - 추가 수수료 정책 생성을 위한 입력 정보
struct CreatePlatformAdditionalFeePolicyBody {
  @ description - 생성할 추가 수수료 정책 아이디
  id?: string,

  @ description - 이름
  name: string,

  @ description - 수수료 정보
  fee: PlatformFeeInput,

  @ description - 메모
  memo?: string,

  @ description - 부가세 부담 주체
  vatPayer: PlatformPayer,
}

@ description - CreatePlatformAdditionalFeePolicyError
@ discriminator - type
oneof CreatePlatformAdditionalFeePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_ALREADY_EXISTS
  PlatformAdditionalFeePolicyAlreadyExistsError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 플랫폼 생성 성공 응답 정보
struct CreatePlatformAdditionalFeePolicyResponse {
  @ description - 생성된 추가 수수료 정책
  additionalFeePolicy: PlatformAdditionalFeePolicy,
}

@ description - 계약 객체 생성을 위한 입력 정보
struct CreatePlatformContractBody {
  @ description - 계약에 부여할 고유 아이디
  id?: string,

  @ description - 계약 이름
  name: string,

  @ description - 계약 내부 표기를 위한 메모
  memo?: string,

  @ description - 중개수수료
  platformFee: PlatformFeeInput,

  @ description - 정산 주기
  settlementCycle: PlatformSettlementCycleInput,

  @ description - 중개수수료에 대한 부가세 부담 주체
  platformFeeVatPayer: PlatformPayer,

  @ description - 정산 시 결제금액 부가세 감액 여부
  subtractPaymentVatAmount: boolean,
}

@ description - CreatePlatformContractError
@ discriminator - type
oneof CreatePlatformContractError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CONTRACT_ALREADY_EXISTS
  PlatformContractAlreadyExistsError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 계약 객체 생성 성공 응답
struct CreatePlatformContractResponse {
  @ description - 생성된 계약 객체
  contract: PlatformContract,
}

@ description - 할인 분담 정책 생성을 위한 입력 정보
struct CreatePlatformDiscountSharePolicyBody {
  @ description - 할인 분담에 부여할 고유 아이디
  id?: string,

  @ description - 할인 분담에 부여할 이름
  name: string,

  @ description - 파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다.
  partnerShareRate: int32,

  @ description - 해당 할인 분담에 대한 메모 ex) 파트너 브랜드 쿠폰
  memo?: string,
}

@ description - CreatePlatformDiscountSharePolicyError
@ discriminator - type
oneof CreatePlatformDiscountSharePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_ALREADY_EXISTS
  PlatformDiscountSharePolicyAlreadyExistsError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 할인 분담 정책 생성 성공 응답
struct CreatePlatformDiscountSharePolicyResponse {
  @ description - 생성된 할인 분담 정책
  discountSharePolicy: PlatformDiscountSharePolicy,
}

@ description - 수기 정산건 생성을 위한 입력 정보
struct CreatePlatformManualTransferBody {
  @ description - 파트너 아이디
  partnerId: string,

  @ description - 메모
  memo?: string,

  @ description - 정산 금액
  settlementAmount: int64,

  @ description - 정산 면세 금액
  settlementTaxFreeAmount?: int64,

  @ description - 정산 일
  settlementDate: date,

  @ description - 테스트 모드 여부
  isForTest?: boolean,

  @ description - 사용자 정의 속성
  userDefinedProperties?: PlatformUserDefinedPropertyKeyValue[],
}

@ description - CreatePlatformManualTransferError
@ discriminator - type
oneof CreatePlatformManualTransferError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND
  PlatformUserDefinedPropertyNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description
| 하나의 payment에 하나의 정산 건만 존재하는 경우에는 (partnerId, paymentId)로 취소 정산을 등록하실 수 있습니다.
| 하나의 payment에 여러 개의 정산 건이 존재하는 경우에는 transferId를 필수로 입력해야 합니다.
| transferId를 입력한 경우 (partnerId, paymentId)는 생략 가능합니다.
struct CreatePlatformOrderCancelTransferBody {
  @ description - 파트너 아이디
  partnerId?: string,

  @ description - 결제 아이디
  paymentId?: string,

  @ description - 정산건 아이디
  transferId?: string,

  @ description - 취소 내역 아이디
  cancellationId: string,

  @ description - 메모
  memo?: string,

  @ description - 주문 취소 정보
  orderDetail?: CreatePlatformOrderCancelTransferBodyOrderDetail,

  @ description - 주문 취소 면세 금액
  taxFreeAmount?: int64,

  @ description - 할인 정보
  discounts: CreatePlatformOrderCancelTransferBodyDiscount[],

  @ description - 정산 시작일
  settlementStartDate?: date,

  @ description - 외부 결제 상세 정보
  externalCancellationDetail?: CreatePlatformOrderCancelTransferBodyExternalCancellationDetail,

  @ description - 테스트 모드 여부
  isForTest?: boolean,

  @ description - 사용자 정의 속성
  userDefinedProperties?: PlatformUserDefinedPropertyKeyValue[],
}

@ description - 할인 정보
struct CreatePlatformOrderCancelTransferBodyDiscount {
  @ description - 할인 분담 정책 아이디
  sharePolicyId: string,

  @ description - 할인 금액
  amount: int64,

  @ description - 면세 할인 금액
  taxFreeAmount?: int64,
}

@ description - 외부 결제 상세 정보
struct CreatePlatformOrderCancelTransferBodyExternalCancellationDetail {
  @ description - 취소 일시
  cancelledAt?: datetime,
}

@ description - orderAmount, orderLines, all 중에서 하나만 입력하여야 합니다.
struct CreatePlatformOrderCancelTransferBodyOrderDetail {
  @ description - 주문 취소 금액
  orderAmount?: int64,

  @ description - 주문 취소 항목 리스트
  orderLines?: CreatePlatformOrderCancelTransferBodyOrderLine[],

  @ description - 전체 금액 취소
  all?: CreatePlatformOrderCancelTransferBodyOrderDetailAll,
}

@ description - 전체 금액 취소
struct CreatePlatformOrderCancelTransferBodyOrderDetailAll {}

@ description - 주문 취소 항목 리스트
struct CreatePlatformOrderCancelTransferBodyOrderLine {
  @ description - 상품 아이디
  productId: string,

  @ description - 상품 수량
  quantity: int32,

  @ description - 상품 할인 정보
  discounts: CreatePlatformOrderCancelTransferBodyDiscount[],
}

@ description - CreatePlatformOrderCancelTransferError
@ discriminator - type
oneof CreatePlatformOrderCancelTransferError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CANCELLABLE_AMOUNT_EXCEEDED
  PlatformCancellableAmountExceededError,

  @ mapping - PLATFORM_CANCELLABLE_DISCOUNT_AMOUNT_EXCEEDED
  PlatformCancellableDiscountAmountExceededError,

  @ mapping - PLATFORM_CANCELLABLE_DISCOUNT_TAX_FREE_AMOUNT_EXCEEDED
  PlatformCancellableDiscountTaxFreeAmountExceededError,

  @ mapping - PLATFORM_CANCELLABLE_PRODUCT_QUANTITY_EXCEEDED
  PlatformCancellableProductQuantityExceededError,

  @ mapping - PLATFORM_CANCELLATION_AND_PAYMENT_TYPE_MISMATCHED
  PlatformCancellationAndPaymentTypeMismatchedError,

  @ mapping - PLATFORM_CANCELLATION_NOT_FOUND
  PlatformCancellationNotFoundError,

  @ mapping - PLATFORM_CANNOT_SPECIFY_TRANSFER
  PlatformCannotSpecifyTransferError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_ID_DUPLICATED
  PlatformDiscountSharePolicyIdDuplicatedError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_ORDER_DETAIL_MISMATCHED
  PlatformOrderDetailMismatchedError,

  @ mapping - PLATFORM_ORDER_TRANSFER_ALREADY_CANCELLED
  PlatformOrderTransferAlreadyCancelledError,

  @ mapping - PLATFORM_PAYMENT_NOT_FOUND
  PlatformPaymentNotFoundError,

  @ mapping - PLATFORM_PRODUCT_ID_DUPLICATED
  PlatformProductIdDuplicatedError,

  @ mapping - PLATFORM_PRODUCT_ID_NOT_FOUND
  PlatformProductIdNotFoundError,

  @ mapping - PLATFORM_SETTLEMENT_AMOUNT_EXCEEDED
  PlatformSettlementAmountExceededError,

  @ mapping - PLATFORM_SETTLEMENT_CANCEL_AMOUNT_EXCEEDED_PORT_ONE_CANCEL
  PlatformSettlementCancelAmountExceededPortOneCancelError,

  @ mapping - PLATFORM_TRANSFER_ALREADY_EXISTS
  PlatformTransferAlreadyExistsError,

  @ mapping - PLATFORM_TRANSFER_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformTransferDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_TRANSFER_NOT_FOUND
  PlatformTransferNotFoundError,

  @ mapping - PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND
  PlatformUserDefinedPropertyNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 주문 정산건 생성을 위한 입력 정보
struct CreatePlatformOrderTransferBody {
  @ description - 파트너 아이디
  partnerId: string,

  @ description - 계약 아이디
  contractId?: string,

  @ description - 메모
  memo?: string,

  @ description - 결제 아이디
  paymentId: string,

  @ description - 주문 정보
  orderDetail: CreatePlatformOrderTransferBodyOrderDetail,

  @ description - 주문 면세 금액
  taxFreeAmount?: int64,

  @ description - 정산 시작일
  settlementStartDate?: date,

  @ description - 할인 정보
  discounts: CreatePlatformOrderTransferBodyDiscount[],

  @ description - 추가 수수료 정보
  additionalFees: CreatePlatformOrderTransferBodyAdditionalFee[],

  @ description - 외부 결제 상세 정보
  externalPaymentDetail?: CreatePlatformOrderTransferBodyExternalPaymentDetail,

  @ description - 테스트 모드 여부
  isForTest?: boolean,

  @ description - 정산 파라미터 (실험기능)
  parameters?: TransferParameters,

  @ description - 사용자 정의 속성
  userDefinedProperties?: PlatformUserDefinedPropertyKeyValue[],
}

@ description - 추가 수수료 정보
struct CreatePlatformOrderTransferBodyAdditionalFee {
  @ description - 추가 수수료 정책 아이디
  policyId: string,
}

@ description - 할인 정보
struct CreatePlatformOrderTransferBodyDiscount {
  @ description - 할인 분담 정책 아이디
  sharePolicyId: string,

  @ description - 할인 금액
  amount: int64,

  @ description - 면세 할인 금액
  taxFreeAmount?: int64,
}

@ description - 외부 결제 상세 정보
struct CreatePlatformOrderTransferBodyExternalPaymentDetail {
  @ description - 통화
  currency: Currency,

  @ description - 주문 명
  orderName?: string,

  @ description - 결제 일시
  paidAt?: datetime,

  @ description - 결제 수단
  method?: PlatformPaymentMethodInput,
}

@ description - 주문 금액 또는 주문 항목 하나만 입력 가능합니다.
struct CreatePlatformOrderTransferBodyOrderDetail {
  @ description - 주문 금액
  orderAmount?: int64,

  @ description - 주문 항목 리스트
  orderLines?: CreatePlatformOrderTransferBodyOrderLine[],
}

@ description - 주문 항목
struct CreatePlatformOrderTransferBodyOrderLine {
  @ description - 상품
  product: CreatePlatformOrderTransferBodyProduct,

  @ description - 상품 수량
  quantity: int32,

  @ description - 상품 할인 정보
  discounts: CreatePlatformOrderTransferBodyDiscount[],

  @ description - 상품 추가 수수료 정보
  additionalFees: CreatePlatformOrderTransferBodyAdditionalFee[],
}

@ description - 상품
struct CreatePlatformOrderTransferBodyProduct {
  @ description - 상품 아이디
  id: string,

  @ description - 상품 이름
  name: string,

  @ description - 상품 금액
  amount: int64,

  @ description - 상품 면세 금액
  taxFreeAmount?: int64,

  @ description - 태그
  tag?: string,
}

@ description - CreatePlatformOrderTransferError
@ discriminator - type
oneof CreatePlatformOrderTransferError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICIES_NOT_FOUND
  PlatformAdditionalFeePoliciesNotFoundError,

  @ mapping - PLATFORM_ADDITIONAL_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED
  PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_CONTRACT_PLATFORM_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED
  PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError,

  @ mapping - PLATFORM_CURRENCY_NOT_SUPPORTED
  PlatformCurrencyNotSupportedError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICIES_NOT_FOUND
  PlatformDiscountSharePoliciesNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - PLATFORM_PAYMENT_NOT_FOUND
  PlatformPaymentNotFoundError,

  @ mapping - PLATFORM_PRODUCT_ID_DUPLICATED
  PlatformProductIdDuplicatedError,

  @ mapping - PLATFORM_SETTLEMENT_AMOUNT_EXCEEDED
  PlatformSettlementAmountExceededError,

  @ mapping - PLATFORM_SETTLEMENT_PARAMETER_NOT_FOUND
  PlatformSettlementParameterNotFoundError,

  @ mapping - PLATFORM_SETTLEMENT_PAYMENT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT
  PlatformSettlementPaymentAmountExceededPortOnePaymentError,

  @ mapping - PLATFORM_SETTLEMENT_SUPPLY_WITH_VAT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT
  PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError,

  @ mapping - PLATFORM_SETTLEMENT_TAX_FREE_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT
  PlatformSettlementTaxFreeAmountExceededPortOnePaymentError,

  @ mapping - PLATFORM_TRANSFER_ALREADY_EXISTS
  PlatformTransferAlreadyExistsError,

  @ mapping - PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND
  PlatformUserDefinedPropertyNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 생성을 위한 입력 정보
struct CreatePlatformPartnerBody {
  @ description - 파트너에 부여할 고유 아이디
  id?: string,

  @ description - 파트너 법인명 혹은 이름
  name: string,

  @ description - 파트너 담당자 연락 정보
  contact: CreatePlatformPartnerBodyContact,

  @ description - 정산 계좌
  account: CreatePlatformPartnerBodyAccount,

  @ description - 기본 계약 아이디
  defaultContractId: string,

  @ description - 파트너에 대한 메모
  memo?: string,

  @ description - 파트너에 부여할 태그 리스트
  tags: string[],

  @ description - 파트너 유형별 추가 정보
  type: CreatePlatformPartnerBodyType,

  @ description - 사용자 정의 속성
  userDefinedProperties?: PlatformProperties,
}

@ description - 파트너 계좌 등록을 위한 정보
struct CreatePlatformPartnerBodyAccount {
  @ description - 은행
  bank: Bank,

  @ description - 정산에 사용할 통화
  currency: Currency,

  @ description - 계좌번호
  number: string,

  @ description - 예금주명
  holder: string,

  @ description - 계좌 검증 아이디
  accountVerificationId?: string,
}

@ description - 파트너 담당자 정보
struct CreatePlatformPartnerBodyContact {
  @ description - 담당자 이름
  name: string,

  @ description - 담당자 휴대폰 번호
  phoneNumber?: string,

  @ description - 담당자 이메일
  email: string,
}

@ description - 파트너 생성을 위한 유형별 추가 정보
struct CreatePlatformPartnerBodyType {
  @ description - 사업자 추가 정보
  business?: CreatePlatformPartnerBodyTypeBusiness,

  @ description - 원천징수 대상자 추가 정보
  whtPayer?: CreatePlatformPartnerBodyTypeWhtPayer,

  @ description - 원천징수 비대상자 추가 정보
  nonWhtPayer?: CreatePlatformPartnerBodyTypeNonWhtPayer,
}

struct CreatePlatformPartnerBodyTypeBusiness {
  @ description - 상호명
  companyName: string,

  @ description - 사업자 유형
  taxationType?: PlatformPartnerTaxationType,

  @ description - 사업자등록번호
  businessRegistrationNumber: string,

  @ description - 대표자 이름
  representativeName: string,

  @ description - 사업장 주소
  companyAddress?: string,

  @ description - 업태
  businessType?: string,

  @ description - 업종
  businessClass?: string,

  @ description - 사업자 조회 검증 아이디
  companyVerificationId?: string,
}

struct CreatePlatformPartnerBodyTypeNonWhtPayer {
  @ description - 생년월일
  birthdate?: date,
}

struct CreatePlatformPartnerBodyTypeWhtPayer {
  @ description - 생년월일
  birthdate?: date,
}

@ description - CreatePlatformPartnerError
@ discriminator - type
oneof CreatePlatformPartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED
  PlatformAccountVerificationAlreadyUsedError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_FAILED
  PlatformAccountVerificationFailedError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND
  PlatformAccountVerificationNotFoundError,

  @ mapping - PLATFORM_COMPANY_VERIFICATION_ALREADY_USED
  PlatformCompanyVerificationAlreadyUsedError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_CURRENCY_NOT_SUPPORTED
  PlatformCurrencyNotSupportedError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_ID_ALREADY_EXISTS
  PlatformPartnerIdAlreadyExistsError,

  @ mapping - PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND
  PlatformUserDefinedPropertyNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 생성 성공 응답
struct CreatePlatformPartnerResponse {
  @ description - 생성된 파트너
  partner: PlatformPartner,
}

@ description - 파트너 다건 생성을 위한 입력 정보
struct CreatePlatformPartnersBody {
  @ description - 생성할 파트너 리스트 정보
  partners: CreatePlatformPartnerBody[],
}

@ description - CreatePlatformPartnersError
@ discriminator - type
oneof CreatePlatformPartnersError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CONTRACTS_NOT_FOUND
  PlatformContractsNotFoundError,

  @ mapping - PLATFORM_CURRENCY_NOT_SUPPORTED
  PlatformCurrencyNotSupportedError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_IDS_ALREADY_EXISTS
  PlatformPartnerIdsAlreadyExistError,

  @ mapping - PLATFORM_PARTNER_IDS_DUPLICATED
  PlatformPartnerIdsDuplicatedError,

  @ mapping - PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND
  PlatformUserDefinedPropertyNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 다건 생성 성공 응답
struct CreatePlatformPartnersResponse {
  @ description - 생성된 파트너 리스트
  partners: PlatformPartner[],
}

@ description - 통화 단위
enum Currency {
  @ description - 대한민국 원화
  KRW,

  @ description - 미국 달러
  USD,

  @ description - 일본 엔화
  JPY,

  @ description - UAE Dirham
  AED,

  @ description - Afghani
  AFN,

  @ description - Lek
  ALL,

  @ description - Armenian Dram
  AMD,

  @ description - Netherlands Antillean Guilder
  ANG,

  @ description - Kwanza
  AOA,

  @ description - Argentine Peso
  ARS,

  @ description - Australian Dollar
  AUD,

  @ description - Aruban Florin
  AWG,

  @ description - Azerbaijan Manat
  AZN,

  @ description - Convertible Mark
  BAM,

  @ description - Barbados Dollar
  BBD,

  @ description - Taka
  BDT,

  @ description - Bulgarian Lev
  BGN,

  @ description - Bahraini Dinar
  BHD,

  @ description - Burundi Franc
  BIF,

  @ description - Bermudian Dollar
  BMD,

  @ description - Brunei Dollar
  BND,

  @ description - Boliviano
  BOB,

  @ description - Mvdol
  BOV,

  @ description - Brazilian Real
  BRL,

  @ description - Bahamian Dollar
  BSD,

  @ description - Ngultrum
  BTN,

  @ description - Pula
  BWP,

  @ description - Belarusian Ruble
  BYN,

  @ description - Belize Dollar
  BZD,

  @ description - Canadian Dollar
  CAD,

  @ description - Congolese Franc
  CDF,

  @ description - WIR Euro
  CHE,

  @ description - Swiss Franc
  CHF,

  @ description - WIR Franc
  CHW,

  @ description - Unidad de Fomento
  CLF,

  @ description - Chilean Peso
  CLP,

  @ description - Yuan Renminbi
  CNY,

  @ description - Colombian Peso
  COP,

  @ description - Unidad de Valor Real
  COU,

  @ description - Costa Rican Colon
  CRC,

  @ description - Peso Convertible
  CUC,

  @ description - Cuban Peso
  CUP,

  @ description - Cabo Verde Escudo
  CVE,

  @ description - Czech Koruna
  CZK,

  @ description - Djibouti Franc
  DJF,

  @ description - Danish Krone
  DKK,

  @ description - Dominican Peso
  DOP,

  @ description - Algerian Dinar
  DZD,

  @ description - Egyptian Pound
  EGP,

  @ description - Nakfa
  ERN,

  @ description - Ethiopian Birr
  ETB,

  @ description - Euro
  EUR,

  @ description - Fiji Dollar
  FJD,

  @ description - Falkland Islands Pound
  FKP,

  @ description - Pound Sterling
  GBP,

  @ description - Lari
  GEL,

  @ description - Ghana Cedi
  GHS,

  @ description - Gibraltar Pound
  GIP,

  @ description - Dalasi
  GMD,

  @ description - Guinean Franc
  GNF,

  @ description - Quetzal
  GTQ,

  @ description - Guyana Dollar
  GYD,

  @ description - Hong Kong Dollar
  HKD,

  @ description - Lempira
  HNL,

  @ description - Kuna (Replaced by EUR)
  HRK,

  @ description - Gourde
  HTG,

  @ description - Forint
  HUF,

  @ description - Rupiah
  IDR,

  @ description - New Israeli Sheqel
  ILS,

  @ description - Indian Rupee
  INR,

  @ description - Iraqi Dinar
  IQD,

  @ description - Iranian Rial
  IRR,

  @ description - Iceland Krona
  ISK,

  @ description - Jamaican Dollar
  JMD,

  @ description - Jordanian Dinar
  JOD,

  @ description - Kenyan Shilling
  KES,

  @ description - Som
  KGS,

  @ description - Riel
  KHR,

  @ description - Comorian Franc 
  KMF,

  @ description - North Korean Won
  KPW,

  @ description - Kuwaiti Dinar
  KWD,

  @ description - Cayman Islands Dollar
  KYD,

  @ description - Tenge
  KZT,

  @ description - Lao Kip
  LAK,

  @ description - Lebanese Pound
  LBP,

  @ description - Sri Lanka Rupee
  LKR,

  @ description - Liberian Dollar
  LRD,

  @ description - Loti
  LSL,

  @ description - Libyan Dinar
  LYD,

  @ description - Moroccan Dirham
  MAD,

  @ description - Moldovan Leu
  MDL,

  @ description - Malagasy Ariary
  MGA,

  @ description - Denar
  MKD,

  @ description - Kyat
  MMK,

  @ description - Tugrik
  MNT,

  @ description - Pataca
  MOP,

  @ description - Ouguiya
  MRU,

  @ description - Mauritius Rupee
  MUR,

  @ description - Rufiyaa
  MVR,

  @ description - Malawi Kwacha
  MWK,

  @ description - Mexican Peso
  MXN,

  @ description - Mexican Unidad de Inversion (UDI)
  MXV,

  @ description - Malaysian Ringgit
  MYR,

  @ description - Mozambique Metical
  MZN,

  @ description - Namibia Dollar
  NAD,

  @ description - Naira
  NGN,

  @ description - Cordoba Oro
  NIO,

  @ description - Norwegian Krone
  NOK,

  @ description - Nepalese Rupee
  NPR,

  @ description - New Zealand Dollar
  NZD,

  @ description - Rial Omani
  OMR,

  @ description - Balboa
  PAB,

  @ description - Sol
  PEN,

  @ description - Kina
  PGK,

  @ description - Philippine Peso
  PHP,

  @ description - Pakistan Rupee
  PKR,

  @ description - Zloty
  PLN,

  @ description - Guarani
  PYG,

  @ description - Qatari Rial
  QAR,

  @ description - Romanian Leu
  RON,

  @ description - Serbian Dinar
  RSD,

  @ description - Russian Ruble
  RUB,

  @ description - Rwanda Franc
  RWF,

  @ description - Saudi Riyal
  SAR,

  @ description - Solomon Islands Dollar
  SBD,

  @ description - Seychelles Rupee
  SCR,

  @ description - Sudanese Pound
  SDG,

  @ description - Swedish Krona
  SEK,

  @ description - Singapore Dollar
  SGD,

  @ description - Saint Helena Pound
  SHP,

  @ description - Leone
  SLE,

  @ description - Leone
  SLL,

  @ description - Somali Shilling
  SOS,

  @ description - Surinam Dollar
  SRD,

  @ description - South Sudanese Pound
  SSP,

  @ description - Dobra
  STN,

  @ description - El Salvador Colon
  SVC,

  @ description - Syrian Pound
  SYP,

  @ description - Lilangeni
  SZL,

  @ description - Baht
  THB,

  @ description - Somoni
  TJS,

  @ description - Turkmenistan New Manat
  TMT,

  @ description - Tunisian Dinar
  TND,

  @ description - Pa’anga
  TOP,

  @ description - Turkish Lira
  TRY,

  @ description - Trinidad and Tobago Dollar
  TTD,

  @ description - New Taiwan Dollar
  TWD,

  @ description - Tanzanian Shilling
  TZS,

  @ description - Hryvnia
  UAH,

  @ description - Uganda Shilling
  UGX,

  @ description - US Dollar (Next day)
  USN,

  @ description - Uruguay Peso en Unidades Indexadas (UI)
  UYI,

  @ description - Peso Uruguayo
  UYU,

  @ description - Unidad Previsional
  UYW,

  @ description - Uzbekistan Sum
  UZS,

  @ description - Bolívar Soberano
  VED,

  @ description - Bolívar Soberano
  VES,

  @ description - Dong
  VND,

  @ description - Vatu
  VUV,

  @ description - Tala
  WST,

  @ description - CFA Franc BEAC
  XAF,

  @ description - Silver
  XAG,

  @ description - Gold
  XAU,

  @ description - Bond Markets Unit European Composite Unit (EURCO)
  XBA,

  @ description - Bond Markets Unit European Monetary Unit (E.M.U.-6)
  XBB,

  @ description - Bond Markets Unit European Unit of Account 9 (E.U.A.-9)
  XBC,

  @ description - Bond Markets Unit European Unit of Account 17 (E.U.A.-17)
  XBD,

  @ description - East Caribbean Dollar
  XCD,

  @ description - SDR (Special Drawing Right)
  XDR,

  @ description - CFA Franc BCEAO
  XOF,

  @ description - Palladium
  XPD,

  @ description - CFP Franc
  XPF,

  @ description - Platinum
  XPT,

  @ description - Sucre
  XSU,

  @ description - Codes specifically reserved for testing purposes
  XTS,

  @ description - ADB Unit of Account
  XUA,

  @ description - The codes assigned for transactions where no currency is involved
  XXX,

  @ description - Yemeni Rial
  YER,

  @ description - Rand
  ZAR,

  @ description - Zambian Kwacha
  ZMW,

  @ description - Zimbabwe Dollar
  ZWL,
}

@ description - 커서 기반 페이지 정보
struct CursorPageInfo {
  startCursor: string,
  endCursor: string,
  hasPreviousPage: boolean,
  hasNextPage: boolean,
}

@ description - 고객 정보
struct Customer {
  @ description - 고객 아이디
  id?: string,

  @ description - 이름
  name?: string,

  @ description - 출생 연도
  birthYear?: string,

  @ description - 성별
  gender?: Gender,

  @ description - 이메일
  email?: string,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 주소
  address?: Address,

  @ description - 우편번호
  zipcode?: string,
}

@ description - 고객 정보 입력 정보
struct CustomerInput {
  @ description - 고객 아이디
  id?: string,

  @ description - 이름
  name?: CustomerNameInput,

  @ description - 출생 연도
  birthYear?: string,

  @ description - 출생월
  birthMonth?: string,

  @ description - 출생일
  birthDay?: string,

  @ description - 국가
  country?: Country,

  @ description - 성별
  gender?: Gender,

  @ description - 이메일
  email?: string,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 주소
  address?: SeparatedAddressInput,

  @ description - 우편번호
  zipcode?: string,

  @ description - 사업자 등록 번호
  businessRegistrationNumber?: string,
}

@ description - 두 개의 이름 형식 중 한 가지만 선택하여 입력해주세요.
struct CustomerNameInput {
  @ description - 한 줄 이름 형식
  full?: string,

  @ description - 분리형 이름 형식
  separated?: CustomerSeparatedName,
}

@ description - 고객 분리형 이름
struct CustomerSeparatedName {
  @ description - 이름
  first: string,

  @ description - 성
  last: string,
}

struct DateRange {
  from: date,
  until: date,
}

struct DateRangeOption {
  from?: date,
  until?: date,
}

@ description - 시간 범위
struct DateTimeRange {
  from: datetime,
  until: datetime,
}

@ description - 요일
enum DayOfWeek {
  SUN,
  MON,
  TUE,
  WED,
  THU,
  FRI,
  SAT,
}

@ description - BigDecimal 타입
struct Decimal {
  @ description - 비정규화된 값
  value: int64,

  @ description - 소수점 이하 자릿수
  scale?: int32,
}

@ description - DeleteB2bTaxInvoiceAttachmentError
@ discriminator - type
oneof DeleteB2bTaxInvoiceAttachmentError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_ATTACHMENT_NOT_FOUND
  B2bTaxInvoiceAttachmentNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_DRAFTED_STATUS
  B2bTaxInvoiceNotDraftedStatusError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - DeleteB2bTaxInvoiceError
@ discriminator - type
oneof DeleteB2bTaxInvoiceError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NON_DELETABLE_STATUS
  B2bTaxInvoiceNonDeletableStatusError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct DeleteB2bTaxInvoiceResponse {}

@ description - DeleteBillingKeyError
@ discriminator - type
oneof DeleteBillingKeyError {
  @ mapping - BILLING_KEY_ALREADY_DELETED
  BillingKeyAlreadyDeletedError,

  @ mapping - BILLING_KEY_NOT_FOUND
  BillingKeyNotFoundError,

  @ mapping - BILLING_KEY_NOT_ISSUED
  BillingKeyNotIssuedError,

  @ mapping - CHANNEL_SPECIFIC
  ChannelSpecificError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_SCHEDULE_ALREADY_EXISTS
  PaymentScheduleAlreadyExistsError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 빌링키 삭제 성공 응답
struct DeleteBillingKeyResponse {
  @ description - 빌링키 삭제 완료 시점
  deletedAt: datetime,
}

@ description - DeletePaymentReconciliationChannelError
@ discriminator - type
oneof DeletePaymentReconciliationChannelError {
  @ mapping - CHANNEL_NOT_FOUND
  ChannelNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INCLUDED_IN_CHANNEL_GROUP
  IncludedInChannelGroupError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct DeletePaymentReconciliationChannelResponse {}

@ description - DeletePlatformTransferError
@ discriminator - type
oneof DeletePlatformTransferError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CANCEL_ORDER_TRANSFERS_EXISTS
  PlatformCancelOrderTransfersExistsError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_TRANSFER_NON_DELETABLE_STATUS
  PlatformTransferNonDeletableStatusError,

  @ mapping - PLATFORM_TRANSFER_NOT_FOUND
  PlatformTransferNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct DeletePlatformTransferResponse {}

@ description - 빌링키 삭제 완료 상태 건
struct DeletedBillingKeyInfo {
  @ description - 빌링키 상태
  status: string,

  @ description - 빌링키
  billingKey: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 빌링키 결제수단 상세 정보
  methods?: BillingKeyPaymentMethod[],

  @ description - 빌링키 발급 시 사용된 채널
  channels: SelectedChannel[],

  @ description - 고객 정보
  customer: Customer,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 고객사가 채번하는 빌링키 발급 건 고유 아이디
  issueId?: string,

  @ description - 빌링키 발급 건 이름
  issueName?: string,

  @ description - 발급 요청 시점
  requestedAt?: datetime,

  @ description - 발급 시점
  issuedAt: datetime,

  @ description - 채널 그룹
  channelGroup?: ChannelGroupSummary,

  @ description - 채널 별 빌링키 발급 응답
  pgBillingKeyIssueResponses?: PgBillingKeyIssueResponse[],

  @ description - 발급 삭제 시점
  deletedAt: datetime,
}

@ description - 배송 완료
struct DeliveredPaymentEscrow {
  @ description - 에스크로 상태
  status: string,

  @ description - 택배사
  company: string,

  @ description - 송장번호
  invoiceNumber: string,

  @ description - 발송 일시
  sentAt?: datetime,

  @ description - 배송등록 처리 일자
  appliedAt?: datetime,
}

@ description - 파트너들을 연동 사업자에서 일괄 연동 해제합니다.
struct DisconnectBulkPartnerMemberCompanyBody {
  @ description - 연동 사업자에서 일괄 연동 해제할 파트너 조건 필터
  filter?: PlatformPartnerFilterInput,
}

@ description - DisconnectBulkPartnerMemberCompanyError
@ discriminator - type
oneof DisconnectBulkPartnerMemberCompanyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_BTX_NOT_ENABLED
  PlatformBtxNotEnabledError,

  @ mapping - PLATFORM_EXTERNAL_API_FAILED
  PlatformExternalApiFailedError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - PLATFORM_TARGET_PARTNER_NOT_FOUND
  PlatformTargetPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 연동 사업자 일괄 연동 해제 요청 응답
struct DisconnectBulkPartnerMemberCompanyResponse {
  bulkTask: PlatformBulkTask,
}

@ description - DisconnectPartnerMemberCompanyError
@ discriminator - type
oneof DisconnectPartnerMemberCompanyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_BTX_NOT_ENABLED
  PlatformBtxNotEnabledError,

  @ mapping - PLATFORM_EXTERNAL_API_FAILED
  PlatformExternalApiFailedError,

  @ mapping - PLATFORM_MEMBER_COMPANY_NOT_CONNECTED
  PlatformMemberCompanyNotConnectedError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_ONGOING_TAX_INVOICE_EXISTS
  PlatformOngoingTaxInvoiceExistsError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - PLATFORM_PARTNER_TAXATION_TYPE_IS_SIMPLE
  PlatformPartnerTaxationTypeIsSimpleError,

  @ mapping - PLATFORM_PARTNER_TYPE_IS_NOT_BUSINESS
  PlatformPartnerTypeIsNotBusinessError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 연동 사업자 연동 해제 요청 응답
struct DisconnectPartnerMemberCompanyResponse {
  partner: PlatformPartner,
}

@ description - 프로모션 할인 금액이 결제 시도 금액 이상인 경우
struct DiscountAmountExceedsTotalAmountError {
  type: string,
  message?: string,
}

@ description - 분쟁 내역
struct Dispute {
  @ description - 분쟁 상태
  status: DisputeStatus,

  @ description - PG사 분쟁 아이디
  pgDisputeId?: string,

  @ description - 분쟁 사유
  reason: string,

  @ description - 분쟁 발생 시각
  createdAt: datetime,

  @ description - 분쟁 해소 시각
  resolvedAt?: datetime,
}

@ description - 분쟁 상태
enum DisputeStatus {
  @ description - 분쟁 발생 상태
  UNRESOLVED,

  @ description - 분쟁 해소 상태
  RESOLVED,
}

struct DownloadB2bTaxInvoicesSheetBody {
  filter?: GetB2bTaxInvoicesBodyFilter,

  @ description - 다운로드 할 시트 컬럼
  fields?: TaxInvoicesSheetField[],

  test?: boolean,
}

@ description - DownloadB2bTaxInvoicesSheetError
@ discriminator - type
oneof DownloadB2bTaxInvoicesSheetError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - DownloadCreateBulkPlatformPartnersSheetError
@ discriminator - type
oneof DownloadCreateBulkPlatformPartnersSheetError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - DownloadCreateBulkPlatformTransfersSheetError
@ discriminator - type
oneof DownloadCreateBulkPlatformTransfersSheetError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제건 엑셀 다운로드를 위한 입력 정보
struct DownloadPaymentsExcelBody {
  @ description - 조회하여 다운로드할 결제 건의 조건 필터
  filter: DownloadPaymentsExcelFilter,
}

struct DownloadPaymentsExcelFilter {
  @ description - 상점 아이디
  storeId: string,

  @ description - 프로모션 아이디
  promotionId: string,
}

struct DownloadPlatformBulkPayoutsSheetBody {
  filter?: PlatformBulkPayoutFilterInput,

  @ description - 다운로드 할 시트 컬럼
  fields?: PlatformBulkPayoutsSheetField[],

  isForTest?: boolean,
}

@ description - DownloadPlatformBulkPayoutsSheetError
@ discriminator - type
oneof DownloadPlatformBulkPayoutsSheetError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct DownloadPlatformPartnerSettlementSheetBody {
  filter?: PlatformPartnerSettlementFilterInput,

  @ description - 다운로드 할 시트 컬럼
  fields?: PlatformPartnerSettlementSheetField[],

  isForTest?: boolean,
}

@ description - DownloadPlatformPartnerSettlementSheetError
@ discriminator - type
oneof DownloadPlatformPartnerSettlementSheetError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct DownloadPlatformPartnersSheetBody {
  filter?: PlatformPartnerFilterInput,
  isForTest?: boolean,
}

@ description - DownloadPlatformPartnersSheetError
@ discriminator - type
oneof DownloadPlatformPartnersSheetError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct DownloadPlatformPayoutsSheetBody {
  filter?: PlatformPayoutFilterInput,

  @ description - 다운로드 할 시트 컬럼
  fields?: PlatformPayoutsSheetField[],

  isForTest?: boolean,
}

@ description - DownloadPlatformPayoutsSheetError
@ discriminator - type
oneof DownloadPlatformPayoutsSheetError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct DownloadPlatformTransferSheetBody {
  filter?: PlatformTransferFilterInput,

  @ description - 다운로드 할 시트 컬럼
  fields?: PlatformTransferSheetField[],

  transferUserDefinedPropertyKeys?: string[],
  partnerUserDefinedPropertyKeys?: string[],
}

@ description - DownloadPlatformTransferSheetError
@ discriminator - type
oneof DownloadPlatformTransferSheetError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 프로모션 내역 엑셀 다운로드를 위한 입력 정보
struct DownloadPromotionsExcelBody {
  @ description - 상점 아이디
  storeId: string,

  @ description - 시각 범위
  datetimeRange?: DateTimeRange,

  @ description - 시각 범위를 적용할 필드
  datetimeRangeField?: PromotionTimeRangeField,
}

@ description - 세금계산서 임시 저장 정보
struct DraftB2bTaxInvoiceBody {
  @ description - 세금계산서 생성 요청 정보
  taxInvoice: B2bTaxInvoiceInput,

  @ description - 수정 세금계산서 입력 정보
  modification?: B2bTaxInvoiceModificationCreateBody,

  @ description - 메모
  memo?: string,
}

@ description - DraftB2bTaxInvoiceError
@ discriminator - type
oneof DraftB2bTaxInvoiceError {
  @ mapping - B2B_CANNOT_CHANGE_TAX_TYPE
  B2BCannotChangeTaxTypeError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_ID_ALREADY_EXISTS
  B2bIdAlreadyExistsError,

  @ mapping - B2B_MODIFICATION_NOT_PROVIDED
  B2bModificationNotProvidedError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_ORIGINAL_TAX_INVOICE_NOT_FOUND
  B2bOriginalTaxInvoiceNotFoundError,

  @ mapping - B2B_RECIPIENT_NOT_FOUND
  B2bRecipientNotFoundError,

  @ mapping - B2B_SUPPLIER_NOT_FOUND
  B2bSupplierNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_RECIPIENT_DOCUMENT_KEY_ALREADY_USED
  B2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError,

  @ mapping - B2B_TAX_INVOICE_STATUS_NOT_SENDING_COMPLETED
  B2BTaxInvoiceStatusNotSendingCompletedError,

  @ mapping - B2B_TAX_INVOICE_SUPPLIER_DOCUMENT_KEY_ALREADY_USED
  B2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 임시 저장 응답
struct DraftB2bTaxInvoiceResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description - 간편 결제 수단
enum EasyPayMethodType {
  CARD,
  TRANSFER,
  CHARGE,
}

@ description - 간편 결제사
enum EasyPayProvider {
  SAMSUNGPAY,
  KAKAOPAY,
  NAVERPAY,
  PAYCO,
  SSGPAY,
  CHAI,
  LPAY,
  KPAY,
  TOSSPAY,
  LGPAY,
  PINPAY,
  APPLEPAY,
  SKPAY,
  TOSS_BRANDPAY,
  KB_APP,
  ALIPAY,
  HYPHEN,
  TMONEY,
  PAYPAL,
  SMILEPAY,
  MIR,
  WECHAT,
  LINEPAY,
  KLARNA,
  GRABPAY,
  SHOPEEPAY,
  JKOPAY,
  PAYPAY,
  AMAZONPAY,
  RAKUTENPAY,
  DBARAI,
  AUPAY,
  MERPAY,
}

@ description - 실패한 본인인증 내역
struct FailedIdentityVerification {
  @ description - 본인인증 상태
  status: string,

  @ description - 본인인증 내역 아이디
  id: string,

  @ description - 사용된 본인인증 채널
  channel?: SelectedChannel,

  @ description - 요청 시 고객 정보
  requestedCustomer: IdentityVerificationRequestedCustomer,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 본인인증 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 본인인증 실패 정보
  failure: IdentityVerificationFailure,

  @ description - 포트원 버전
  version: PortOneVersion,
}

@ description - 결제 실패 상태 건
struct FailedPayment {
  @ description - 결제 건 상태
  status: string,

  @ description - 결제 건 아이디
  id: string,

  @ description - 결제 건 포트원 채번 아이디
  transactionId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel?: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - 결제 실패 시점
  failedAt: datetime,

  @ description - 결제 실패 정보
  failure: PaymentFailure,
}

@ description - 취소 실패 상태
struct FailedPaymentCancellation {
  @ description - 결제 취소 내역 상태
  status: string,

  @ description - 취소 내역 아이디
  id: string,

  @ description - PG사 결제 취소 내역 아이디
  pgCancellationId?: string,

  @ description - 취소 총 금액
  totalAmount: int64,

  @ description - 취소 금액 중 면세 금액
  taxFreeAmount: int64,

  @ description - 취소 금액 중 부가세액
  vatAmount: int64,

  @ description - 적립형 포인트의 환불 금액
  easyPayDiscountAmount?: int64,

  @ description - 취소 사유
  reason: string,

  @ description - 취소 시점
  cancelledAt?: datetime,

  @ description - 취소 요청 시점
  requestedAt: datetime,

  @ description - 취소 요청 경로
  trigger?: Trigger,
}

@ description - 결제 실패 상태
struct FailedPaymentSchedule {
  @ description - 결제 예약 건 상태
  status: string,

  @ description - 결제 예약 건 아이디
  id: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 빌링키
  billingKey: string,

  @ description - 주문명
  orderName: string,

  @ description - 문화비 지출 여부
  isCulturalExpense: boolean,

  @ description - 에스크로 결제 여부
  isEscrow: boolean,

  @ description - 고객 정보
  customer: Customer,

  @ description - 사용자 지정 데이터
  customData: string,

  @ description - 결제 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세
  vatAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 할부 개월 수
  installmentMonth?: int32,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 결제 예약 등록 시점
  createdAt: datetime,

  @ description - 결제 예정 시점
  timeToPay: datetime,

  @ description - 결제 시작 시점
  startedAt: datetime,

  @ description - 결제 완료 시점
  completedAt: datetime,
}

@ description - 결제 실패 상태 건
struct FailedPaymentTransaction {
  @ description - 결제 시도 상태
  status: string,

  @ description - 결제 시도 아이디 (transactionId)
  id: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel?: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - 결제 실패 시점
  failedAt: datetime,

  @ description - 결제 실패 정보
  failure: PaymentFailure,
}

@ description - 빌링키 발급 실패 채널 응답
struct FailedPgBillingKeyIssueResponse {
  type: string,

  @ description - 채널
  channel: SelectedChannel,

  @ description - 발급 실패 상세 정보
  failure: BillingKeyFailure,
}

@ description - 요청이 거절된 경우
struct ForbiddenError {
  type: string,
  message?: string,
}

@ description - 성별
enum Gender {
  @ description - 남성
  MALE,

  @ description - 여성
  FEMALE,

  @ description - 그 외 성별
  OTHER,
}

struct GetAccountTransfersBody {
  isForTest?: boolean,
  page?: PageInput,
  filter?: PlatformAccountTransferFilter,
}

@ description - 결제 건 커서 기반 대용량 다건 조회를 위한 입력 정보
struct GetAllPaymentsByCursorBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 결제 건 생성시점 범위 조건의 시작
  from?: datetime,

  @ description - 결제 건 생성시점 범위 조건의 끝
  until?: datetime,

  @ description - 커서
  cursor?: string,

  @ description - 페이지 크기
  size?: int32,
}

@ description - 결제 건 커서 기반 대용량 다건 조회 성공 응답 정보
struct GetAllPaymentsByCursorResponse {
  @ description - 조회된 결제 건 및 커서 정보 리스트
  items: PaymentWithCursor[],
}

@ description - GetAllPaymentsError
@ discriminator - type
oneof GetAllPaymentsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 고객사의 평균 거래액 현황 조회를 위한 입력 정보
struct GetAnalyticsAverageAmountChartBody {
  @ description - 조회할 평균 거래액 현황의 시작 시간
  from: datetime,

  @ description - 조회할 평균 거래액 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,

  @ description - 평균 거래액 현황 조회 단위
  timeGranularity: AnalyticsTimeGranularity,
}

@ description - 고객사의 환불율 조회를 위한 입력 정보
struct GetAnalyticsCancellationRateBody {
  @ description - 환불율 조회 기간의 시작 시간
  from: datetime,

  @ description - 환불율 조회 기간의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,
}

@ description - GetAnalyticsCancellationRateError
@ discriminator - type
oneof GetAnalyticsCancellationRateError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 고객사의 카드결제 현황 조회를 위한 입력 정보
struct GetAnalyticsCardChartBody {
  @ description - 조회할 카드결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 카드결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,

  @ description - 카드결제 현황 조회 단위
  timeGranularity: AnalyticsTimeGranularity,
}

@ description - GetAnalyticsCardChartError
@ discriminator - type
oneof GetAnalyticsCardChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 고객사의 카드사별 결제 현황 조회를 위한 입력 정보
struct GetAnalyticsCardCompanyChartBody {
  @ description - 조회할 카드사별 결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 카드사별 결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,

  @ description - 카드사별 결제 현황 조회 단위
  timeGranularity: AnalyticsTimeGranularity,

  @ description - 조회할 카드사
  cardCompanies: CardCompany[],

  @ description - 나머지 집계에 포함되지 않을 카드사
  excludesFromRemainders: CardCompany[],
}

@ description - GetAnalyticsCardCompanyChartError
@ discriminator - type
oneof GetAnalyticsCardCompanyChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 고객사의 간편결제 현황 조회를 위한 입력 정보
struct GetAnalyticsEasyPayChartBody {
  @ description - 조회할 간편결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 간편결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,

  @ description - 간편결제 현황 조회 단위
  timeGranularity: AnalyticsTimeGranularity,
}

@ description - GetAnalyticsEasyPayChartError
@ discriminator - type
oneof GetAnalyticsEasyPayChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 고객사의 간편결제사별 결제 현황 조회를 위한 입력 정보
struct GetAnalyticsEasyPayProviderChartBody {
  @ description - 조회할 간편결제사별 결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 간편결제사별 결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,

  @ description - 간편결제사별 결제 현황 조회 단위
  timeGranularity: AnalyticsTimeGranularity,

  @ description - 조회할 간편결제사
  easyPayProviders: EasyPayProvider[],

  @ description - 나머지 집계에 포함되지 않을 간편결제사
  excludesFromRemainders: EasyPayProvider[],
}

@ description - GetAnalyticsEasyPayProviderChartError
@ discriminator - type
oneof GetAnalyticsEasyPayProviderChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetAnalyticsOverseasPaymentUsageError
@ discriminator - type
oneof GetAnalyticsOverseasPaymentUsageError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 고객사의 결제 현황 조회를 위한 입력 정보
struct GetAnalyticsPaymentChartBody {
  @ description - 조회할 결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled?: boolean,

  @ description - 결제 현황 조회 단위
  timeGranularity: AnalyticsTimeGranularity,
}

@ description - GetAnalyticsPaymentChartError
@ discriminator - type
oneof GetAnalyticsPaymentChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 고객사의 결제 현황 인사이트 조회를 위한 입력 정보
struct GetAnalyticsPaymentChartInsightBody {
  @ description - 조회할 결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled?: boolean,

  @ description - 타임존 시간 오프셋
  timezoneHourOffset: int32,
}

@ description - GetAnalyticsPaymentChartInsightError
@ discriminator - type
oneof GetAnalyticsPaymentChartInsightError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 고객사의 결제수단 현황 조회를 위한 입력 정보
struct GetAnalyticsPaymentMethodChartBody {
  @ description - 조회할 결제수단 현황의 시작 시간
  from: datetime,

  @ description - 조회할 결제수단 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,
}

@ description - 고객사의 결제수단 트렌드 조회를 위한 입력 정보
struct GetAnalyticsPaymentMethodTrendChartBody {
  @ description - 조회할 결제수단 트렌드의 시작 시간
  from: datetime,

  @ description - 조회할 결제수단 트렌드의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,

  @ description - 결제 결제수단 트렌드 조회 단위
  timeGranularity: AnalyticsTimeGranularity,
}

@ description - 고객사의 결제환경별 결제전환율 조회를 위한 입력 정보
struct GetAnalyticsPaymentStatusByPaymentClientChartBody {
  @ description - 조회할 결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,
}

@ description - 고객사의 결제수단별 결제전환율 조회를 위한 입력 정보
struct GetAnalyticsPaymentStatusByPaymentMethodChartBody {
  @ description - 조회할 결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,
}

@ description - 고객사의 PG사별 결제전환율 조회를 위한 입력 정보
struct GetAnalyticsPaymentStatusByPgCompanyChartBody {
  @ description - 조회할 결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,
}

@ description - 고객사의 결제상태 이력 집계 조회를 위한 입력 정보
struct GetAnalyticsPaymentStatusChartBody {
  @ description - 조회할 결제 현황의 시작 시간
  from: datetime,

  @ description - 조회할 결제 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,
}

@ description - 고객사의 결제대행사 현황 조회를 위한 입력 정보
struct GetAnalyticsPgCompanyChartBody {
  @ description - 조회할 결제대행사 현황의 시작 시간
  from: datetime,

  @ description - 조회할 결제대행사 현황의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,
}

@ description - 고객사의 결제대행사별 거래 추이 조회를 위한 입력 정보
struct GetAnalyticsPgCompanyTrendChartBody {
  @ description - 조회할 결제대행사별 거래 추이의 시작 시간
  from: datetime,

  @ description - 조회할 결제대행사별 거래 추이의 끝 시간
  until: datetime,

  @ description - 조회할 결제 통화
  currency: Currency,

  @ description - 결제취소건 제외 여부
  excludeCancelled: boolean,

  @ description - 결제 결제대행사별 거래 추이 조회 단위
  timeGranularity: AnalyticsTimeGranularity,

  @ description - 조회할 결제대행사
  pgCompanies: PgCompany[],
}

@ description - GetAverageAmountChartError
@ discriminator - type
oneof GetAverageAmountChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetB2bAccountHolderError
@ discriminator - type
oneof GetB2bAccountHolderError {
  @ mapping - B2B_BANK_ACCOUNT_NOT_FOUND
  B2bBankAccountNotFoundError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_FINANCIAL_SYSTEM_COMMUNICATION
  B2bFinancialSystemCommunicationError,

  @ mapping - B2B_FINANCIAL_SYSTEM_FAILURE
  B2bFinancialSystemFailureError,

  @ mapping - B2B_FINANCIAL_SYSTEM_UNDER_MAINTENANCE
  B2bFinancialSystemUnderMaintenanceError,

  @ mapping - B2B_FOREIGN_EXCHANGE_ACCOUNT
  B2bForeignExchangeAccountError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_REGULAR_MAINTENANCE_TIME
  B2bRegularMaintenanceTimeError,

  @ mapping - B2B_SUSPENDED_ACCOUNT
  B2bSuspendedAccountError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetB2bAccountHolderPreviewError
@ discriminator - type
oneof GetB2bAccountHolderPreviewError {
  @ mapping - B2B_BANK_ACCOUNT_NOT_FOUND
  B2bBankAccountNotFoundError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_FINANCIAL_SYSTEM_COMMUNICATION
  B2bFinancialSystemCommunicationError,

  @ mapping - B2B_FINANCIAL_SYSTEM_FAILURE
  B2bFinancialSystemFailureError,

  @ mapping - B2B_FINANCIAL_SYSTEM_UNDER_MAINTENANCE
  B2bFinancialSystemUnderMaintenanceError,

  @ mapping - B2B_FOREIGN_EXCHANGE_ACCOUNT
  B2bForeignExchangeAccountError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_REGULAR_MAINTENANCE_TIME
  B2bRegularMaintenanceTimeError,

  @ mapping - B2B_SUSPENDED_ACCOUNT
  B2bSuspendedAccountError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 예금주 조회 요청 정보
struct GetB2bBankAccountHolderBody {
  @ description - 은행
  bank: Bank,

  @ description - 계좌번호
  accountNumber: string,
}

@ description - 예금주 조회 응답 정보
struct GetB2bBankAccountHolderPreviewResponse {
  @ description - 예금주
  accountHolder: string,
}

@ description - 예금주 조회 응답 정보
struct GetB2bBankAccountHolderResponse {
  @ description - 예금주
  accountHolder: string,
}

@ description - 사업자등록 정보 조회를 위한 입력 정보
struct GetB2bBusinessInfosBody {
  @ description - 조회할 사업자등록번호 리스트
  brnList: string[],
}

@ description - GetB2bBusinessInfosError
@ discriminator - type
oneof GetB2bBusinessInfosError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 사업자등록 정보 조회 성공 응답
struct GetB2bBusinessInfosResponse {
  @ description - 사업자등록 정보 리스트
  result: B2bBusinessInfoResult[],
}

@ description - GetB2bCertificateError
@ discriminator - type
oneof GetB2bCertificateError {
  @ mapping - B2B_CERTIFICATE_UNREGISTERED
  B2bCertificateUnregisteredError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_MEMBER_COMPANY_NOT_FOUND
  B2bMemberCompanyNotFoundError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetB2bCertificateRegistrationUrlError
@ discriminator - type
oneof GetB2bCertificateRegistrationUrlError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_MEMBER_COMPANY_NOT_FOUND
  B2bMemberCompanyNotFoundError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 인증서 등록 URL 조회 응답 정보
struct GetB2bCertificateRegistrationUrlResponse {
  @ description - 인증서 등록 URL
  url: string,
}

@ description - GetB2bCompanyStateError
@ discriminator - type
oneof GetB2bCompanyStateError {
  @ mapping - B2B_COMPANY_NOT_FOUND
  B2bCompanyNotFoundError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_HOMETAX_UNDER_MAINTENANCE
  B2bHometaxUnderMaintenanceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetB2bCompanyStatePreviewError
@ discriminator - type
oneof GetB2bCompanyStatePreviewError {
  @ mapping - B2B_COMPANY_NOT_FOUND
  B2bCompanyNotFoundError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_HOMETAX_UNDER_MAINTENANCE
  B2bHometaxUnderMaintenanceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetB2bMemberCompanyError
@ discriminator - type
oneof GetB2bMemberCompanyError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_MEMBER_COMPANY_NOT_FOUND
  B2bMemberCompanyNotFoundError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetB2bTaxInvoiceAttachmentsError
@ discriminator - type
oneof GetB2bTaxInvoiceAttachmentsError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 첨부파일 목록 조회 성공 응답
struct GetB2bTaxInvoiceAttachmentsResponse {
  @ description - 첨부파일 목록
  attachments: B2bTaxInvoiceAttachment[],
}

@ description - GetB2bTaxInvoiceError
@ discriminator - type
oneof GetB2bTaxInvoiceError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetB2bTaxInvoicePdfDownloadUrlError
@ discriminator - type
oneof GetB2bTaxInvoicePdfDownloadUrlError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 PDF 다운로드 URL 성공 응답
struct GetB2bTaxInvoicePdfDownloadUrlResponse {
  @ description - 세금계산서 PDF 다운로드 URL
  url: string,
}

@ description - GetB2bTaxInvoicePopupUrlError
@ discriminator - type
oneof GetB2bTaxInvoicePopupUrlError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 팝업 URL 성공 응답
struct GetB2bTaxInvoicePopupUrlResponse {
  @ description - 세금계산서 팝업 URL
  url: string,
}

@ description - GetB2bTaxInvoicePrintUrlError
@ discriminator - type
oneof GetB2bTaxInvoicePrintUrlError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 프린트 URL 성공 응답
struct GetB2bTaxInvoicePrintUrlResponse {
  @ description - 세금계산서 프린트 URL
  url: string,
}

@ description - 세금 계산서 다건 조회를 위한 입력 정보
struct GetB2bTaxInvoicesBody {
  @ description - 테스트 모드 여부
  test?: boolean,

  @ description - 페이지 번호
  pageNumber?: int32,

  @ description - 페이지 크기
  pageSize?: int32,

  @ description - 필터
  filter?: GetB2bTaxInvoicesBodyFilter,
}

@ description - 조회 기간 필터
struct GetB2bTaxInvoicesBodyDateFilter {
  @ description - 조회 기간 기준
  dateType?: B2bSearchDateType,

  @ description - 조회 기간
  dateRange?: DateRangeOption[],
}

@ description - 세금계산서 다건 조회 필터
struct GetB2bTaxInvoicesBodyFilter {
  @ description - 상위 필터
  primaryFilter?: GetB2bTaxInvoicesBodyPrimaryFilter,

  @ description - 공급자 사업자등록번호
  supplierBrn?: string,

  @ description - 세금계산서 상태
  statuses?: B2bTaxInvoiceStatus[],

  @ description - 과세 유형
  taxationTypes?: B2bTaxInvoiceTaxationType[],

  @ description - 문서 유형
  documentModificationTypes?: B2bTaxInvoiceDocumentModificationType[],

  @ description - 지연 발행 여부
  isDelayed?: boolean,

  @ description - 발행 유형
  issuanceTypes?: B2bTaxInvoiceIssuanceType[],

  @ description - 영수/청구
  purposeTypes?: B2bTaxInvoicePurposeType[],
}

@ description - 주어진 필드 중 한 개의 필드만 입력합니다.
struct GetB2bTaxInvoicesBodyPrimaryFilter {
  @ description - 조회 기간
  dateFilter?: GetB2bTaxInvoicesBodyDateFilter,

  @ description - 세금계산서 아이디
  taxInvoiceId?: string,

  @ description - 일괄발행 아이디
  bulkTaxInvoiceId?: string,

  @ description - 국세청 승인번호
  ntsApprovalNumber?: string,

  @ description - 공급자 문서번호
  supplierDocumentKey?: string,

  @ description - 공급받는자 승인번호
  recipientDocumentKey?: string,

  @ description - 세금계산서 아이디 리스트
  taxInvoiceIds?: string[],
}

@ description - GetB2bTaxInvoicesError
@ discriminator - type
oneof GetB2bTaxInvoicesError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 다건 조회 성공 응답
struct GetB2bTaxInvoicesResponse {
  @ description - 조회된 세금계산서 목록
  items: B2bTaxInvoiceSummary[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - GetBankInfosError
@ discriminator - type
oneof GetBankInfosError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,
}

@ description - 은행 정보 조회 성공 응답 정보
struct GetBankInfosResponse {
  @ description - 조회된 은행 정보 리스트
  items: BankInfo[],
}

@ description - GetBillingKeyInfoError
@ discriminator - type
oneof GetBillingKeyInfoError {
  @ mapping - BILLING_KEY_NOT_FOUND
  BillingKeyNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 빌링키 다건 조회를 위한 입력 정보
struct GetBillingKeyInfosBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 정렬 조건
  sort?: BillingKeySortInput,

  @ description - 조회할 빌링키 조건 필터
  filter?: BillingKeyFilterInput,
}

@ description - GetBillingKeyInfosError
@ discriminator - type
oneof GetBillingKeyInfosError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 빌링키 다건 조회 성공 응답 정보
struct GetBillingKeyInfosResponse {
  @ description - 조회된 빌링키 리스트
  items: BillingKeyInfo[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - GetCashReceiptError
@ discriminator - type
oneof GetCashReceiptError {
  @ mapping - CASH_RECEIPT_NOT_FOUND
  CashReceiptNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 현금영수증 다건 조회를 위한 입력 정보
struct GetCashReceiptsBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 정렬 조건
  sort?: CashReceiptSortInput,

  @ description - 조회할 현금영수증 조건 필터
  filter?: CashReceiptFilterInput,
}

@ description - GetCashReceiptsError
@ discriminator - type
oneof GetCashReceiptsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 현금영수증 다건 조회 성공 응답 정보
struct GetCashReceiptsResponse {
  @ description - 조회된 현금영수증 리스트
  items: CashReceipt[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

struct GetChannelsBody {
  @ description - 상점 아이디
  storeId?: string,

  page?: int32,
  limit?: int32,
}

@ description - GetChannelsError
@ discriminator - type
oneof GetChannelsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 채널 다건 조회 성공 응답 정보
struct GetChannelsResponse {
  @ description - 조회된 채널 리스트
  items: Channel[],

  @ description - 페이지 정보
  page: PageInfo,
}

@ description - GetIdentityVerificationError
@ discriminator - type
oneof GetIdentityVerificationError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - IDENTITY_VERIFICATION_NOT_FOUND
  IdentityVerificationNotFoundError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 본인인증 내역 다건 조회를 위한 입력 정보
struct GetIdentityVerificationsBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 정렬 조건
  sort?: IdentityVerificationSortInput,

  @ description - 조회할 본인인증 내역 조건 필터
  filter?: IdentityVerificationFilterInput,
}

@ description - GetIdentityVerificationsError
@ discriminator - type
oneof GetIdentityVerificationsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 본인인증 내역 다건 조회 성공 응답 정보
struct GetIdentityVerificationsResponse {
  @ description - 조회된 본인인증 내역 리스트
  items: IdentityVerification[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - GetKakaopayPaymentOrderError
@ discriminator - type
oneof GetKakaopayPaymentOrderError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 카카오페이 주문 조회 응답
struct GetKakaopayPaymentOrderResponse {
  @ description - HTTP 상태 코드
  statusCode: int32,

  @ description - HTTP 응답 본문 (JSON)
  body: string,
}

@ description - GetMerchantError
@ discriminator - type
oneof GetMerchantError {
  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPaymentError
@ discriminator - type
oneof GetPaymentError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPaymentMethodChartError
@ discriminator - type
oneof GetPaymentMethodChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPaymentMethodTrendChartError
@ discriminator - type
oneof GetPaymentMethodTrendChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPaymentReconciliationChannelError
@ discriminator - type
oneof GetPaymentReconciliationChannelError {
  @ mapping - CHANNEL_NOT_FOUND
  ChannelNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationChannelResponse {
  channel: PaymentReconciliationChannel,
}

struct GetPaymentReconciliationCollectionHistoriesBody {
  @ description - 채널키
  channelKey?: string,

  @ description - 수집 형태
  collectionType?: PaymentReconciliationCollectionType,

  page?: int32,
  limit?: int32,
}

@ description - GetPaymentReconciliationCollectionHistoriesError
@ discriminator - type
oneof GetPaymentReconciliationCollectionHistoriesError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationCollectionHistoriesResponse {
  collectionHistories: PaymentReconciliationCollectionHistory[],
  page: PageInfo,
}

struct GetPaymentReconciliationSettlementSummariesBody {
  @ description - 정산일 범위
  dateRange: DateRange,

  @ description - 조회할 건 수
  size: int32,

  @ description - 이전 페이지의 마지막 커서
  after?: string,
}

@ description - GetPaymentReconciliationSettlementSummariesError
@ discriminator - type
oneof GetPaymentReconciliationSettlementSummariesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationSettlementSummariesResponse {
  items: PaymentReconciliationSettlementSummaryWithCursor[],
  pageInfo: CursorPageInfo,
}

struct GetPaymentReconciliationSettlementSummaryExcelFileBody {
  @ description - 정산일 범위
  dateRange: DateRange,

  filter?: PaymentReconciliationSettlementSummaryExcelFileFilterInput,

  @ description - 액셀파일 요청시 선택 필드
  columns: PaymentReconciliationSettlementSummaryColumn[],
}

@ description - GetPaymentReconciliationSettlementSummaryExcelFileError
@ discriminator - type
oneof GetPaymentReconciliationSettlementSummaryExcelFileError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationSettlementVatReferenceExcelFileBody {
  @ description - 정산일 범위
  dateRange: DateRange,

  filter?: PaymentReconciliationSettlementSummaryFilterInput,
}

@ description - GetPaymentReconciliationSettlementVatReferenceExcelFileError
@ discriminator - type
oneof GetPaymentReconciliationSettlementVatReferenceExcelFileError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationTransactionSummariesBody {
  @ description - 거래일 범위
  dateRange: DateRange,

  @ description - 조회할 건 수
  size: int32,

  @ description - 이전 페이지의 마지막 커서
  after?: string,
}

@ description - GetPaymentReconciliationTransactionSummariesError
@ discriminator - type
oneof GetPaymentReconciliationTransactionSummariesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationTransactionSummariesResponse {
  items: PaymentReconciliationTransactionSummaryWithCursor[],
  pageInfo: CursorPageInfo,
}

struct GetPaymentReconciliationTransactionSummaryExcelFileBody {
  @ description - 거래일 범위
  dateRange: DateRange,

  filter?: PaymentReconciliationTransactionSummaryExcelFilterInput,

  @ description - 액셀파일 요청시 선택 필드
  columns: PaymentReconciliationTransactionSummaryColumn[],
}

@ description - GetPaymentReconciliationTransactionSummaryExcelFileError
@ discriminator - type
oneof GetPaymentReconciliationTransactionSummaryExcelFileError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationTransactionVatReferenceExcelFileBody {
  @ description - 거래일 범위
  dateRange: DateRange,

  filter?: PaymentReconciliationTransactionSummaryFilterInput,
}

@ description - GetPaymentReconciliationTransactionVatReferenceExcelFileError
@ discriminator - type
oneof GetPaymentReconciliationTransactionVatReferenceExcelFileError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationsBody {
  dateCondition: ReconciliationDateConditionInput,
  searchCondition?: PaymentReconciliationSearchConditionInput,
  filter?: PaymentReconciliationFilterInput,

  @ description - 조회할 건 수
  size: int32,

  @ description - 이전 페이지의 마지막 커서
  after?: string,
}

@ description - GetPaymentReconciliationsError
@ discriminator - type
oneof GetPaymentReconciliationsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationsExcelFileBody {
  @ description - 엑셀파일 요청시 선택 필드
  columns: PaymentReconciliationColumn[],

  dateCondition: ReconciliationDateConditionInput,
  searchCondition?: PaymentReconciliationSearchConditionInput,
  filter?: PaymentReconciliationExcelFileFilterInput,
  order?: PaymentReconciliationOrderInput,
}

@ description - GetPaymentReconciliationsExcelFileError
@ discriminator - type
oneof GetPaymentReconciliationsExcelFileError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPaymentReconciliationsResponse {
  items: PaymentReconciliationWithCursor[],
  pageInfo: CursorPageInfo,
}

@ description - GetPaymentScheduleError
@ discriminator - type
oneof GetPaymentScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_SCHEDULE_NOT_FOUND
  PaymentScheduleNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 조회 결과는 결제 예정 시점(timeToPay) 기준 최신 순으로 정렬됩니다.
struct GetPaymentSchedulesBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 정렬 조건
  sort?: PaymentScheduleSortInput,

  @ description - 조회할 결제 예약 건의 조건 필터
  filter?: PaymentScheduleFilterInput,
}

@ description - GetPaymentSchedulesError
@ discriminator - type
oneof GetPaymentSchedulesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제 예약 다건 조회 성공 응답 정보
struct GetPaymentSchedulesResponse {
  @ description - 조회된 결제 예약 건 리스트
  items: PaymentSchedule[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - GetPaymentStatusByPaymentClientChartError
@ discriminator - type
oneof GetPaymentStatusByPaymentClientChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPaymentStatusByPaymentMethodChartError
@ discriminator - type
oneof GetPaymentStatusByPaymentMethodChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPaymentStatusByPgCompanyChartError
@ discriminator - type
oneof GetPaymentStatusByPgCompanyChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPaymentStatusChartError
@ discriminator - type
oneof GetPaymentStatusChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPaymentTransactionsError
@ discriminator - type
oneof GetPaymentTransactionsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제 시도 내역 조회 응답 정보
struct GetPaymentTransactionsResponse {
  @ description - 결제 시도 내역
  items: PaymentTransaction[],
}

@ description - 결제 건 다건 조회를 위한 입력 정보
struct GetPaymentsBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 조회할 결제 건 조건 필터
  filter?: PaymentFilterInput,
}

@ description - GetPaymentsError
@ discriminator - type
oneof GetPaymentsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제 건 다건 조회 성공 응답 정보
struct GetPaymentsResponse {
  @ description - 조회된 결제 건 리스트
  items: Payment[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - GetPgCompanyChartError
@ discriminator - type
oneof GetPgCompanyChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPgCompanyTrendChartError
@ discriminator - type
oneof GetPgCompanyTrendChartError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformAccountHolderError
@ discriminator - type
oneof GetPlatformAccountHolderError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_EXTERNAL_API_FAILED
  PlatformExternalApiFailedError,

  @ mapping - PLATFORM_EXTERNAL_API_TEMPORARILY_FAILED
  PlatformExternalApiTemporarilyFailedError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_NOT_SUPPORTED_BANK
  PlatformNotSupportedBankError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformAccountTransfersError
@ discriminator - type
oneof GetPlatformAccountTransfersError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 이체내역 다건 조회 성공 응답 정보
struct GetPlatformAccountTransfersResponse {
  @ description - 조회된 이체내역 리스트
  items: PlatformAccountTransfer[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - 추가 수수료 정책 다건 조회를 위한 입력 정보
struct GetPlatformAdditionalFeePoliciesBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 조회할 추가 수수료 정책 조건 필터
  filter?: PlatformAdditionalFeePolicyFilterInput,
}

@ description - GetPlatformAdditionalFeePoliciesError
@ discriminator - type
oneof GetPlatformAdditionalFeePoliciesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 추가 수수료 정책 다건 조회 성공 응답 정보
struct GetPlatformAdditionalFeePoliciesResponse {
  @ description - 조회된 추가 수수료 정책 리스트
  items: PlatformAdditionalFeePolicy[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - GetPlatformAdditionalFeePolicyError
@ discriminator - type
oneof GetPlatformAdditionalFeePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND
  PlatformAdditionalFeePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformAdditionalFeePolicyScheduleError
@ discriminator - type
oneof GetPlatformAdditionalFeePolicyScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND
  PlatformAdditionalFeePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformBulkPayoutError
@ discriminator - type
oneof GetPlatformBulkPayoutError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_BULK_PAYOUT_NOT_FOUND
  PlatformBulkPayoutNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformBulkPayoutPartnerSettlementsBody {
  filter?: PlatformBulkPayoutPartnerSettlementsFilterInput,
  page?: PageInput,
  isForTest?: boolean,
}

@ description - GetPlatformBulkPayoutPartnerSettlementsError
@ discriminator - type
oneof GetPlatformBulkPayoutPartnerSettlementsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_BULK_PAYOUT_NOT_FOUND
  PlatformBulkPayoutNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformBulkPayoutPartnerSettlementsResponse {
  items: PlatformBulkPayoutPartnerSettlement[],
  page: PageInfo,
  counts: PlatformPartnerSettlementStatusStats,
}

struct GetPlatformBulkPayoutsBody {
  isForTest?: boolean,
  page?: PageInput,
  filter?: PlatformBulkPayoutFilterInput,
}

@ description - GetPlatformBulkPayoutsError
@ discriminator - type
oneof GetPlatformBulkPayoutsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformBulkPayoutsResponse {
  items: PlatformBulkPayout[],
  page: PageInfo,
  counts: PlatformBulkPayoutStatusStats,
}

@ description - GetPlatformCompanyStateError
@ discriminator - type
oneof GetPlatformCompanyStateError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_COMPANY_NOT_FOUND
  PlatformCompanyNotFoundError,

  @ mapping - PLATFORM_EXTERNAL_API_FAILED
  PlatformExternalApiFailedError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 사업자 조회 성공 응답 정보
struct GetPlatformCompanyStatePayload {
  @ description - 사업자 정보
  companyState: PlatformCompanyState,

  @ description - 사업자 검증 아이디
  companyVerificationId: string,
}

@ description - GetPlatformContractError
@ discriminator - type
oneof GetPlatformContractError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformContractScheduleError
@ discriminator - type
oneof GetPlatformContractScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 계약 다건 조회를 위한 입력 정보
struct GetPlatformContractsBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 조회할 계약 조건 필터
  filter?: PlatformContractFilterInput,
}

@ description - GetPlatformContractsError
@ discriminator - type
oneof GetPlatformContractsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 계약 다건 조회 성공 응답
struct GetPlatformContractsResponse {
  @ description - 조회된 계약 리스트
  items: PlatformContract[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - 할인 분담 정책 다건 조회를 위한 입력 정보
struct GetPlatformDiscountSharePoliciesBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 조회할 할인 분담 정책 조건 필터
  filter?: PlatformDiscountSharePolicyFilterInput,
}

@ description - GetPlatformDiscountSharePoliciesError
@ discriminator - type
oneof GetPlatformDiscountSharePoliciesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 할인 분담 정책 다건 조회 성공 응답 정보
struct GetPlatformDiscountSharePoliciesResponse {
  @ description - 조회된 할인 분담 정책 리스트
  items: PlatformDiscountSharePolicy[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - GetPlatformDiscountSharePolicyError
@ discriminator - type
oneof GetPlatformDiscountSharePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformDiscountSharePolicyFilterOptionsError
@ discriminator - type
oneof GetPlatformDiscountSharePolicyFilterOptionsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformDiscountSharePolicyScheduleError
@ discriminator - type
oneof GetPlatformDiscountSharePolicyScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformError
@ discriminator - type
oneof GetPlatformError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformHolidaysError
@ discriminator - type
oneof GetPlatformHolidaysError {
  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 공휴일 조회
struct GetPlatformHolidaysResponse {
  @ description - 공휴일 리스트
  holidays: PlatformHoliday[],
}

@ description - 파트너 현황 조회를 위한 입력 정보
struct GetPlatformPartnerDashboardBody {
  @ description - 테스트 조회 여부
  isForTest?: boolean,
}

@ description - GetPlatformPartnerDashboardError
@ discriminator - type
oneof GetPlatformPartnerDashboardError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformPartnerError
@ discriminator - type
oneof GetPlatformPartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformPartnerFilterOptionsError
@ discriminator - type
oneof GetPlatformPartnerFilterOptionsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformPartnerScheduleError
@ discriminator - type
oneof GetPlatformPartnerScheduleError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformPartnerSettlementCurrenciesBody {
  isForTest: boolean,
}

@ description - GetPlatformPartnerSettlementCurrenciesError
@ discriminator - type
oneof GetPlatformPartnerSettlementCurrenciesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 정산내역 통화 조회 결과
struct GetPlatformPartnerSettlementCurrenciesResponse {
  @ description - 통화 단위
  settlementCurrencies: Currency[],
}

struct GetPlatformPartnerSettlementDashboardBody {
  filter: PlatformPartnerSettlementFilterInput,
  isForTest: boolean,
}

@ description - GetPlatformPartnerSettlementDashboardError
@ discriminator - type
oneof GetPlatformPartnerSettlementDashboardError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformPartnerSettlementDatesBody {
  isForTest: boolean,
}

@ description - GetPlatformPartnerSettlementDatesError
@ discriminator - type
oneof GetPlatformPartnerSettlementDatesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 정산일 리스트 조회 결과
struct GetPlatformPartnerSettlementDatesResponse {
  settlementDates: date[],
}

@ description - 정산내역 다건 조회를 위한 입력 정보
struct GetPlatformPartnerSettlementsBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 조회할 정산내역 조건 필터
  filter: PlatformPartnerSettlementFilterInput,

  isForTest: boolean,
}

@ description - GetPlatformPartnerSettlementsError
@ discriminator - type
oneof GetPlatformPartnerSettlementsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 정산내역 다건 조회 성공 응답 정보
struct GetPlatformPartnerSettlementsResponse {
  @ description - 조회된 정산내역 리스트
  items: PlatformPartnerSettlement[],

  @ description - 조회된 페이지 정보
  page: PageInfo,

  @ description - 정산내역 상태 별 갯수
  counts: PlatformPartnerSettlementStatusStats,
}

@ description - 파트너 다건 조회를 위한 입력 정보
struct GetPlatformPartnersBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 조회할 파트너 조건 필터
  filter?: PlatformPartnerFilterInput,
}

@ description - GetPlatformPartnersError
@ discriminator - type
oneof GetPlatformPartnersError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 다건 조회 성공 응답 정보
struct GetPlatformPartnersResponse {
  @ description - 조회된 파트너 리스트
  items: PlatformPartner[],

  @ description - 조회된 페이지 정보
  page: PageInfo,
}

@ description - GetPlatformPayableSettlementDatesError
@ discriminator - type
oneof GetPlatformPayableSettlementDatesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 지급 가능한 정산일 리스트 조회 성공 응답 정보
struct GetPlatformPayableSettlementDatesResponse {
  @ description - IN_PROCESS, SETTLED 상태의 Transfer가 등록되어 있는 정산일 리스트
  settlementDates: date[],
}

@ description - GetPlatformPayoutError
@ discriminator - type
oneof GetPlatformPayoutError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PAYOUT_NOT_FOUND
  PlatformPayoutNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformPayoutsBody {
  isForTest?: boolean,
  page?: PageInput,
  filter?: PlatformPayoutFilterInput,
}

@ description - GetPlatformPayoutsError
@ discriminator - type
oneof GetPlatformPayoutsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformPayoutsResponse {
  items: PlatformPayout[],
  page: PageInfo,
  counts: PlatformPayoutStatusStats,
}

@ description - GetPlatformSettingError
@ discriminator - type
oneof GetPlatformSettingError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformTransferDashboardBody {
  settlementDate: date,
  isForTest?: boolean,
}

@ description - GetPlatformTransferDashboardError
@ discriminator - type
oneof GetPlatformTransferDashboardError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformTransferError
@ discriminator - type
oneof GetPlatformTransferError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_TRANSFER_NOT_FOUND
  PlatformTransferNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPlatformTransferFilterOptionsError
@ discriminator - type
oneof GetPlatformTransferFilterOptionsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 정산건 요약 다건 조회를 위한 입력 정보
struct GetPlatformTransferSummariesBody {
  @ description - 요청할 페이지 정보
  page?: PageInput,

  @ description - 조회할 정산건 조건 필터
  filter?: PlatformTransferFilterInput,
}

@ description - GetPlatformTransferSummariesError
@ discriminator - type
oneof GetPlatformTransferSummariesError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct GetPlatformTransferSummariesResponse {
  transferSummaries: PlatformTransferSummary[],
  page: PageInfo,
}

@ description - GetPromotionError
@ discriminator - type
oneof GetPromotionError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PROMOTION_NOT_FOUND
  PromotionNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - GetPromotionGroupError
@ discriminator - type
oneof GetPromotionGroupError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PROMOTION_GROUP_NOT_FOUND
  PromotionGroupNotFoundError,
}

@ description - 상품권 타입
enum GiftCertificateType {
  @ description - 도서문화 상품권
  BOOKNLIFE,

  @ description - 스마트 문화상품권
  SMART_MUNSANG,

  @ description - 컬쳐랜드 상품권
  CULTURELAND,

  @ description - 해피머니
  HAPPYMONEY,

  @ description - 문화상품권
  CULTURE_GIFT,
}

@ description - 본인인증 내역
@ discriminator - status
oneof IdentityVerification {
  @ description - 실패한 본인인증 내역
  @ mapping - FAILED
  FailedIdentityVerification,

  @ description - 준비 상태의 본인인증 내역
  @ mapping - READY
  ReadyIdentityVerification,

  @ description - 완료된 본인인증 내역
  @ mapping - VERIFIED
  VerifiedIdentityVerification,
}

@ description - 본인인증 건이 이미 API로 요청된 상태인 경우
struct IdentityVerificationAlreadySentError {
  type: string,
  message?: string,
}

@ description - 본인인증 건이 이미 인증 완료된 상태인 경우
struct IdentityVerificationAlreadyVerifiedError {
  type: string,
  message?: string,
}

@ description - 본인인증 실패 정보
struct IdentityVerificationFailure {
  @ description - 실패 사유
  reason?: string,

  @ description - PG사 실패 코드
  pgCode?: string,

  @ description - PG사 실패 메시지
  pgMessage?: string,
}

@ description - 본인인증 다건 조회를 위한 고객 정보 입력 정보
struct IdentityVerificationFilterCustomerInput {
  @ description - 이름
  name?: string,

  @ description - 출생 연도
  birthYear?: string,

  @ description - 출생월
  birthMonth?: string,

  @ description - 출생일
  birthDay?: string,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 성별
  gender?: Gender,
}

@ description - 본인인증 다건 조회를 위한 입력 정보
struct IdentityVerificationFilterInput {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 조회 기준 시점 유형
  timeRangeField?: IdentityVerificationTimeRangeField,

  @ description - 조회 기준 시점 범위의 시작
  from?: datetime,

  @ description - 조회 기준 시점 범위의 끝
  until?: datetime,

  @ description - 고객사 본인인증 아이디
  identityVerificationId?: string,

  @ description - 포트원 본인인증 시도 번호
  identityVerificationTxId?: string,

  @ description - 테스트 결제 필터링
  isTest?: boolean,

  @ description - 본인인증 상태 리스트
  statuses?: IdentityVerificationStatus[],

  @ description - PG사 본인인증 번호
  pgTxId?: string,

  @ description - PG 상점아이디
  pgMerchantId?: string,

  @ description - PG사 결제 모듈 리스트
  pgProviders?: PgProvider[],

  @ description - PG사 리스트
  pgCompanies?: PgCompany[],

  @ description - 통신사 리스트
  carriers?: Carrier[],

  @ description - 포트원 버전
  version?: PortOneVersion,

  @ description - 고객 정보
  customer?: IdentityVerificationFilterCustomerInput,
}

@ description - 본인인증 방식
enum IdentityVerificationMethod {
  SMS,
  APP,
}

@ description - 요청된 본인인증 건이 존재하지 않는 경우
struct IdentityVerificationNotFoundError {
  type: string,
  message?: string,
}

@ description - 본인인증 건이 API로 요청된 상태가 아닌 경우
struct IdentityVerificationNotSentError {
  type: string,
  message?: string,
}

@ description - 본인인증 통신사
enum IdentityVerificationOperator {
  @ description - SKT
  SKT,

  @ description - KT
  KT,

  @ description - LGU
  LGU,

  @ description - SKT 알뜰폰
  SKT_MVNO,

  @ description - KT 알뜰폰
  KT_MVNO,

  @ description - LGU 알뜰폰
  LGU_MVNO,
}

@ description - 요청 시 고객 정보
struct IdentityVerificationRequestedCustomer {
  @ description - 식별 아이디
  id?: string,

  @ description - 이름
  name?: string,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 출생연도
  birthYear?: string,

  @ description - 출생월
  birthMonth?: string,

  @ description - 출생일
  birthDay?: string,
}

@ description - 본인인증 내역 정렬 기준
enum IdentityVerificationSortBy {
  @ description - 요청 시각
  REQUESTED_AT,

  @ description - 완료 시각
  VERIFIED_AT,

  @ description - 실패 시각
  FAILED_AT,

  @ description - 상태 변경 시각
  STATUS_UPDATED_AT,
}

@ description - 본인인증 내역 다건 조회 시 정렬 조건
struct IdentityVerificationSortInput {
  @ description - 정렬 기준 필드
  by?: IdentityVerificationSortBy,

  @ description - 정렬 순서
  order?: SortOrder,
}

@ description - 본인인증 상태
enum IdentityVerificationStatus {
  @ description - 요청 상태
  READY,

  @ description - 완료 상태
  VERIFIED,

  @ description - 실패 상태
  FAILED,
}

@ description - 본인인증 다건 조회 시, 시각 범위를 적용할 필드
enum IdentityVerificationTimeRangeField {
  @ description - 요청 시각
  REQUESTED_AT,

  @ description - 완료 시각
  VERIFIED_AT,

  @ description - 실패 시각
  FAILED_AT,

  @ description - 상태 변경 시각
  STATUS_UPDATED_AT,
}

@ description - 인증된 고객 정보
struct IdentityVerificationVerifiedCustomer {
  @ description - 식별 아이디
  id?: string,

  @ description - 이름
  name: string,

  @ description - 통신사
  operator?: IdentityVerificationOperator,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 생년월일 (yyyy-MM-dd)
  birthDate?: date,

  @ description - 성별
  gender?: Gender,

  @ description - 외국인 여부
  isForeigner?: boolean,

  @ description - CI (개인 고유 식별키)
  ci?: string,

  @ description - DI (사이트별 개인 고유 식별키)
  di?: string,
}

@ description - 삭제하려는 채널이 채널 그룹에 포함되어 있는 경우
struct IncludedInChannelGroupError {
  type: string,
  message?: string,
}

@ description - `card`를 반드시 입력해 주세요.
struct InstantBillingKeyPaymentMethodInput {
  card?: InstantBillingKeyPaymentMethodInputCard,
}

@ description - 카드 수단 정보 입력 양식
struct InstantBillingKeyPaymentMethodInputCard {
  credential: CardCredential,
}

@ description - 수기 결제 요청 정보
struct InstantPaymentInput {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 채널 키
  channelKey?: string,

  @ description - 채널 그룹 ID
  channelGroupId?: string,

  @ description - 결제수단 정보
  method: InstantPaymentMethodInput,

  @ description - 주문명
  orderName: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 여부
  isEscrow?: boolean,

  @ description - 고객 정보
  customer?: CustomerInput,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 결제 금액 세부 입력 정보
  amount: PaymentAmountInput,

  @ description - 통화
  currency: Currency,

  @ description - 결제 국가
  country?: Country,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 개수
  productCount?: int32,

  @ description - 상품 유형
  productType?: PaymentProductType,

  @ description - 배송지 주소
  shippingAddress?: SeparatedAddressInput,

  @ description - 해당 결제에 적용할 프로모션 아이디
  promotionId?: string,
}

@ description - 하나의 필드만 입력합니다.
struct InstantPaymentMethodInput {
  @ description - 카드
  card?: InstantPaymentMethodInputCard,

  @ description - 가상계좌
  virtualAccount?: InstantPaymentMethodInputVirtualAccount,
}

@ description - 카드 수단 정보 입력 정보
struct InstantPaymentMethodInputCard {
  @ description - 카드 인증 관련 정보
  credential: CardCredential,

  @ description - 카드 할부 개월 수
  installmentMonth?: int32,

  @ description - 무이자 할부 적용 여부
  useFreeInstallmentPlan?: boolean,

  @ description - 무이자 할부 이자를 고객사가 부담할지 여부
  useFreeInterestFromMerchant?: boolean,

  @ description - 카드 포인트 사용 여부
  useCardPoint?: boolean,
}

@ description - 가상계좌 수단 정보 입력 정보
struct InstantPaymentMethodInputVirtualAccount {
  @ description - 은행
  bank: Bank,

  @ description - 입금 만료 기한
  expiry: InstantPaymentMethodInputVirtualAccountExpiry,

  @ description - 가상계좌 유형
  option: InstantPaymentMethodInputVirtualAccountOption,

  @ description - 현금영수증 정보
  cashReceipt: InstantPaymentMethodInputVirtualAccountCashReceiptInfo,

  @ description - 예금주명
  remitteeName?: string,
}

@ description - 가상계좌 결제 시 현금영수증 정보
struct InstantPaymentMethodInputVirtualAccountCashReceiptInfo {
  @ description - 현금영수증 유형
  type: CashReceiptInputType,

  @ description - 사용자 식별 번호
  customerIdentityNumber: string,
}

@ description - validHours와 dueDate 둘 중 하나의 필드만 입력합니다.
struct InstantPaymentMethodInputVirtualAccountExpiry {
  @ description - 유효 시간
  validHours?: int32,

  @ description - 만료 시점
  dueDate?: datetime,
}

@ description - 가상계좌 발급 방식
struct InstantPaymentMethodInputVirtualAccountOption {
  @ description - 발급 유형
  type: InstantPaymentMethodInputVirtualAccountOptionType,

  @ description - 고정식 가상계좌 발급 방식
  fixed?: InstantPaymentMethodInputVirtualAccountOptionFixed,
}

@ description - pgAccountId, accountNumber 유형 중 한 개의 필드만 입력합니다.
struct InstantPaymentMethodInputVirtualAccountOptionFixed {
  @ description - Account ID 고정식 가상계좌
  pgAccountId?: string,

  @ description - Account Number 고정식 가상계좌
  accountNumber?: string,
}

@ description - 가상계좌 발급 유형
enum InstantPaymentMethodInputVirtualAccountOptionType {
  @ description - 회전식 가상계좌
  NORMAL,

  @ description - 고정식 가상계좌
  FIXED,
}

@ description - 수기 결제가 완료된 결제 건 요약 정보
struct InstantPaymentSummary {
  @ description - PG사 결제 아이디
  pgTxId: string,

  @ description - 결제 완료 시점
  paidAt: datetime,
}

@ description - 허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.
struct InvalidRequestError {
  type: string,
  message?: string,
}

@ description - 세금계산서 발행 승인 정보
struct IssueB2bTaxInvoiceBody {
  @ description - 메모
  memo?: string,

  @ description - 이메일 제목
  emailSubject?: string,
}

@ description - IssueB2bTaxInvoiceError
@ discriminator - type
oneof IssueB2bTaxInvoiceError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_REQUESTED_STATUS
  B2bTaxInvoiceNotRequestedStatusError,

  @ mapping - B2B_TAX_INVOICE_NO_SUPPLIER_DOCUMENT_KEY
  B2bTaxInvoiceNoSupplierDocumentKeyError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 발행 승인 응답
struct IssueB2bTaxInvoiceResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description - 빌링키 발급 요청 양식
struct IssueBillingKeyBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 빌링키 결제 수단 정보
  method: InstantBillingKeyPaymentMethodInput,

  @ description - 채널 키
  channelKey?: string,

  @ description - 채널 그룹 ID
  channelGroupId?: string,

  @ description - 고객 정보
  customer?: CustomerInput,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고)
  bypass?: object,

  @ description - 웹훅 주소
  noticeUrls?: string[],
}

@ description - IssueBillingKeyError
@ discriminator - type
oneof IssueBillingKeyError {
  @ mapping - CHANNEL_NOT_FOUND
  ChannelNotFoundError,

  @ mapping - CHANNEL_SPECIFIC
  ChannelSpecificError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 빌링키 발급 성공 응답
struct IssueBillingKeyResponse {
  @ description - 빌링키 정보
  billingKeyInfo: BillingKeyInfoSummary,

  @ description - 발급에 실패한 채널이 있을시 실패 정보
  channelSpecificFailures?: ChannelSpecificFailure[],
}

@ description - 현금영수증 발급 요청 양식
struct IssueCashReceiptBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 채널 키
  channelKey: string,

  @ description - 현금 영수증 유형
  type: CashReceiptType,

  @ description - 주문명
  orderName: string,

  @ description - 화폐
  currency: Currency,

  @ description - 금액 세부 입력 정보
  amount: PaymentAmountInput,

  @ description - 상품 유형
  productType?: PaymentProductType,

  @ description - 고객 정보
  customer: IssueCashReceiptCustomerInput,

  @ description - 결제 일자
  paidAt?: datetime,

  @ description - 사업자등록번호
  businessRegistrationNumber?: string,

  @ description - 결제 수단
  paymentMethod?: IssueCashReceiptPaymentMethodType,
}

@ description - 현금영수증 발급 시 고객 관련 입력 정보
struct IssueCashReceiptCustomerInput {
  @ description - 고객 식별값
  identityNumber: string,

  @ description - 이름
  name?: string,

  @ description - 이메일
  email?: string,

  @ description - 전화번호
  phoneNumber?: string,
}

@ description - IssueCashReceiptError
@ discriminator - type
oneof IssueCashReceiptError {
  @ mapping - CASH_RECEIPT_ALREADY_ISSUED
  CashReceiptAlreadyIssuedError,

  @ mapping - CHANNEL_NOT_FOUND
  ChannelNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 현금영수증 발급 가능 결제 수단
enum IssueCashReceiptPaymentMethodType {
  @ description - 계좌이체
  TRANSFER,

  @ description - 가상계좌
  VIRTUAL_ACCOUNT,
}

@ description - 현금 영수증 발급 성공 응답
struct IssueCashReceiptResponse {
  cashReceipt: CashReceiptSummary,
}

@ description - 발급 실패
struct IssueFailedCashReceipt {
  @ description - 현금영수증 상태
  status: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 현금영수증 발급에 사용된 채널
  channel?: SelectedChannel,

  @ description - 주문명
  orderName: string,

  @ description - 수동 발급 여부
  isManual: boolean,

  @ description - 상태 업데이트 시점
  statusUpdatedAt?: datetime,
}

@ description - 빌링키 발급 완료 상태 건
struct IssuedBillingKeyInfo {
  @ description - 빌링키 상태
  status: string,

  @ description - 빌링키
  billingKey: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 빌링키 결제수단 상세 정보
  methods?: BillingKeyPaymentMethod[],

  @ description - 빌링키 발급 시 사용된 채널
  channels: SelectedChannel[],

  @ description - 고객 정보
  customer: Customer,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 고객사가 채번하는 빌링키 발급 건 고유 아이디
  issueId?: string,

  @ description - 빌링키 발급 건 이름
  issueName?: string,

  @ description - 발급 요청 시점
  requestedAt?: datetime,

  @ description - 발급 시점
  issuedAt: datetime,

  @ description - 채널 그룹
  channelGroup?: ChannelGroupSummary,

  @ description - 채널 별 빌링키 발급 응답
  pgBillingKeyIssueResponses?: PgBillingKeyIssueResponse[],
}

@ description - 발급 완료
struct IssuedCashReceipt {
  @ description - 현금영수증 상태
  status: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 현금영수증 발급에 사용된 채널
  channel: SelectedChannel,

  @ description - 결제 금액
  amount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세액
  vatAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 주문명
  orderName: string,

  @ description - 수동 발급 여부
  isManual: boolean,

  @ description - 현금영수증 유형
  type?: CashReceiptType,

  @ description - PG사 현금영수증 아이디
  pgReceiptId?: string,

  @ description - 승인 번호
  issueNumber: string,

  @ description - 현금영수증 URL
  url?: string,

  @ description - 발급 시점
  issuedAt: datetime,

  @ description - 상태 업데이트 시점
  statusUpdatedAt?: datetime,
}

@ description - 발급 완료된 현금영수증
struct IssuedPaymentCashReceipt {
  @ description - 결제 건 내 현금영수증 상태
  status: string,

  @ description - 현금영수증 유형
  type?: CashReceiptType,

  @ description - PG사 영수증 발급 아이디
  pgReceiptId?: string,

  @ description - 승인 번호
  issueNumber: string,

  @ description - 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 현금영수증 URL
  url?: string,

  @ description - 발급 시점
  issuedAt: datetime,
}

@ description - 빌링키 발급 성공 채널 응답
struct IssuedPgBillingKeyIssueResponse {
  type: string,

  @ description - 채널
  channel: SelectedChannel,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - 빌링키 결제수단 상세 정보
  method?: BillingKeyPaymentMethod,
}

@ description - API key 로그인을 위한 입력 정보
struct LoginViaApiKeyBody {
  @ description - 발급받은 API key
  apiKey: string,
}

@ description - LoginViaApiKeyError
@ discriminator - type
oneof LoginViaApiKeyError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - API key 로그인 성공 응답
struct LoginViaApiKeyResponse {
  @ description - 인증에 사용하는 엑세스 토큰
  accessToken: string,

  @ description - 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
  refreshToken: string,
}

@ description - API Secret 로그인을 위한 입력 정보
struct LoginViaApiSecretBody {
  @ description - 발급받은 API secret
  apiSecret: string,
}

@ description - LoginViaApiSecretError
@ discriminator - type
oneof LoginViaApiSecretError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - API key 로그인 성공 응답
struct LoginViaApiSecretResponse {
  @ description - 인증에 사용하는 엑세스 토큰
  accessToken: string,

  @ description - 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
  refreshToken: string,
}

@ description - 결제 혹은 본인인증 시도 횟수가 최대에 도달한 경우
struct MaxTransactionCountReachedError {
  type: string,
  message?: string,
}

@ description - 동일한 webhook id에 대한 수동 재시도 횟수가 최대에 도달한 경우
struct MaxWebhookRetryCountReachedError {
  type: string,
  message?: string,
}

@ description - 고객사 정보
struct Merchant {
  @ description - 고객사 아이디
  id: string,

  graphqlId: string,

  @ description - 리포트 정보
  analytics: Analytics,
}

@ description - 에스크로 배송 정보 수정 입력 정보
struct ModifyEscrowLogisticsBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 에스크로 발송자 정보
  sender?: PaymentEscrowSenderInput,

  @ description - 에스크로 수취인 정보
  receiver?: PaymentEscrowReceiverInput,

  @ description - 에스크로 물류 정보
  logistics: PaymentLogistics,

  @ description - 이메일 알림 전송 여부
  sendEmail?: boolean,

  @ description - 상품 정보
  products?: PaymentProduct[],
}

@ description - ModifyEscrowLogisticsError
@ discriminator - type
oneof ModifyEscrowLogisticsError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - PAYMENT_NOT_PAID
  PaymentNotPaidError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 에스크로 배송 정보 수정 성공 응답
struct ModifyEscrowLogisticsResponse {
  @ description - 송장 번호
  invoiceNumber: string,

  @ description - 발송 시점
  sentAt: datetime,

  @ description - 에스크로 정보 수정 시점
  modifiedAt: datetime,
}

@ description - 월 및 일자 정보
struct MonthDay {
  month: int32,
  day: int32,
}

@ description - 프로모션에 의해 조정된 취소 금액이 음수인 경우
struct NegativePromotionAdjustedCancelAmountError {
  type: string,
  message?: string,
}

@ description - 포트원에서 허용되지 않는 PG 상점 아이디로 채널 등록을 시도했을 경우
struct NotAllowedPgMerchantIdError {
  type: string,
  message?: string,
}

@ description - 한 줄 형식 주소만 존재합니다.
struct OneLineAddress {
  type: string,

  @ description - 주소 (한 줄)
  oneLine: string,
}

@ description - 반환된 페이지 결과 정보
struct PageInfo {
  @ description - 요청된 페이지 번호
  number: int32,

  @ description - 요청된 페이지 당 객체 수
  size: int32,

  @ description - 실제 반환된 객체 수
  totalCount: int32,
}

@ description - 다건 조회 API 에 사용되는 페이지 입력 정보
struct PageInput {
  @ description - 0부터 시작하는 페이지 번호
  number?: int32,

  @ description - 각 페이지 당 포함할 객체 수
  size?: int32,
}

@ description - 결제 완료 상태 건
struct PaidPayment {
  @ description - 결제 건 상태
  status: string,

  @ description - 결제 건 아이디
  id: string,

  @ description - 결제 건 포트원 채번 아이디
  transactionId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - 결제 완료 시점
  paidAt: datetime,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - PG사 거래 응답 본문
  pgResponse?: string,

  @ description - 현금영수증
  cashReceipt?: PaymentCashReceipt,

  @ description - 거래 영수증 URL
  receiptUrl?: string,

  @ description - 분쟁 목록
  disputes: Dispute[],
}

@ description - 결제 완료 상태 건
struct PaidPaymentTransaction {
  @ description - 결제 시도 상태
  status: string,

  @ description - 결제 시도 아이디 (transactionId)
  id: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - 결제 완료 시점
  paidAt: datetime,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - PG사 거래 응답 본문
  pgResponse?: string,

  @ description - 현금영수증
  cashReceipt?: PaymentCashReceipt,

  @ description - 거래 영수증 URL
  receiptUrl?: string,
}

@ description - 결제 부분 취소 상태 건
struct PartialCancelledPayment {
  @ description - 결제 건 상태
  status: string,

  @ description - 결제 건 아이디
  id: string,

  @ description - 결제 건 포트원 채번 아이디
  transactionId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - 결제 완료 시점
  paidAt?: datetime,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - 현금영수증
  cashReceipt?: PaymentCashReceipt,

  @ description - 거래 영수증 URL
  receiptUrl?: string,

  @ description - 결제 취소 내역
  cancellations: PaymentCancellation[],

  @ description - 결제 취소 시점
  cancelledAt: datetime,
}

@ description - 결제 부분 취소 상태 건
struct PartialCancelledPaymentTransaction {
  @ description - 결제 시도 상태
  status: string,

  @ description - 결제 시도 아이디 (transactionId)
  id: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - 결제 완료 시점
  paidAt?: datetime,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - 현금영수증
  cashReceipt?: PaymentCashReceipt,

  @ description - 거래 영수증 URL
  receiptUrl?: string,

  @ description - 결제 취소 내역
  cancellations: PaymentCancellation[],

  @ description - 결제 취소 시점
  cancelledAt: datetime,
}

@ description - PayInstantlyError
@ discriminator - type
oneof PayInstantlyError {
  @ mapping - ALREADY_PAID
  AlreadyPaidError,

  @ mapping - CHANNEL_NOT_FOUND
  ChannelNotFoundError,

  @ mapping - DISCOUNT_AMOUNT_EXCEEDS_TOTAL_AMOUNT
  DiscountAmountExceedsTotalAmountError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - MAX_TRANSACTION_COUNT_REACHED
  MaxTransactionCountReachedError,

  @ mapping - PAYMENT_SCHEDULE_ALREADY_EXISTS
  PaymentScheduleAlreadyExistsError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - PROMOTION_PAY_METHOD_DOES_NOT_MATCH
  PromotionPayMethodDoesNotMatchError,

  @ mapping - SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT
  SumOfPartsExceedsTotalAmountError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 수기 결제 성공 응답
struct PayInstantlyResponse {
  @ description - 결제 건 요약 정보
  payment: InstantPaymentSummary,
}

@ description - 결제 완료 대기 상태 건
struct PayPendingPayment {
  @ description - 결제 건 상태
  status: string,

  @ description - 결제 건 아이디
  id: string,

  @ description - 결제 건 포트원 채번 아이디
  transactionId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - PG사 거래 아이디
  pgTxId?: string,
}

@ description - 결제 완료 대기 상태 건
struct PayPendingPaymentTransaction {
  @ description - 결제 시도 상태
  status: string,

  @ description - 결제 시도 아이디 (transactionId)
  id: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - PG사 거래 아이디
  pgTxId?: string,
}

@ description - PayWithBillingKeyError
@ discriminator - type
oneof PayWithBillingKeyError {
  @ mapping - ALREADY_PAID
  AlreadyPaidError,

  @ mapping - BILLING_KEY_ALREADY_DELETED
  BillingKeyAlreadyDeletedError,

  @ mapping - BILLING_KEY_NOT_FOUND
  BillingKeyNotFoundError,

  @ mapping - CHANNEL_NOT_FOUND
  ChannelNotFoundError,

  @ mapping - DISCOUNT_AMOUNT_EXCEEDS_TOTAL_AMOUNT
  DiscountAmountExceedsTotalAmountError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - MAX_TRANSACTION_COUNT_REACHED
  MaxTransactionCountReachedError,

  @ mapping - PAYMENT_SCHEDULE_ALREADY_EXISTS
  PaymentScheduleAlreadyExistsError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - PROMOTION_PAY_METHOD_DOES_NOT_MATCH
  PromotionPayMethodDoesNotMatchError,

  @ mapping - SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT
  SumOfPartsExceedsTotalAmountError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 빌링키 결제 성공 응답
struct PayWithBillingKeyResponse {
  @ description - 결제 건 요약 정보
  payment: BillingKeyPaymentSummary,
}

@ description - 결제 건
@ discriminator - status
oneof Payment {
  @ description - 결제 취소
  @ mapping - CANCELLED
  CancelledPayment,

  @ description - 결제 실패
  @ mapping - FAILED
  FailedPayment,

  @ description - 결제 완료
  @ mapping - PAID
  PaidPayment,

  @ description - 결제 부분 취소
  @ mapping - PARTIAL_CANCELLED
  PartialCancelledPayment,

  @ description - 결제 완료 대기
  @ mapping - PAY_PENDING
  PayPendingPayment,

  @ description - 결제 준비
  @ mapping - READY
  ReadyPayment,

  @ description - 가상계좌 발급 완료
  @ mapping - VIRTUAL_ACCOUNT_ISSUED
  VirtualAccountIssuedPayment,
}

@ description - 결제가 이미 취소된 경우
struct PaymentAlreadyCancelledError {
  type: string,
  message?: string,
}

@ description - 결제 금액 세부 정보
struct PaymentAmount {
  @ description - 총 결제금액
  total: int64,

  @ description - 면세액
  taxFree: int64,

  @ description - 부가세액
  vat?: int64,

  @ description - 공급가액
  supply?: int64,

  @ description - 할인금액
  discount: int64,

  @ description - 실제 결제금액
  paid: int64,

  @ description - 취소금액
  cancelled: int64,

  @ description - 취소금액 중 면세액
  cancelledTaxFree: int64,
}

@ description - 금액 세부 입력 정보
struct PaymentAmountInput {
  @ description - 총 금액
  total: int64,

  @ description - 면세액
  taxFree?: int64,

  @ description - 부가세액
  vat?: int64,
}

@ description - 결제 취소 내역
@ discriminator - status
oneof PaymentCancellation {
  @ description - 취소 실패
  @ mapping - FAILED
  FailedPaymentCancellation,

  @ description - 취소 요청
  @ mapping - REQUESTED
  RequestedPaymentCancellation,

  @ description - 취소 완료
  @ mapping - SUCCEEDED
  SucceededPaymentCancellation,
}

@ description - 결제 건 내 현금영수증 정보
@ discriminator - status
oneof PaymentCashReceipt {
  @ description - 발급 취소
  @ mapping - CANCELLED
  CancelledPaymentCashReceipt,

  @ description - 발급 완료
  @ mapping - ISSUED
  IssuedPaymentCashReceipt,
}

@ description - 결제건 내 현금영수증 상태
enum PaymentCashReceiptStatus {
  ISSUED,
  CANCELLED,
}

@ description - 결제가 발생한 클라이언트 환경
enum PaymentClientType {
  SDK_MOBILE,
  SDK_PC,
  API,
}

@ description - 에스크로 정보
@ discriminator - status
oneof PaymentEscrow {
  @ description - 배송 정보 등록 전
  @ mapping - BEFORE_REGISTERED
  BeforeRegisteredPaymentEscrow,

  @ description - 거래 취소
  @ mapping - CANCELLED
  CancelledPaymentEscrow,

  @ description - 구매 확정
  @ mapping - CONFIRMED
  ConfirmedPaymentEscrow,

  @ description - 배송 완료
  @ mapping - DELIVERED
  DeliveredPaymentEscrow,

  @ description - 배송 정보 등록 완료
  @ mapping - REGISTERED
  RegisteredPaymentEscrow,

  @ description - 구매 거절
  @ mapping - REJECTED
  RejectedPaymentEscrow,

  @ description - 구매 거절 확정
  @ mapping - REJECT_CONFIRMED
  RejectConfirmedPaymentEscrow,
}

@ description - 에스크로 수취인 정보
struct PaymentEscrowReceiverInput {
  @ description - 이름
  name?: string,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 우편번호
  zipcode?: string,

  @ description - 주소
  address?: SeparatedAddressInput,
}

@ description - 에스크로 발송자 정보
struct PaymentEscrowSenderInput {
  @ description - 이름
  name?: string,

  @ description - 전화번호
  phoneNumber?: string,

  @ description - 우편번호
  zipcode?: string,

  @ description - 수취인과의 관계
  relationship?: string,

  @ description - 주소
  address?: SeparatedAddressInput,
}

@ description - 결제 실패 정보
struct PaymentFailure {
  @ description - 실패 사유
  reason?: string,

  @ description - PG사 실패 코드
  pgCode?: string,

  @ description - PG사 실패 메시지
  pgMessage?: string,
}

@ description - 결제 건 다건 조회를 위한 입력 정보
struct PaymentFilterInput {
  @ description - 고객사 아이디
  merchantId?: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 조회 기준 시점 유형
  timestampType?: PaymentTimestampType,

  @ description - 결제 요청/상태 승인 시점 범위의 시작
  from?: datetime,

  @ description - 결제 요청/상태 승인 시점 범위의 끝
  until?: datetime,

  @ description - 결제 상태 리스트
  status?: PaymentStatus[],

  @ description - 결제수단 리스트
  methods?: PaymentMethodType[],

  @ description - PG사 리스트
  pgProvider?: PgProvider[],

  @ description - 테스트 결제 여부
  isTest?: boolean,

  @ description - 결제 예약 건 필터링
  isScheduled?: boolean,

  @ description - 결제 건 정렬 기준
  sortBy?: PaymentSortBy,

  @ description - 결제 건 정렬 방식
  sortOrder?: SortOrder,

  @ description - 포트원 버전
  version?: PortOneVersion,

  @ description - 웹훅 상태
  webhookStatus?: PaymentWebhookStatus,

  @ description - 플랫폼 유형
  platformType?: PaymentClientType,

  @ description - 통화
  currency?: Currency,

  @ description - 에스크로 결제 여부
  isEscrow?: boolean,

  @ description - 에스크로 결제의 배송 정보 상태
  escrowStatus?: PaymentFilterInputEscrowStatus,

  @ description - 카드 브랜드
  cardBrand?: CardBrand,

  @ description - 카드 유형
  cardType?: CardType,

  @ description - 카드 소유주 유형
  cardOwnerType?: CardOwnerType,

  @ description - 상품권 종류
  giftCertificateType?: PaymentMethodGiftCertificateType,

  @ description - 현금영수증 유형
  cashReceiptType?: CashReceiptInputType,

  @ description - 현금영수증 상태
  cashReceiptStatus?: PaymentCashReceiptStatus,

  @ description - 현금영수증 발급 시간 범위
  cashReceiptIssuedAtRange?: DateTimeRange,

  @ description - 현금영수증 취소 시간 범위
  cashReceiptCancelledAtRange?: DateTimeRange,

  @ description - 통합 검색 리스트 필터
  textSearch?: PaymentTextSearch[],
}

@ description - 에스크로 상태
enum PaymentFilterInputEscrowStatus {
  REGISTERED,
  DELIVERED,
  CONFIRMED,
  REJECTED,
  CANCELLED,
  REJECT_CONFIRMED,
}

@ description - 할부 정보
struct PaymentInstallment {
  @ description - 할부 개월 수
  month: int32,

  @ description - 무이자할부 여부
  isInterestFree: boolean,
}

@ description - 배송정보
struct PaymentLogistics {
  @ description - 물류회사
  company: PaymentLogisticsCompany,

  @ description - 송장번호
  invoiceNumber: string,

  @ description - 발송시점
  sentAt: datetime,

  @ description - 수령시점
  receivedAt?: datetime,

  @ description - 주소
  address?: SeparatedAddressInput,
}

@ description - 물류 회사
enum PaymentLogisticsCompany {
  @ description - 롯데글로벌로지스
  LOTTE,

  @ description - 로젠택배
  LOGEN,

  @ description - 동원로엑스
  DONGWON,

  @ description - 우체국택배
  POST,

  @ description - 대한통운
  CJ,

  @ description - 한진택배
  HANJIN,

  @ description - 대신택배
  DAESIN,

  @ description - 일양로지스
  ILYANG,

  @ description - 경동택배
  KYUNGDONG,

  @ description - 천일택배
  CHUNIL,

  @ description - 등기우편
  POST_REGISTERED,

  @ description - GS네트웍스
  GS,

  @ description - 우리택배
  WOORI,

  @ description - 합동택배
  HAPDONG,

  @ description - FedEx
  FEDEX,

  @ description - UPS
  UPS,

  @ description - GSM NtoN
  GSM_NTON,

  @ description - 성원글로벌카고
  SUNGWON,

  @ description - LX판토스
  LX_PANTOS,

  @ description - ACI
  ACI,

  @ description - CJ대한통운 국제특송
  CJ_INTL,

  @ description - USPS
  USPS,

  @ description - EMS
  EMS,

  @ description - DHL
  DHL,

  @ description - KGL네트웍스
  KGL,

  @ description - 굿투럭
  GOODSTOLUCK,

  @ description - 건영택배
  KUNYOUNG,

  @ description - SLX
  SLX,

  @ description - SF Express
  SF,

  @ description - 기타
  ETC,
}

@ description - 결제수단 정보
@ discriminator - type
oneof PaymentMethod {
  @ description - 결제수단 카드 정보
  @ mapping - PaymentMethodCard
  PaymentMethodCard,

  @ description - 편의점 결제 상세 정보
  @ mapping - PaymentMethodConvenienceStore
  PaymentMethodConvenienceStore,

  @ description - 간편 결제 상세 정보
  @ mapping - PaymentMethodEasyPay
  PaymentMethodEasyPay,

  @ description - 상품권 상세 정보
  @ mapping - PaymentMethodGiftCertificate
  PaymentMethodGiftCertificate,

  @ description - 모바일 상세 정보
  @ mapping - PaymentMethodMobile
  PaymentMethodMobile,

  @ description - 계좌 이체 상세 정보
  @ mapping - PaymentMethodTransfer
  PaymentMethodTransfer,

  @ description - 가상계좌 상세 정보
  @ mapping - PaymentMethodVirtualAccount
  PaymentMethodVirtualAccount,
}

@ description - 결제수단 카드 정보
struct PaymentMethodCard {
  type: string,

  @ description - 카드 상세 정보
  card?: Card,

  @ description - 승인 번호
  approvalNumber?: string,

  @ description - 할부 정보
  installment?: PaymentInstallment,

  @ description - 카드 포인트 사용여부
  pointUsed?: boolean,
}

@ description - 편의점 결제 상세 정보
struct PaymentMethodConvenienceStore {
  type: string,
}

@ description - 간편 결제 상세 정보
struct PaymentMethodEasyPay {
  type: string,

  @ description - 간편 결제 PG사
  provider?: EasyPayProvider,

  @ description - 간편 결제 수단
  easyPayMethod?: PaymentMethodEasyPayMethod,
}

@ description - 간편 결제 수단
@ discriminator - type
oneof PaymentMethodEasyPayMethod {
  @ description - 결제수단 카드 정보
  @ mapping - PaymentMethodCard
  PaymentMethodCard,

  @ description - 충전식 포인트 결제 정보
  @ mapping - PaymentMethodEasyPayMethodCharge
  PaymentMethodEasyPayMethodCharge,

  @ description - 계좌 이체 상세 정보
  @ mapping - PaymentMethodTransfer
  PaymentMethodTransfer,
}

@ description - 충전식 포인트 결제 정보
struct PaymentMethodEasyPayMethodCharge {
  type: string,

  @ description - 표준 은행 코드
  bank?: Bank,
}

@ description - 상품권 상세 정보
struct PaymentMethodGiftCertificate {
  type: string,

  @ description - 상품권 종류
  giftCertificateType?: PaymentMethodGiftCertificateType,

  @ description - 상품권 승인 번호
  approvalNumber: string,
}

@ description - 상품권 종류
enum PaymentMethodGiftCertificateType {
  BOOKNLIFE,
  SMART_MUNSANG,
  CULTURELAND,
  HAPPYMONEY,
  CULTUREGIFT,
}

@ description - 모바일 상세 정보
struct PaymentMethodMobile {
  type: string,

  @ description - 전화번호
  phoneNumber?: string,
}

@ description - 계좌 이체 상세 정보
struct PaymentMethodTransfer {
  type: string,

  @ description - 표준 은행 코드
  bank?: Bank,

  @ description - 계좌번호
  accountNumber?: string,
}

enum PaymentMethodType {
  CARD,
  TRANSFER,
  VIRTUAL_ACCOUNT,
  GIFT_CERTIFICATE,
  MOBILE,
  EASY_PAY,
  CONVENIENCE_STORE,
}

@ description - 가상계좌 상세 정보
struct PaymentMethodVirtualAccount {
  type: string,

  @ description - 표준 은행 코드
  bank?: Bank,

  @ description - 계좌번호
  accountNumber: string,

  @ description - 계좌 유형
  accountType?: PaymentMethodVirtualAccountType,

  @ description - 계좌주
  remitteeName?: string,

  @ description - 송금인(입금자)
  remitterName?: string,

  @ description - 입금만료시점
  expiredAt?: datetime,

  @ description - 계좌발급시점
  issuedAt?: datetime,

  @ description - 가상계좌 결제가 환불 단계일 때의 환불 상태
  refundStatus?: PaymentMethodVirtualAccountRefundStatus,
}

@ description - 가상계좌 환불 상태
enum PaymentMethodVirtualAccountRefundStatus {
  @ description - 처리중
  PENDING,

  @ description - 부분 환불 실패
  PARTIAL_REFUND_FAILED,

  @ description - 환불 실패
  FAILED,

  @ description - 환불 완료
  COMPLETED,
}

@ description - 가상계좌 유형
enum PaymentMethodVirtualAccountType {
  @ description - 고정식
  FIXED,

  @ description - 회전식
  NORMAL,
}

@ description - 결제 건이 존재하지 않는 경우
struct PaymentNotFoundError {
  type: string,
  message?: string,
}

@ description - 결제가 완료되지 않은 경우
struct PaymentNotPaidError {
  type: string,
  message?: string,
}

@ description - 결제 건이 입금 대기 상태가 아닌 경우
struct PaymentNotWaitingForDepositError {
  type: string,
  message?: string,
}

@ description - 상품 정보
struct PaymentProduct {
  @ description - 상품 고유 식별자
  id: string,

  @ description - 상품명
  name: string,

  @ description - 상품 태그
  tag?: string,

  @ description - 상품 코드
  code?: string,

  @ description - 상품 단위가격
  amount: int64,

  @ description - 주문 수량
  quantity: int32,

  @ description - 판매 링크
  link?: string,
}

@ description - 상품 유형
enum PaymentProductType {
  @ description - 실물 상품
  PHYSICAL,

  @ description - 디지털 상품
  DIGITAL,
}

@ description - PaymentReconciliation
@ discriminator - status
oneof PaymentReconciliation {
  @ mapping - INCOMPARABLE
  PaymentReconciliationIncomparable,

  @ mapping - MATCHED
  PaymentReconciliationMatched,

  @ mapping - NOT_COLLECTED
  PaymentReconciliationNotCollected,

  @ mapping - NOT_MATCHED
  PaymentReconciliationNotMatched,

  @ mapping - POST_CORRECTION
  PaymentReconciliationPostCorrection,
}

@ description - 거래상태
enum PaymentReconciliationActionType {
  @ description - 결제 승인
  APPROVAL,

  @ description - 전체 취소
  FULL_CANCEL,

  @ description - 부분 취소
  PARTIAL_CANCEL,

  @ description - 상태 모르는 취소
  UNCLASSIFIED_CANCEL,

  @ description - 후보정
  POST_CORRECTION,
}

@ description - 거래대사용 채널
struct PaymentReconciliationChannel {
  @ description - 채널 키
  channelKey: string,

  @ description - 채널 이름
  channelName: string,

  @ description - PG사 상점 아이디
  pgMerchantId: string,

  @ description - PG사별 크레덴셜
  credential: PaymentReconciliationChannelCredential,

  @ description - 과세 구분
  taxationType?: TaxationType,
}

@ description - PG사별 크레덴셜
@ discriminator - type
oneof PaymentReconciliationChannelCredential {
  @ mapping - DANAL
  PaymentReconciliationDanalCredential,

  @ mapping - EXIMBAY
  PaymentReconciliationEximbayCredential,

  @ mapping - HECTO
  PaymentReconciliationHectoCredential,

  @ mapping - HYPHEN
  PaymentReconciliationHyphenCredential,

  @ mapping - INICIS
  PaymentReconciliationInicisCredential,

  @ mapping - KAKAOPAY
  PaymentReconciliationKakaopayCredential,

  @ mapping - KCP
  PaymentReconciliationKcpCredential,

  @ mapping - KPN
  PaymentReconciliationKpnCredential,

  @ mapping - KSNET
  PaymentReconciliationKsnetCredential,

  @ mapping - NAVERPAY
  PaymentReconciliationNaverpayCredential,

  @ mapping - NICEPAY_HTTP
  PaymentReconciliationNicepayHttpCredential,

  @ mapping - NICEPAY_SFTP
  PaymentReconciliationNicepaySftpCredential,

  @ mapping - PAYCO
  PaymentReconciliationPaycoCredential,

  @ mapping - TOSSPAY
  PaymentReconciliationTosspayCredential,

  @ mapping - TOSSPAYMENTS
  PaymentReconciliationTosspaymentsCredential,

  @ mapping - UPLUS
  PaymentReconciliationUplusCredential,
}

struct PaymentReconciliationChannelInput {
  @ description - 채널 이름
  channelName: string,

  @ description - PG사 상점 아이디
  pgMerchantId: string,

  @ description - PG사별 크레덴셜
  credential: PaymentReconciliationChannelCredential,

  @ description - 과세 구분
  taxationType?: TaxationType,
}

struct PaymentReconciliationCollectionHistory {
  @ description - 수집 이력 건별 고유 아이디
  id: string,

  @ description - 채널키
  channelKey: string,

  @ description - 수집 시각
  collectedAt: datetime,

  @ description - 수집 형태
  collectionType: PaymentReconciliationCollectionType,

  @ description - 수집 대상 일자
  targetDate: date,

  @ description - 수집된 건들의 거래일자
  transactionDates: date[],

  @ description - 일일 자동 수집 여부
  isDaily: boolean,
}

enum PaymentReconciliationCollectionType {
  TRANSACTION,
  SETTLEMENT,
}

@ description - 거래대사 엑셀파일 필드
enum PaymentReconciliationColumn {
  @ description - 거래대사 상태 필드
  RECONCILIATION_STATUS,

  @ description - 거래 상태 필드
  ACTION_TYPE,

  @ description - 대사용 PG사 가맹점 식별자 필드
  RECONCILIATION_PG_SPECIFIER,

  @ description - 포트원 상점 아이디 필드
  STORE_ID,

  @ description - 결제 금액 필드
  PAYMENT_AMOUNT,

  @ description - 면세 금액 필드
  TAX_FREE_AMOUNT,

  @ description - 부가세 필드
  VAT_AMOUNT,

  @ description - 공급가액 필드
  SUPPLY_AMOUNT,

  @ description - 거래이상 금액 필드
  ANOMALY_AMOUNT,

  @ description - 결제 통화 필드
  PAYMENT_CURRENCY,

  @ description - 결제 발생 시간 필드
  PAYMENT_DATETIME,

  @ description - 에스크로건 필드
  IS_ESCROW,

  @ description - 결제 수단 필드
  PAYMENT_METHOD_TYPE,

  @ description - 카드 발급사 필드
  PAYMENT_METHOD_CARD_ISSUER,

  @ description - 카드 매입사 필드
  PAYMENT_METHOD_CARD_ACQUIRER,

  @ description - 카드 승인번호 필드
  PAYMENT_METHOD_CARD_APPROVAL_NUMBER,

  @ description - 상품권 승인번호 필드
  PAYMENT_METHOD_GIFT_CERTIFICATE_APPROVAL_NUMBER,

  @ description - 상품권 타입 필드
  PAYMENT_METHOD_GIFT_CERTIFICATE_TYPE,

  @ description - 모바일 결제 통신사 필드
  PAYMENT_METHOD_MOBILE_CARRIER,

  @ description - 계좌이체 은행 필드
  PAYMENT_METHOD_TRANSFER_BANK,

  @ description - 계좌이체 승인번호 필드
  PAYMENT_METHOD_TRANSFER_APPROVAL_NUMBER,

  @ description - 가상계좌 은행 필드
  PAYMENT_METHOD_VIRTUAL_ACCOUNT_BANK,

  @ description - 가상계좌 승인번호 필드
  PAYMENT_METHOD_VIRTUAL_ACCOUNT_APPROVAL_NUMBER,

  @ description - 간편결제 수단 필드
  PAYMENT_METHOD_EASY_PAY_METHOD,

  @ description - 기타결제 수단 이름 필드
  PAYMENT_METHOD_ETC_NAME,

  @ description - PG사 결제 아이디 필드
  PG_TX_ID,

  @ description - 할부 개월 수 필드
  INSTALLMENT_MONTH,

  @ description - 고객사 거래내역 아이디 필드
  PAYMENT_ID,

  @ description - 포트원 결제 아이디 필드
  TRANSACTION_ID,

  @ description - 결제 주문명 필드
  ORDER_NAME,

  @ description - 거래대사 불일치 필드
  NOT_MATCHED_REASONS,

  @ description - PG 수수료 필드
  SETTLEMENT_FEE,

  @ description - PG 수수료 부가세 필드
  SETTLEMENT_FEE_VAT,

  @ description - 정산금액 필드
  SETTLEMENT_AMOUNT,

  @ description - 정산 통화 필드
  SETTLEMENT_CURRENCY,

  @ description - 정산일 필드
  SETTLEMENT_DATE,
}

struct PaymentReconciliationDanalCredential {
  @ description - 크레덴셜 종류
  type: string,
}

@ description - 필드 중복으로 적용됩니다.
struct PaymentReconciliationExcelFileFilterInput {
  @ description - 거래대사 하위 가맹점 아이디 필터
  storeIds?: string[],

  @ description - 거래대사 결제사(PG) 식별자 필터
  pgSpecifiers?: ReconciliationPgSpecifier[],

  @ description - 거래대사 결제 수단 필터
  paymentMethodTypes?: ReconciliationPaymentMethodType[],

  @ description - 거래대사 대사 상태 필터
  paymentReconciliationStatuses?: PaymentReconciliationStatus[],

  @ description - 거래대사 결제 상태 필터
  actionTypes?: PaymentReconciliationActionType[],

  @ description - 거래대사 결제 통화 필터
  transactionCurrencies?: Currency[],

  @ description - 거래대사 정산 통화 필터
  settlementCurrencies?: Currency[],
}

struct PaymentReconciliationEximbayCredential {
  @ description - 크레덴셜 종류
  type: string,

  secretKey: string,
}

@ description - 필드 중복으로 적용됩니다.
struct PaymentReconciliationFilterInput {
  @ description - 거래대사 하위 가맹점 아이디 필터
  storeIds?: string[],

  @ description - 거래대사 채널 키 필터
  channelKeys?: string[],

  @ description - 거래대사 결제사(PG) 식별자 필터
  pgSpecifiers?: ReconciliationPgSpecifier[],

  @ description - 거래대사 결제 수단 필터
  paymentMethodTypes?: ReconciliationPaymentMethodType[],

  @ description - 거래대사 대사 상태 필터
  paymentReconciliationStatuses?: PaymentReconciliationStatus[],

  @ description - 거래대사 결제 상태 필터
  actionTypes?: PaymentReconciliationActionType[],

  @ description - 거래대사 결제 통화 필터
  transactionCurrencies?: Currency[],

  @ description - 거래대사 정산 통화 필터
  settlementCurrencies?: Currency[],
}

struct PaymentReconciliationHectoCredential {
  @ description - 크레덴셜 종류
  type: string,

  authKey: string,
}

struct PaymentReconciliationHyphenCredential {
  @ description - 크레덴셜 종류
  type: string,
}

struct PaymentReconciliationIncomparable {
  status: string,

  @ description - 거래대사 아이디
  id: string,

  graphqlId: string,
  actionType: PaymentReconciliationActionType,

  @ description - 대사용 PG사 가맹점 식별자
  pgSpecifier: ReconciliationPgSpecifier,

  @ description - 고객사 아이디
  merchantId: string,

  merchantGraphqlId: string,

  @ description - 결제 금액
  paymentAmount: int64,

  @ description - 면세가액
  taxFreeAmount: int64,

  @ description - 부가세
  vatAmount: int64,

  @ description - 공급가액
  supplyAmount: int64,

  @ description - 거래이상 금액
  anomalyAmount: int64,

  @ description - 결제일
  paidAt: datetime,

  @ description - 에스크로 여부
  isEscrow?: boolean,

  @ description - 결제 통화
  paymentCurrency: Currency,

  @ description - 결제수단 상세 정보
  paymentMethod: ReconciliationPaymentMethod,

  @ description - PG사 거래 아이디
  pgTxId: string,

  @ description - 거래건의 정산 정보
  settlement?: Settlement,
}

struct PaymentReconciliationInicisCredential {
  @ description - 크레덴셜 종류
  type: string,

  reconciliationPassword: string,
}

struct PaymentReconciliationKakaopayCredential {
  @ description - 크레덴셜 종류
  type: string,
}

struct PaymentReconciliationKcpCredential {
  @ description - 크레덴셜 종류
  type: string,
}

struct PaymentReconciliationKpnCredential {
  @ description - 크레덴셜 종류
  type: string,
}

struct PaymentReconciliationKsnetCredential {
  @ description - 크레덴셜 종류
  type: string,

  reconciliationApiKey: string,
}

struct PaymentReconciliationMatched {
  status: string,

  @ description - 거래대사 아이디
  id: string,

  graphqlId: string,
  actionType: PaymentReconciliationActionType,

  @ description - 대사용 PG사 가맹점 식별자
  pgSpecifier: ReconciliationPgSpecifier,

  @ description - 고객사 아이디
  merchantId: string,

  merchantGraphqlId: string,

  @ description - 결제 금액
  paymentAmount: int64,

  @ description - 면세가액
  taxFreeAmount: int64,

  @ description - 부가세
  vatAmount: int64,

  @ description - 공급가액
  supplyAmount: int64,

  @ description - 결제일
  paidAt: datetime,

  @ description - 에스크로 여부
  isEscrow?: boolean,

  @ description - 결제 통화
  paymentCurrency: Currency,

  @ description - 결제수단 상세 정보
  paymentMethod: ReconciliationPaymentMethod,

  @ description - PG사 거래 아이디
  pgTxId: string,

  @ description - 거래건의 정산 정보
  settlement?: Settlement,

  @ description - 포트원 결제 아이디
  transactionId: string,

  @ description - 고객사 결제 아이디
  paymentId: string,

  @ description - 주문명
  orderName: string,

  @ description - 하위 가맹점 아이디
  storeId: string,

  storeGraphqlId: string,
}

struct PaymentReconciliationNaverpayCredential {
  @ description - 크레덴셜 종류
  type: string,

  chainId: string,
  clientId: string,
  clientSecret: string,
  apiKeys: string[],
}

struct PaymentReconciliationNicepayHttpCredential {
  @ description - 크레덴셜 종류
  type: string,

  usrId: string,
  merchantKey: string,
}

struct PaymentReconciliationNicepaySftpCredential {
  @ description - 크레덴셜 종류
  type: string,

  sftpUsername: string,
  sftpPassword: string,
}

struct PaymentReconciliationNotCollected {
  status: string,

  @ description - 거래대사 아이디
  id: string,

  graphqlId: string,
  actionType: PaymentReconciliationActionType,

  @ description - 대사용 PG사 가맹점 식별자
  pgSpecifier: ReconciliationPgSpecifier,

  @ description - 고객사 아이디
  merchantId: string,

  merchantGraphqlId: string,

  @ description - 결제 금액
  paymentAmount: int64,

  @ description - 면세가액
  taxFreeAmount: int64,

  @ description - 부가세
  vatAmount: int64,

  @ description - 공급가액
  supplyAmount: int64,

  @ description - 거래이상 금액
  anomalyAmount: int64,

  @ description - 결제일
  paidAt: datetime,

  @ description - 에스크로 여부
  isEscrow?: boolean,

  @ description - 결제 통화
  paymentCurrency: Currency,

  @ description - 결제수단 상세 정보
  paymentMethod: ReconciliationPaymentMethod,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - 거래건의 정산 정보
  settlement?: Settlement,

  @ description - 포트원 결제 아이디
  transactionId?: string,

  @ description - 고객사 결제 아이디
  paymentId?: string,

  @ description - 주문명
  orderName?: string,

  @ description - 하위 가맹점 아이디
  storeId?: string,

  storeGraphqlId?: string,
}

struct PaymentReconciliationNotMatched {
  status: string,

  @ description - 거래대사 아이디
  id: string,

  graphqlId: string,
  actionType: PaymentReconciliationActionType,

  @ description - 대사용 PG사 가맹점 식별자
  pgSpecifier: ReconciliationPgSpecifier,

  @ description - 고객사 아이디
  merchantId: string,

  merchantGraphqlId: string,

  @ description - 결제 금액
  paymentAmount: int64,

  @ description - 면세가액
  taxFreeAmount: int64,

  @ description - 부가세
  vatAmount: int64,

  @ description - 공급가액
  supplyAmount: int64,

  @ description - 거래이상 금액
  anomalyAmount: int64,

  @ description - 결제일
  paidAt: datetime,

  @ description - 에스크로 여부
  isEscrow?: boolean,

  @ description - 결제 통화
  paymentCurrency: Currency,

  @ description - 결제수단 상세 정보
  paymentMethod: ReconciliationPaymentMethod,

  @ description - 포트원 결제 아이디
  transactionId: string,

  @ description - 고객사 결제 아이디
  paymentId: string,

  @ description - PG사 거래 아이디
  pgTxId: string,

  @ description - 거래건의 정산 정보
  settlement?: Settlement,

  @ description - 거래대사 불일치 사유
  notMatchedReasons: PaymentReconciliationNotMatchedReason[],

  @ description - 주문명
  orderName: string,

  @ description - 하위 가맹점 아이디
  storeId: string,

  storeGraphqlId: string,
}

@ description - 거래대사 매치 실패 사유
enum PaymentReconciliationNotMatchedReason {
  @ description - 결제 금액 불일치
  PAYMENT_AMOUNT_NOT_MATCHED,

  @ description - 면세 금액 불일치
  TAX_FREE_AMOUNT_NOT_MATCHED,

  @ description - 부가세 금액 불일치
  VAT_AMOUNT_NOT_MATCHED,

  @ description - 에스크로 여부 불일치
  ESCROW_NOT_MATCHED,

  @ description - 할부 개월 수 불일치
  INSTALLMENT_MONTH_NOT_MATCHED,

  @ description - 결제일자 불일치
  PAYMENT_DATE_NOT_MATCHED,
}

@ description - 필드중 하나만 명시하여야 합니다
struct PaymentReconciliationOrderInput {
  @ description - 정산일 기준 정렬
  settlementDate?: SortOrder,

  @ description - 결제일 기준 정렬
  transactionDate?: SortOrder,

  @ description - 결제 금액 기준 정렬
  transactionAmount?: SortOrder,

  @ description - 거래이상 금액 기준 정렬
  anomalyAmount?: SortOrder,

  @ description - 정산 금액 기준 정렬
  settlementAmount?: SortOrder,
}

struct PaymentReconciliationPaycoCredential {
  @ description - 크레덴셜 종류
  type: string,
}

struct PaymentReconciliationPostCorrection {
  status: string,

  @ description - 거래대사 아이디
  id: string,

  graphqlId: string,
  actionType: PaymentReconciliationActionType,

  @ description - 대사용 PG사 가맹점 식별자
  pgSpecifier: ReconciliationPgSpecifier,

  @ description - 고객사 아이디
  merchantId: string,

  merchantGraphqlId: string,

  @ description - 결제 금액
  paymentAmount: int64,

  @ description - 면세가액
  taxFreeAmount: int64,

  @ description - 부가세
  vatAmount: int64,

  @ description - 공급가액
  supplyAmount: int64,

  @ description - 거래이상 금액
  anomalyAmount: int64,

  @ description - 결제일
  paidAt: datetime,

  @ description - 에스크로 여부
  isEscrow?: boolean,

  @ description - 결제 통화
  paymentCurrency: Currency,

  @ description - 결제수단 상세 정보
  paymentMethod: ReconciliationPaymentMethod,

  @ description - PG사 거래 아이디
  pgTxId?: string,

  @ description - 거래건의 정산 정보
  settlement?: Settlement,

  @ description - 포트원 결제 아이디
  transactionId?: string,

  @ description - 고객사 결제 아이디
  paymentId?: string,

  @ description - 주문명
  orderName?: string,

  @ description - 하위 가맹점 아이디
  storeId?: string,

  storeGraphqlId?: string,
}

@ description - 각 필드 중 하나만 적용 됩니다.
struct PaymentReconciliationSearchConditionInput {
  @ description - 고객사 거래 아이디 필드
  paymentId?: string,

  @ description - 포트원 결제 아이디 필드
  transactionId?: string,

  @ description - PG사 거래 아이디 필드
  pgTxId?: string,

  @ description - 주문명 필드
  orderName?: string,
}

@ description - 거래대사 정산내역 일별 요약
struct PaymentReconciliationSettlementSummary {
  @ description - 정산일
  date: date,

  @ description - 정산 통화
  settlementCurrency: Currency,

  @ description - 결제 통화
  transactionCurrency: Currency,

  @ description - 정산내역 합산 데이터
  aggregate: PaymentReconciliationSettlementSummaryAggregate,

  @ description - 정산내역 일별 상세 데이터 목록
  details: PaymentReconciliationSettlementSummaryDetail[],
}

struct PaymentReconciliationSettlementSummaryAggregate {
  @ description - 정산 금액
  settlementAmount: int64,

  @ description - 정산 건 수
  settlementCount: int64,

  @ description - PG 수수료
  feeAmount: int64,

  @ description - PG 수수료 부가세
  feeVatAmount: int64,

  @ description - 취소 금액
  cancelAmount: int64,

  @ description - 취소 건 수
  cancelCount: int64,

  @ description - 거래 합계 금액
  transactionAmount: int64,

  @ description - 후보정 건 수
  postCorrectionCount: int64,

  @ description - 후보정 금액
  postCorrectionAmount: int64,
}

@ description - 거래대사 정산 요약 내역 엑셀파일 필드
enum PaymentReconciliationSettlementSummaryColumn {
  @ description - 정산일 필드
  SETTLEMENT_DATE,

  @ description - 포트원 상점 아이디 필드
  STORE_ID,

  @ description - 대사용 PG사 가맹점 식별자 필드
  RECONCILIATION_PG_SPECIFIER,

  @ description - 정산건수 필드
  SETTLEMENT_COUNT,

  @ description - 정산금액 필드
  SETTLEMENT_AMOUNT,

  @ description - PG 수수료 필드
  SETTLEMENT_FEE,

  @ description - PG 수수료 부가세 필드
  SETTLEMENT_FEE_VAT,

  @ description - 취소건수 필드
  CANCEL_COUNT,

  @ description - 취소금액 필드
  CANCEL_AMOUNT,

  @ description - 거래금액 필드
  TRANSACTION_AMOUNT,

  @ description - 후보정건수 필드
  POST_CORRECTION_COUNT,

  @ description - 후보정금액 필드
  POST_CORRECTION_AMOUNT,
}

struct PaymentReconciliationSettlementSummaryDetail {
  @ description - 상점 ID
  storeId?: string,

  storeGraphqlId?: string,

  @ description - 대사용 PG사 가맹점 식별자
  pgSpecifier: ReconciliationPgSpecifier,

  @ description - 정산 금액
  settlementAmount: int64,

  @ description - 정산 건 수
  settlementCount: int64,

  @ description - PG 수수료
  feeAmount: int64,

  @ description - PG 수수료 부가세
  feeVatAmount: int64,

  @ description - 취소 금액
  cancelAmount: int64,

  @ description - 취소 건 수
  cancelCount: int64,

  @ description - 거래 합계 금액
  transactionAmount: int64,

  @ description - 후보정 건 수
  postCorrectionCount: int64,

  @ description - 후보정 금액
  postCorrectionAmount: int64,
}

@ description - 필드 중복으로 적용됩니다.
struct PaymentReconciliationSettlementSummaryExcelFileFilterInput {
  @ description - PG사 가맹점 식별자 필터
  pgSpecifiers?: ReconciliationPgSpecifier[],

  @ description - 하위 상점 아이디 필터
  storeIds?: string[],
}

@ description - 거래대사 정산 요약 내역 필터
struct PaymentReconciliationSettlementSummaryFilterInput {
  @ description - PG사 가맹점 식별자 필터
  pgSpecifiers?: ReconciliationPgSpecifier[],

  @ description - 하위 상점 아이디 필터
  storeIds?: string[],
}

struct PaymentReconciliationSettlementSummaryWithCursor {
  item: PaymentReconciliationSettlementSummary,
  cursor: string,
}

@ description - 결제 건의 대사 상태
enum PaymentReconciliationStatus {
  @ description - 대사 매칭 성공 상태
  MATCHED,

  @ description - 대사 매칭 실패 상태
  NOT_MATCHED,

  @ description - 대사 불가능 상태
  INCOMPARABLE,

  @ description - PG사 결제 정보가 수집되지 않은 상태
  NOT_COLLECTED,
}

struct PaymentReconciliationTosspayCredential {
  @ description - 크레덴셜 종류
  type: string,

  apiKey: string,
}

struct PaymentReconciliationTosspaymentsCredential {
  @ description - 크레덴셜 종류
  type: string,

  secretKey: string,
}

@ description - 거래대사 거래내역 일별 요약
struct PaymentReconciliationTransactionSummary {
  @ description - 거래일
  date: date,

  @ description - 거래 통화
  currency: Currency,

  @ description - 거래내역 합산 데이터
  aggregate: PaymentReconciliationTransactionSummaryAggregate,

  @ description - 거래내역 상세 데이터 목록
  details: PaymentReconciliationTransactionSummaryDetail[],
}

struct PaymentReconciliationTransactionSummaryAggregate {
  @ description - 거래 금액
  transactionAmount: int64,

  @ description - 거래 건 수
  transactionCount: int64,

  @ description - 거래 취소 금액
  cancelAmount: int64,

  @ description - 거래 취소 건 수
  cancelCount: int64,

  @ description - 거래 이상 금액
  anomalyAmount: int64,

  @ description - 거래 이상 건 수
  anomalyCount: int64,

  @ description - 대사불일치 건 수
  notMatchedCount: int64,

  @ description - 대사불능 건 수
  incomparableCount: int64,
}

@ description - 거래대사 정산 요약 내역 엑셀파일 필드
enum PaymentReconciliationTransactionSummaryColumn {
  @ description - 거래일 필드
  TRANSACTION_DATE,

  @ description - 대사상태 필드
  RECONCILIATION_STATUS,

  @ description - 포트원 상점 아이디 필드
  STORE_ID,

  @ description - 대사용 PG사 가맹점 식별자 필드
  RECONCILIATION_PG_SPECIFIER,

  @ description - 거래 건수 필드
  TRANSACTION_COUNT,

  @ description - 거래 금액 필드
  TRANSACTION_AMOUNT,

  @ description - 취소 건수 필드
  CANCEL_COUNT,

  @ description - 취소 금액 필드
  CANCEL_AMOUNT,

  @ description - 거래이상 건수 필드
  ANOMALY_COUNT,

  @ description - 거래이상 금액 필드
  ANOMALY_AMOUNT,
}

struct PaymentReconciliationTransactionSummaryDetail {
  @ description - 상점 ID
  storeId?: string,

  storeGraphqlId?: string,

  @ description - 대사용 PG사 가맹점 식별자
  pgSpecifier: ReconciliationPgSpecifier,

  @ description - 거래 금액
  transactionAmount: int64,

  @ description - 거래 건 수
  transactionCount: int64,

  @ description - 거래 취소 금액
  cancelAmount: int64,

  @ description - 거래 취소 건 수
  cancelCount: int64,

  @ description - 거래 이상 금액
  anomalyAmount: int64,

  @ description - 거래 이상 건 수
  anomalyCount: int64,

  @ description - 대사불일치 건 수
  notMatchedCount: int64,

  @ description - 대사불능 건 수
  incomparableCount: int64,
}

@ description - 필드 중복으로 적용됩니다.
struct PaymentReconciliationTransactionSummaryExcelFilterInput {
  @ description - 대사 상태 필터
  reconciliationStatuses?: PaymentReconciliationStatus[],

  @ description - 대사용 PG사 가맹점 식별자 필터
  pgSpecifiers?: ReconciliationPgSpecifier[],

  @ description - 하위 상점 아이디 필터
  storeIds?: string[],
}

@ description - 거래대사 거래내역 필터
struct PaymentReconciliationTransactionSummaryFilterInput {
  @ description - 대사 상태 필터
  reconciliationStatuses?: PaymentReconciliationStatus[],

  @ description - 대사용 PG사 가맹점 식별자 필터
  pgSpecifiers?: ReconciliationPgSpecifier[],

  @ description - 하위 상점 아이디 필터
  storeIds?: string[],
}

struct PaymentReconciliationTransactionSummaryWithCursor {
  item: PaymentReconciliationTransactionSummary,
  cursor: string,
}

struct PaymentReconciliationUplusCredential {
  @ description - 크레덴셜 종류
  type: string,

  mertKey: string,
}

struct PaymentReconciliationWithCursor {
  item: PaymentReconciliation,
  cursor: string,
}

@ description - 결제 예약 건
@ discriminator - status
oneof PaymentSchedule {
  @ description - 결제 실패
  @ mapping - FAILED
  FailedPaymentSchedule,

  @ description - 결제 완료 대기
  @ mapping - PENDING
  PendingPaymentSchedule,

  @ description - 취소된 결제 예약
  @ mapping - REVOKED
  RevokedPaymentSchedule,

  @ description - 결제 예약 완료
  @ mapping - SCHEDULED
  ScheduledPaymentSchedule,

  @ description - 결제 시작
  @ mapping - STARTED
  StartedPaymentSchedule,

  @ description - 결제 성공
  @ mapping - SUCCEEDED
  SucceededPaymentSchedule,
}

@ description - 결제 예약건이 이미 존재하는 경우
struct PaymentScheduleAlreadyExistsError {
  type: string,
  message?: string,
}

@ description - 결제 예약건이 이미 처리된 경우
struct PaymentScheduleAlreadyProcessedError {
  type: string,
  message?: string,
}

@ description - 결제 예약건이 이미 취소된 경우
struct PaymentScheduleAlreadyRevokedError {
  type: string,
  message?: string,
}

@ description - 결제 예약 건 다건 조회를 위한 입력 정보
struct PaymentScheduleFilterInput {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 빌링키
  billingKey?: string,

  @ description - 결제 예정 시점 조건 범위의 시작
  from?: datetime,

  @ description - 결제 예정 시점 조건 범위의 끝
  until?: datetime,

  @ description - 결제 예약 건 상태 리스트
  status?: PaymentScheduleStatus[],

  @ description - 테스트 결제 여부
  isForTest?: boolean,
}

@ description - 결제 예약건이 존재하지 않는 경우
struct PaymentScheduleNotFoundError {
  type: string,
  message?: string,
}

@ description - 결제 예약 건 정렬 기준
enum PaymentScheduleSortBy {
  @ description - 결제 예약 생성 시각
  CREATED_AT,

  @ description - 결제 예정 시각
  TIME_TO_PAY,

  @ description - 예약 결제 시도(성공 / 실패) 시각
  COMPLETED_AT,
}

@ description - 결제 예약 건 다건 조회 시 정렬 조건
struct PaymentScheduleSortInput {
  @ description - 정렬 기준 필드
  by?: PaymentScheduleSortBy,

  @ description - 정렬 순서
  order?: SortOrder,
}

@ description - 결제 예약 건 상태
enum PaymentScheduleStatus {
  @ description - 예약 완료
  SCHEDULED,

  @ description - 결제 시작
  STARTED,

  @ description - 결제 성공
  SUCCEEDED,

  @ description - 결제 실패
  FAILED,

  @ description - 취소된 결제 예약
  REVOKED,

  @ description - 결제 승인 대기
  PENDING,
}

@ description - 결제 예약 건
struct PaymentScheduleSummary {
  @ description - 결제 예약 건 아이디
  id: string,
}

@ description - 결제 건 정렬 기준
enum PaymentSortBy {
  @ description - 결제 요청 시점
  REQUESTED_AT,

  @ description - 상태 변경 시점
  STATUS_CHANGED_AT,
}

@ description - 결제 건 상태
enum PaymentStatus {
  READY,
  PENDING,
  VIRTUAL_ACCOUNT_ISSUED,
  PAID,
  FAILED,
  PARTIAL_CANCELLED,
  CANCELLED,
}

@ description - 통합검색 입력 정보
struct PaymentTextSearch {
  field: PaymentTextSearchField,
  value: string,
}

@ description - 통합검색 항목
enum PaymentTextSearchField {
  ALL,
  PAYMENT_ID,
  TX_ID,
  SCHEDULE_ID,
  FAIL_REASON,
  CARD_ISSUER,
  CARD_ACQUIRER,
  CARD_BIN,
  CARD_NUMBER,
  CARD_APPROVAL_NUMBER,
  CARD_RECEIPT_NAME,
  CARD_INSTALLMENT,
  TRANS_BANK,
  VIRTUAL_ACCOUNT_HOLDER_NAME,
  VIRTUAL_ACCOUNT_BANK,
  VIRTUAL_ACCOUNT_NUMBER,
  PG_MERCHANT_ID,
  PG_TX_ID,
  PG_RECEIPT_ID,
  RECEIPT_APPROVAL_NUMBER,
  PG_CANCELLATION_ID,
  CANCEL_REASON,
  ORDER_NAME,
  CUSTOMER_NAME,
  CUSTOMER_EMAIL,
  CUSTOMER_PHONE_NUMBER,
  CUSTOMER_ADDRESS,
  CUSTOMER_ZIPCODE,
  USER_AGENT,
  BILLING_KEY,
  PROMOTION_ID,
  GIFT_CERTIFICATION_APPROVAL_NUMBER,
}

@ description - 조회 시점 기준
enum PaymentTimestampType {
  @ description - 결제 건 생성 시점
  CREATED_AT,

  @ description - 상태 변경 시점
  STATUS_CHANGED_AT,
}

@ description - 결제 시도
@ discriminator - status
oneof PaymentTransaction {
  @ description - 결제 취소
  @ mapping - CANCELLED
  CancelledPaymentTransaction,

  @ description - 결제 실패
  @ mapping - FAILED
  FailedPaymentTransaction,

  @ description - 결제 완료
  @ mapping - PAID
  PaidPaymentTransaction,

  @ description - 결제 부분 취소
  @ mapping - PARTIAL_CANCELLED
  PartialCancelledPaymentTransaction,

  @ description - 결제 완료 대기
  @ mapping - PAY_PENDING
  PayPendingPaymentTransaction,

  @ description - 결제 준비
  @ mapping - READY
  ReadyPaymentTransaction,

  @ description - 가상계좌 발급 완료
  @ mapping - VIRTUAL_ACCOUNT_ISSUED
  VirtualAccountIssuedPaymentTransaction,
}

@ description - 성공 웹훅 내역
struct PaymentWebhook {
  @ description - 웹훅 발송 시 결제 건 상태
  paymentStatus?: PaymentWebhookPaymentStatus,

  @ description - 웹훅 아이디
  id: string,

  @ description - 웹훅 상태
  status?: PaymentWebhookStatus,

  @ description - 웹훅이 발송된 url
  url: string,

  @ description - 비동기 웹훅 여부
  isAsync?: boolean,

  @ description - 현재 발송 횟수
  currentExecutionCount?: int32,

  @ description - 최대 발송 횟수
  maxExecutionCount?: int32,

  @ description - 웹훅 실행 맥락
  trigger?: PaymentWebhookTrigger,

  @ description - 웹훅 요청 정보
  request?: PaymentWebhookRequest,

  @ description - 웹훅 응답 정보
  response?: PaymentWebhookResponse,

  @ description - 웹훅 처리 시작 시점
  triggeredAt?: datetime,
}

@ description - 웹훅 발송 시 결제 건 상태
enum PaymentWebhookPaymentStatus {
  READY,
  VIRTUAL_ACCOUNT_ISSUED,
  PAID,
  FAILED,
  PARTIAL_CANCELLED,
  CANCELLED,
  PAY_PENDING,
}

@ description - 웹훅 요청 정보
struct PaymentWebhookRequest {
  @ description - 요청 헤더
  header?: string,

  @ description - 요청 본문
  body: string,

  @ description - 요청 시점
  requestedAt?: datetime,
}

@ description - 웹훅 응답 정보
struct PaymentWebhookResponse {
  @ description - 응답 HTTP 코드
  code: string,

  @ description - 응답 헤더
  header: string,

  @ description - 응답 본문
  body: string,

  @ description - 응답 시점
  respondedAt: datetime,
}

@ description - 웹훅 전송 상태
enum PaymentWebhookStatus {
  SUCCEEDED,
  FAILED_NOT_OK_RESPONSE,
  FAILED_UNEXPECTED_ERROR,
}

@ description - 웹훅 실행 트리거
enum PaymentWebhookTrigger {
  MANUAL,
  VIRTUAL_ACCOUNT_DEPOSIT,
  ASYNC_CANCEL_APPROVED,
  ASYNC_CANCEL_FAILED,
  ASYNC_PAY_APPROVED,
  ASYNC_PAY_FAILED,
  DISPUTE_CREATED,
  DISPUTE_RESOLVED,
}

@ description - 결제 건 및 커서 정보
struct PaymentWithCursor {
  @ description - 결제 건 정보
  payment: Payment,

  @ description - 해당 결제 건의 커서 정보
  cursor: string,
}

@ description - PaymentsExcelDownloadError
@ discriminator - type
oneof PaymentsExcelDownloadError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제 완료 대기 상태
struct PendingPaymentSchedule {
  @ description - 결제 예약 건 상태
  status: string,

  @ description - 결제 예약 건 아이디
  id: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 빌링키
  billingKey: string,

  @ description - 주문명
  orderName: string,

  @ description - 문화비 지출 여부
  isCulturalExpense: boolean,

  @ description - 에스크로 결제 여부
  isEscrow: boolean,

  @ description - 고객 정보
  customer: Customer,

  @ description - 사용자 지정 데이터
  customData: string,

  @ description - 결제 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세
  vatAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 할부 개월 수
  installmentMonth?: int32,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 결제 예약 등록 시점
  createdAt: datetime,

  @ description - 결제 예정 시점
  timeToPay: datetime,

  @ description - 결제 시작 시점
  startedAt: datetime,

  @ description - 결제 완료 시점
  completedAt: datetime,
}

@ description - 채널 별 빌링키 발급 응답
@ discriminator - type
oneof PgBillingKeyIssueResponse {
  @ description - 발급 실패 채널 응답
  @ mapping - FAILED
  FailedPgBillingKeyIssueResponse,

  @ description - 발급 성공 채널 응답
  @ mapping - ISSUED
  IssuedPgBillingKeyIssueResponse,
}

@ description - PG사
enum PgCompany {
  INICIS,
  NICE,
  KCP,
  DANAL,
  TOSSPAYMENTS,
  MOBILIANS,
  KICC,
  SMARTRO,
  DAOU,
  BLUEWALNUT,
  PAYPAL,
  ALIPAY,
  EXIMBAY,
  PAYMENTWALL,
  SETTLE,
  GALAXIA,
  NAVERPAY,
  KAKAOPAY,
  SMILEPAY,
  KAKAO,
  TOSSPAY,
  CHAI,
  PAYCO,
  PAYPLE,
  SYRUP,
  KSNET,
  WELCOME,
  JTNET,
  KPN,
  HYPHEN,
}

@ description - PG사 결제 모듈
enum PgProvider {
  HTML5_INICIS,
  PAYPAL,
  PAYPAL_V2,
  INICIS,
  DANAL,
  NICE,
  DANAL_TPAY,
  JTNET,
  UPLUS,
  NAVERPAY,
  KAKAO,
  SETTLE,
  KCP,
  MOBILIANS,
  KAKAOPAY,
  NAVERCO,
  SYRUP,
  KICC,
  EXIMBAY,
  SMILEPAY,
  PAYCO,
  KCP_BILLING,
  ALIPAY,
  PAYPLE,
  CHAI,
  BLUEWALNUT,
  SMARTRO,
  SMARTRO_V2,
  PAYMENTWALL,
  TOSSPAYMENTS,
  KCP_QUICK,
  DAOU,
  GALAXIA,
  TOSSPAY,
  KCP_DIRECT,
  SETTLE_ACC,
  SETTLE_FIRM,
  INICIS_UNIFIED,
  KSNET,
  PINPAY,
  NICE_V2,
  TOSS_BRANDPAY,
  WELCOME,
  TOSSPAY_V2,
  INICIS_V2,
  KPN,
  KCP_V2,
  HYPHEN,
  EXIMBAY_V2,
  INICIS_JP,
}

@ description - PG사에서 오류를 전달한 경우
struct PgProviderError {
  type: string,
  message?: string,
  pgCode: string,
  pgMessage: string,
}

@ description - 고객사의 플랫폼 기능 관련 정보
struct Platform {
  @ description - 해당 플랫폼의 고객사 아이디
  merchantId: string,

  graphqlId: string,

  @ description - 정산 규칙
  settlementRule: PlatformSettlementRule,
}

@ description - `currency` 가 KRW 일 경우 예금주 조회 API 를 통해 올바른 계좌인지 검증합니다. 그 외의 화폐일 경우 따로 검증하지는 않습니다.
struct PlatformAccount {
  @ description - 은행
  bank: Bank,

  @ description - 정산에 사용할 통화
  currency: Currency,

  @ description - 계좌번호
  number: string,

  @ description - 예금주명
  holder: string,

  @ description - 계좌 상태
  status: PlatformAccountStatus,
}

@ description - 예금주 조회 성공 응답 정보
struct PlatformAccountHolder {
  @ description - 계좌 예금주 이름
  holderName: string,

  @ description - 계좌 검증 아이디
  accountVerificationId: string,
}

@ description - 플랫폼 계좌 상태
enum PlatformAccountStatus {
  @ description - 계좌 인증 완료됨
  VERIFIED,

  @ description - 계좌주 불일치
  VERIFY_FAILED,

  @ description - 계좌 인증 오류
  VERIFY_ERROR,

  @ description - 계좌 인증 안됨
  NOT_VERIFIED,

  @ description - 알 수 없는 상태
  UNKNOWN,
}

@ description - 계좌 이체
@ discriminator - type
oneof PlatformAccountTransfer {
  @ mapping - DEPOSIT
  PlatformDepositAccountTransfer,

  @ mapping - PARTNER_PAYOUT
  PlatformPartnerPayoutAccountTransfer,

  @ mapping - REMIT
  PlatformRemitAccountTransfer,
}

struct PlatformAccountTransferFilter {
  @ description - 계좌 이체 유형
  types?: PlatformAccountTransferType[],
}

@ description - 계좌 이체 유형
enum PlatformAccountTransferType {
  @ description - 충전
  DEPOSIT,

  @ description - 파트너 정산 송금
  WITHDRAWAL_PARTNER_PAYOUT,

  @ description - 송금
  WITHDRAWAL_REMIT,
}

@ description - 파트너 계좌 검증 아이디를 이미 사용한 경우
struct PlatformAccountVerificationAlreadyUsedError {
  type: string,
  message?: string,
}

@ description - 파트너 계좌 인증이 실패한 경우
struct PlatformAccountVerificationFailedError {
  type: string,
  message?: string,
}

@ description - 파트너 계좌 검증 아이디를 찾을 수 없는 경우
struct PlatformAccountVerificationNotFoundError {
  type: string,
  message?: string,
}

struct PlatformAdditionalFeePoliciesNotFoundError {
  type: string,
  ids: string[],
  graphqlIds: string[],
  message?: string,
}

@ description - 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
struct PlatformAdditionalFeePolicy {
  @ description - 추가 수수료 정책 고유 아이디
  id: string,

  graphqlId: string,

  @ description - 추가 수수료 정책 이름
  name: string,

  @ description - 책정 수수료
  fee: PlatformFee,

  @ description - 해당 추가 수수료 정책에 대한 메모
  memo?: string,

  @ description - 부가세를 부담할 주체
  vatPayer: PlatformPayer,

  @ description - 보관 여부
  isArchived: boolean,

  @ description - 변경 적용 시점
  appliedAt: datetime,
}

struct PlatformAdditionalFeePolicyAlreadyExistsError {
  type: string,
  message?: string,
}

@ description - 추가 수수료 정책 다건 조회를 위한 필터 조건
struct PlatformAdditionalFeePolicyFilterInput {
  @ description - 보관 조회 여부
  isArchived?: boolean,

  @ description - 금액 부담 주체
  vatPayers?: PlatformPayer[],

  @ description - 검색 키워드
  keyword?: PlatformAdditionalFeePolicyFilterInputKeyword,
}

@ description - 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 추가 수수료 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
struct PlatformAdditionalFeePolicyFilterInputKeyword {
  name?: string,
  id?: string,
  fee?: string,
}

struct PlatformAdditionalFeePolicyNotFoundError {
  type: string,
  message?: string,
}

struct PlatformAdditionalFeePolicyScheduleAlreadyExistsError {
  type: string,
  message?: string,
}

struct PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError {
  type: string,
  id: string,
  graphqlId: string,
  feeCurrency: Currency,
  settlementCurrency: Currency,
  message?: string,
}

enum PlatformAmountExceededType {
  @ description - 할인금액이 주문금액을 초과
  DISCOUNT_THAN_ORDER,

  @ description - 면세 할인금액이 할인금액을 초과
  DISCOUNT_TAX_FREE_THAN_DISCOUNT,

  @ description - 면세 할인금액이 면세 주문금액을 초과
  DISCOUNT_TAX_FREE_THAN_ORDER_TAX_FREE,

  @ description - 면세 결제금액이 결제금액을 초과
  PAYMENT_TAX_FREE_THAN_PAYMENT,
}

@ description - 보관된 추가 수수료 정책을 업데이트하려고 하는 경우
struct PlatformArchivedAdditionalFeePolicyError {
  type: string,
  message?: string,
}

@ description - 보관된 계약을 업데이트하려고 하는 경우
struct PlatformArchivedContractError {
  type: string,
  message?: string,
}

@ description - 보관된 할인 분담 정책을 업데이트하려고 하는 경우
struct PlatformArchivedDiscountSharePolicyError {
  type: string,
  message?: string,
}

@ description - 보관된 파트너를 업데이트하려고 하는 경우
struct PlatformArchivedPartnerError {
  type: string,
  message?: string,
}

@ description - 보관된 파트너들을 예약 업데이트하려고 하는 경우
struct PlatformArchivedPartnersCannotBeScheduledError {
  type: string,
  message?: string,
}

@ description - BTX 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
struct PlatformBtxNotEnabledError {
  type: string,
  message?: string,
}

struct PlatformBulkPayout {
  @ description - 일괄 지급 고유 아이디
  id: string,

  graphqlId: string,
  name: string,
  creatorId: string,
  method: PlatformPayoutMethod,
  arePayoutsGenerated: boolean,
  totalPayoutAmount: int64,
  status: PlatformBulkPayoutStatus,
  payoutStats: PlatformBulkPayoutStats,
  statusUpdatedAt: datetime,
  createdAt: datetime,
  updatedAt: datetime,
  scheduledAt?: datetime,
}

struct PlatformBulkPayoutFilterInput {
  statuses?: PlatformBulkPayoutStatus[],
  methods?: PlatformPayoutMethod[],
  criteria?: PlatformBulkPayoutFilterInputCriteria,
}

struct PlatformBulkPayoutFilterInputCriteria {
  timestampRange?: DateTimeRange,
  bulkPayoutId?: string,
}

@ description - 일괄 지급이 존재하지 않는 경우
struct PlatformBulkPayoutNotFoundError {
  type: string,
  message?: string,
}

struct PlatformBulkPayoutPartnerSettlement {
  bulkPayoutId: string,
  partnerSettlement: PlatformPartnerSettlement,
  isSelected: boolean,
}

@ description - 일괄 지급 정산 내역 필터 입력 정보
struct PlatformBulkPayoutPartnerSettlementsFilterInput {
  @ description - 파트너 아이디
  partnerIds: string[],

  @ description - 정산 상태
  statuses: PlatformPartnerSettlementStatus[],
}

struct PlatformBulkPayoutStats {
  amount: PlatformPayoutStatusStats,
  count: PlatformPayoutStatusStats,
}

enum PlatformBulkPayoutStatus {
  SCHEDULED,
  PREPARING,
  PREPARED,
  ONGOING,
  CANCELLED,
  STOPPED,
  COMPLETED,
}

struct PlatformBulkPayoutStatusStats {
  scheduled: int64,
  preparing: int64,
  prepared: int64,
  ongoing: int64,
  stopped: int64,
  cancelled: int64,
  completed: int64,
}

@ description - 다운로드 할 시트 컬럼
enum PlatformBulkPayoutsSheetField {
  @ description - 일괄 지급 아이디
  BULK_PAYOUT_ID,

  @ description - 일괄 지급 이름
  NAME,

  @ description - 생성자 아이디
  CREATOR_ID,

  @ description - 일괄 지급 방식
  METHOD,

  @ description - 일괄 지급 상태
  STATUS,

  @ description - 총 지급 금액
  TOTAL_PAYOUT_AMOUNT,

  @ description - 일괄 지급 상태 변경 시각
  STATUS_UPDATED_AT,

  @ description - 일괄 지급 생성 시각
  CREATED_AT,

  @ description - 지급 대기 금액
  PAYOUT_PREPARED_AMOUNT,

  @ description - 지급 대기 건수
  PAYOUT_PREPARED_COUNT,

  @ description - 지급 성공 금액
  PAYOUT_SUCCEEDED_AMOUNT,

  @ description - 지급 성공 건수
  PAYOUT_SUCCEEDED_COUNT,

  @ description - 지급 실패 금액
  PAYOUT_FAILED_AMOUNT,

  @ description - 지급 실패 건수
  PAYOUT_FAILED_COUNT,

  @ description - 지급 중단 금액
  PAYOUT_STOPPED_AMOUNT,

  @ description - 지급 중단 건수
  PAYOUT_STOPPED_COUNT,

  @ description - 지급 취소 금액
  PAYOUT_CANCELLED_AMOUNT,

  @ description - 지급 취소 건수
  PAYOUT_CANCELLED_COUNT,
}

struct PlatformBulkTask {
  id: string,
  graphqlId: string,
  status: PlatformBulkTaskStatus,
  type: PlatformBulkTaskType,
  progressStats: PlatformBulkTaskProgressStats,
  isForTest: boolean,
  statusUpdatedAt: datetime,
  createdAt: datetime,
  updatedAt: datetime,
}

struct PlatformBulkTaskProgressStats {
  preparedCount: int64,
  processingCount: int64,
  succeededCount: int64,
  failedCount: int64,
  canceledCount: int64,
}

enum PlatformBulkTaskStatus {
  PREPARED,
  PROCESSING,
  COMPLETED,
  CANCELED,
}

enum PlatformBulkTaskType {
  CREATE_TRANSFERS,
  CREATE_PARTNERS,
  CONNECT_MEMBER_COMPANIES,
  DISCONNECT_MEMBER_COMPANIES,
}

@ description - 플랫폼 사업자 상태
enum PlatformBusinessStatus {
  @ description - 사업 중
  IN_BUSINESS,

  @ description - 폐업
  CLOSED,

  @ description - 휴업
  SUSPENDED,
}

struct PlatformCancelOrderTransfersExistsError {
  type: string,
  message?: string,
}

@ description - 취소 가능한 금액이 초과한 경우
struct PlatformCancellableAmountExceededError {
  type: string,
  cancellableAmount: int64,
  requestAmount: int64,
  amountType: PlatformCancellableAmountType,
  message?: string,
}

@ description - 금액 타입
enum PlatformCancellableAmountType {
  @ description - 공급대가
  SUPPLY_WITH_VAT,

  @ description - 면세 금액
  TAX_FREE,
}

struct PlatformCancellableDiscountAmountExceededError {
  type: string,
  discountSharePolicyId: string,
  discountSharePolicyGraphqlId: string,
  cancellableAmount: int64,
  requestAmount: int64,
  productId?: string,
  message?: string,
}

struct PlatformCancellableDiscountTaxFreeAmountExceededError {
  type: string,
  discountSharePolicyId: string,
  discountSharePolicyGraphqlId: string,
  cancellableAmount: int64,
  requestAmount: int64,
  productId?: string,
  message?: string,
}

struct PlatformCancellableProductQuantityExceededError {
  type: string,
  productId: string,
  cancellableQuantity: int64,
  message?: string,
}

struct PlatformCancellationAndPaymentTypeMismatchedError {
  type: string,
  message?: string,
}

struct PlatformCancellationNotFoundError {
  type: string,
  message?: string,
}

@ description - 예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우
struct PlatformCannotArchiveScheduledAdditionalFeePolicyError {
  type: string,
  message?: string,
}

@ description - 예약된 업데이트가 있는 계약을 보관하려고 하는 경우
struct PlatformCannotArchiveScheduledContractError {
  type: string,
  message?: string,
}

@ description - 예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우
struct PlatformCannotArchiveScheduledDiscountSharePolicyError {
  type: string,
  message?: string,
}

@ description - 예약된 업데이트가 있는 파트너를 보관하려고 하는 경우
struct PlatformCannotArchiveScheduledPartnerError {
  type: string,
  message?: string,
}

@ description - 정산 건 식별에 실패한 경우
struct PlatformCannotSpecifyTransferError {
  type: string,
  message?: string,
}

@ description - 사업자 정보를 찾을 수 없는 경우
struct PlatformCompanyNotFoundError {
  type: string,
  message?: string,
}

struct PlatformCompanyState {
  taxationType: PlatformTaxationType,
  taxationTypeDate?: date,
  businessStatus: PlatformBusinessStatus,
  closedSuspendedDate?: date,
}

@ description - 파트너 사업자 검증 아이디를 이미 사용한 경우
struct PlatformCompanyVerificationAlreadyUsedError {
  type: string,
  message?: string,
}

@ description - 파트너 담당자에게 연락하기 위한 정보들 입니다.
struct PlatformContact {
  @ description - 담당자 이름
  name: string,

  @ description - 담당자 휴대폰 번호
  phoneNumber?: string,

  @ description - 담당자 이메일
  email: string,
}

@ description
| 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
| 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
struct PlatformContract {
  @ description - 계약 고유 아이디
  id: string,

  graphqlId: string,

  @ description - 계약 이름
  name: string,

  @ description - 계약 내부 표기를 위한 메모
  memo?: string,

  @ description - 중개수수료
  platformFee: PlatformFee,

  @ description - 정산 주기
  settlementCycle: PlatformSettlementCycle,

  @ description - 중개수수료에 대한 부가세 부담 주체
  platformFeeVatPayer: PlatformPayer,

  @ description - 정산 시 결제금액 부가세 감액 여부
  subtractPaymentVatAmount: boolean,

  @ description - 보관 여부
  isArchived: boolean,

  @ description - 변경 적용 시점
  appliedAt: datetime,
}

struct PlatformContractAlreadyExistsError {
  type: string,
  message?: string,
}

@ description - 계약 다건 조회를 위한 필터 조건
struct PlatformContractFilterInput {
  @ description - 금액 부담 주체
  platformFeePayers?: PlatformPayer[],

  @ description - 플랫폼 정산 주기 계산 방식
  cycleTypes?: PlatformSettlementCycleType[],

  @ description - 플랫폼 정산 기준일
  datePolicies?: PlatformSettlementCycleDatePolicy[],

  @ description - 보관 조회 여부
  isArchived?: boolean,

  @ description - 검색 키워드
  keyword?: PlatformContractFilterInputKeyword,
}

@ description - 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 계약만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
struct PlatformContractFilterInputKeyword {
  id?: string,
  name?: string,
}

struct PlatformContractNotFoundError {
  type: string,
  message?: string,
}

struct PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError {
  type: string,
  id: string,
  graphqlId: string,
  feeCurrency: Currency,
  settlementCurrency: Currency,
  message?: string,
}

struct PlatformContractScheduleAlreadyExistsError {
  type: string,
  message?: string,
}

struct PlatformContractsNotFoundError {
  type: string,
  ids: string[],
  graphqlIds: string[],
  message?: string,
}

@ description - 지원 되지 않는 통화를 선택한 경우
struct PlatformCurrencyNotSupportedError {
  type: string,
  message?: string,
}

struct PlatformDepositAccountTransfer {
  @ description - 계좌 이체 유형
  type: string,

  @ description - 계좌 이체 아이디
  id: string,

  @ description - 통화
  currency: Currency,

  @ description - 금액
  amount: int64,

  @ description - 입금 계좌 적요
  depositMemo?: string,

  isForTest: boolean,

  @ description - 생성 일자
  createdAt: datetime,

  @ description - 수정 일자
  updatedAt: datetime,

  @ description - 입금자명
  depositorName: string,
}

struct PlatformDiscountSharePoliciesNotFoundError {
  type: string,
  ids: string[],
  graphqlIds: string[],
  message?: string,
}

@ description
| 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
| 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
struct PlatformDiscountSharePolicy {
  id: string,
  graphqlId: string,

  @ description - 할인 분담 정책 이름
  name: string,

  @ description - 할인 분담율
  partnerShareRate: int32,

  @ description - 해당 할인 분담에 대한 메모
  memo?: string,

  @ description - 보관 여부
  isArchived: boolean,

  @ description - 변경 적용 시점
  appliedAt: datetime,
}

struct PlatformDiscountSharePolicyAlreadyExistsError {
  type: string,
  message?: string,
}

@ description - 할인 분담 정책 다건 조회를 위한 필터 조건
struct PlatformDiscountSharePolicyFilterInput {
  @ description - 보관 조회 여부
  isArchived?: boolean,

  partnerShareRates?: int32[],

  @ description - 검색 키워드
  keyword?: PlatformDiscountSharePolicyFilterInputKeyword,
}

@ description - 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 할인 분담 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
struct PlatformDiscountSharePolicyFilterInputKeyword {
  id?: string,
  name?: string,
}

@ description - 할인 분담 정책 필터 옵션 조회 성공 응답 정보
struct PlatformDiscountSharePolicyFilterOptions {
  @ description - 조회된 파트너 분담율 리스트
  partnerShareRates: int32[],
}

struct PlatformDiscountSharePolicyIdDuplicatedError {
  type: string,
  id: string,
  graphqlId: string,
  message?: string,
}

struct PlatformDiscountSharePolicyNotFoundError {
  type: string,
  message?: string,
}

struct PlatformDiscountSharePolicyScheduleAlreadyExistsError {
  type: string,
  message?: string,
}

@ description - 외부 api 오류
struct PlatformExternalApiFailedError {
  type: string,
  message?: string,
}

@ description - 외부 api의 일시적인 오류
struct PlatformExternalApiTemporarilyFailedError {
  type: string,
  message?: string,
}

@ description - 외부 결제 정보
struct PlatformExternalPayment {
  type: string,

  @ description - 결제 아이디
  id: string,

  @ description - 주문 명
  orderName?: string,

  @ description - 통화
  currency: Currency,

  @ description - 결제 수단
  method?: PlatformPaymentMethod,

  @ description - 결제 일시
  paidAt?: datetime,
}

@ description - 플랫폼 중개수수료 정보
@ discriminator - type
oneof PlatformFee {
  @ description - 정액 수수료
  @ mapping - FIXED_AMOUNT
  PlatformFixedAmountFee,

  @ description - 정률 수수료
  @ mapping - FIXED_RATE
  PlatformFixedRateFee,
}

@ description
| 정률 수수료를 설정하고 싶은 경우 `fixedRate` 필드에, 정액 수수료를 설정하고 싶은 경우 `fixedAmount` 필드에 값을 명시해 요청합니다.
| 두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.
struct PlatformFeeInput {
  @ description - 정률 수수료
  fixedRate?: int32,

  @ description - 정액 수수료
  fixedAmount?: int64,
}

@ description - 총 금액에 무관하게 정해진 수수료 금액을 책정합니다.
struct PlatformFixedAmountFee {
  type: string,

  @ description - 고정된 수수료 금액
  amount: int64,
}

@ description - 총 금액에 정해진 비율을 곱한 만큼의 수수료를 책정합니다.
struct PlatformFixedRateFee {
  type: string,

  @ description - 수수료율
  rate: int32,
}

@ description - 공휴일
struct PlatformHoliday {
  @ description - 이름
  name: string,

  @ description - 날짜
  date: date,
}

@ description - 파트너 타입 수정에 필요한 데이터가 부족한 경우
struct PlatformInsufficientDataToChangePartnerTypeError {
  type: string,
  message?: string,
}

@ description - 수기 정산건
struct PlatformManualTransfer {
  type: string,

  @ description - 정산건 아이디
  id: string,

  graphqlId: string,

  @ description - 파트너
  partner: PlatformPartner,

  @ description - 정산 상태
  status: PlatformTransferStatus,

  @ description - 메모
  memo?: string,

  @ description - 정산 일
  settlementDate: date,

  @ description - 정산 통화
  settlementCurrency: Currency,

  payoutId?: string,
  payoutGraphqlId?: string,

  @ description - 테스트 모드 여부
  isForTest: boolean,

  @ description - 사용자 정의 속성
  userDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  @ description - 정산 금액
  settlementAmount: int64,

  @ description - 정산 면세 금액
  settlementTaxFreeAmount: int64,
}

struct PlatformManualTransferSummary {
  type: string,
  id: string,
  graphqlId: string,
  partner: PlatformTransferSummaryPartner,
  status: PlatformTransferStatus,
  memo?: string,
  settlementDate: date,
  settlementCurrency: Currency,
  isForTest: boolean,

  @ description - 사용자 정의 속성
  partnerUserDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  @ description - 사용자 정의 속성
  userDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  settlementAmount: int64,
  settlementTaxFreeAmount: int64,
}

@ description - 연동 사업자로 연동된 파트너의 사업자등록번호를 변경하려고 시도한 경우
struct PlatformMemberCompanyConnectedPartnerBrnUnchangeableError {
  type: string,
  message?: string,
}

@ description - 연동 사업자로 연동된 파트너를 예약 수정하려고 시도한 경우
struct PlatformMemberCompanyConnectedPartnerCannotBeScheduledError {
  type: string,
  message?: string,
}

@ description - 연동 사업자로 연동된 파트너의 파트너 유형을 변경하려고 시도한 경우
struct PlatformMemberCompanyConnectedPartnerTypeUnchangeableError {
  type: string,
  message?: string,
}

@ description - 연동 사업자로 연동된 파트너들을 예약 수정하려고 시도한 경우
struct PlatformMemberCompanyConnectedPartnersCannotBeScheduledError {
  type: string,
  ids: string[],
  graphqlIds: string[],
  message?: string,
}

@ description - 파트너 연동 사업자 연동 상태가 연동 가능한 상태가 아닌 경우
struct PlatformMemberCompanyNotConnectableStatusError {
  type: string,
  message?: string,
}

@ description - 파트너가 연동 사업자로 연동 되어있지 않은 경우
struct PlatformMemberCompanyNotConnectedError {
  type: string,
  message?: string,
}

@ description - 업데이트 불가능한 상태를 업데이트하려는 경우
struct PlatformNonUpdatableStatusError {
  type: string,
  message?: string,
}

@ description - 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
struct PlatformNotEnabledError {
  type: string,
  message?: string,
}

@ description - 지원하지 않는 은행인 경우
struct PlatformNotSupportedBankError {
  type: string,
  message?: string,
}

@ description - 진행 중인 세금계산서가 존재하는 경우
struct PlatformOngoingTaxInvoiceExistsError {
  type: string,
  message?: string,
}

@ description - 주문 취소 정산건
struct PlatformOrderCancelTransfer {
  type: string,

  @ description - 정산건 아이디
  id: string,

  graphqlId: string,

  @ description - 파트너
  partner: PlatformPartner,

  @ description - 정산 상태
  status: PlatformTransferStatus,

  @ description - 메모
  memo?: string,

  @ description - 정산 일
  settlementDate: date,

  @ description - 정산 통화
  settlementCurrency: Currency,

  payoutId?: string,
  payoutGraphqlId?: string,

  @ description - 테스트 모드 여부
  isForTest: boolean,

  @ description - 사용자 정의 속성
  userDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  @ description - 정산 금액 정보
  amount: PlatformOrderSettlementAmount,

  @ description - 계약
  contract: PlatformContract,

  @ description - 결제 정보
  payment: PlatformPayment,

  @ description - 정산 시작일
  settlementStartDate: date,

  @ description - 주문 항목 리스트
  orderLines: PlatformOrderTransferOrderLine[],

  @ description - 정산 금액 계산 시 사용된 추가 수수료 정보
  additionalFees: PlatformOrderTransferAdditionalFee[],

  @ description - 정산 금액 계산 시 사용된 할인 정보
  discounts: PlatformOrderTransferDiscount[],

  @ description - 주문 취소 정보
  cancellation: PlatformOrderTransferCancellation,

  @ description - 정산 파라미터 (실험기능)
  parameters: TransferParameters,
}

struct PlatformOrderCancelTransferSummary {
  type: string,
  id: string,
  graphqlId: string,
  storeId: string,
  partner: PlatformTransferSummaryPartner,
  status: PlatformTransferStatus,
  memo?: string,
  settlementDate: date,
  settlementCurrency: Currency,
  isForTest: boolean,

  @ description - 사용자 정의 속성
  partnerUserDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  @ description - 사용자 정의 속성
  userDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  amount: PlatformOrderSettlementAmount,
  payment: PlatformTransferSummaryPayment,
  settlementStartDate: date,
}

struct PlatformOrderDetailMismatchedError {
  type: string,
  message?: string,
}

@ description - 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
struct PlatformOrderSettlementAmount {
  @ description - 정산 금액
  settlement: int64,

  @ description - 정산 면세 금액
  settlementTaxFree: int64,

  @ description - 결제 금액
  payment: int64,

  @ description - 결제 금액 부가세
  paymentVat: int64,

  @ description - 결제 금액 부가세 부담금액
  paymentVatBurden: int64,

  @ description - 결제 면세 금액
  taxFree: int64,

  @ description - 결제 공급가액
  supply: int64,

  @ description - 결제 면세 금액
  paymentTaxFree: int64,

  @ description - 결제 공급가액
  paymentSupply: int64,

  @ description - 주문 금액
  order: int64,

  @ description - 면세 주문 금액
  orderTaxFree: int64,

  @ description - 중개 수수료
  platformFee: int64,

  @ description - 중개 수수료 부가세
  platformFeeVat: int64,

  @ description - 추가 수수료
  additionalFee: int64,

  @ description - 추가 수수료 부가세
  additionalFeeVat: int64,

  @ description - 할인 금액
  discount: int64,

  @ description - 면세 할인 금액
  discountTaxFree: int64,

  @ description - 할인 분담 금액
  discountShare: int64,

  @ description - 면세 할인 분담 금액
  discountShareTaxFree: int64,

  @ description - 사용자 정의 수식 결과
  userDefinedFormulas: PlatformUserDefinedFormulaResults,
}

@ description - 주문 정산건
struct PlatformOrderTransfer {
  type: string,

  @ description - 정산건 아이디
  id: string,

  graphqlId: string,

  @ description - 파트너
  partner: PlatformPartner,

  @ description - 정산 상태
  status: PlatformTransferStatus,

  @ description - 메모
  memo?: string,

  @ description - 정산 일
  settlementDate: date,

  @ description - 정산 통화
  settlementCurrency: Currency,

  payoutId?: string,
  payoutGraphqlId?: string,

  @ description - 테스트 모드 여부
  isForTest: boolean,

  @ description - 사용자 정의 속성
  userDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  @ description - 정산 금액 정보
  amount: PlatformOrderSettlementAmount,

  @ description - 계약
  contract: PlatformContract,

  @ description - 결제 정보
  payment: PlatformPayment,

  @ description - 정산 시작일
  settlementStartDate: date,

  @ description - 주문 항목 리스트
  orderLines: PlatformOrderTransferOrderLine[],

  @ description - 정산 금액 계산 시 사용된 추가 수수료 정보
  additionalFees: PlatformOrderTransferAdditionalFee[],

  @ description - 정산 금액 계산 시 사용된 할인 정보
  discounts: PlatformOrderTransferDiscount[],

  @ description - 정산 파라미터 (실험기능)
  parameters: TransferParameters,
}

@ description - 추가 수수료 정보
struct PlatformOrderTransferAdditionalFee {
  @ description - 추가 수수료 정책
  policy: PlatformAdditionalFeePolicy,

  @ description - 추가 수수료 금액
  amount: int64,

  @ description - 추가 수수료 부가세 금액
  vat: int64,
}

struct PlatformOrderTransferAlreadyCancelledError {
  type: string,
  message?: string,
}

@ description - 주문 취소 정보
struct PlatformOrderTransferCancellation {
  @ description - 주문 취소 아이디
  id: string,

  @ description - 취소 일시
  cancelledAt: datetime,
}

@ description - 할인 정보
struct PlatformOrderTransferDiscount {
  @ description - 할인 분담 정책
  sharePolicy: PlatformDiscountSharePolicy,

  @ description - 할인 금액
  amount: int64,

  @ description - 면세 할인 금액
  taxFreeAmount: int64,

  @ description - 할인 분담 금액
  shareAmount: int64,

  @ description - 면세 할인 분담 금액
  shareTaxFreeAmount: int64,
}

@ description - 주문 항목
struct PlatformOrderTransferOrderLine {
  @ description - 상품
  product: PlatformOrderTransferProduct,

  @ description - 상품 수량
  quantity: int32,

  @ description - 상품 할인 정보
  discounts: PlatformOrderTransferDiscount[],

  @ description - 상품 추가 수수료 정보
  additionalFees: PlatformOrderTransferAdditionalFee[],

  @ description - 상품 정산 금액 정보
  amount: PlatformOrderSettlementAmount,
}

@ description - 상품
struct PlatformOrderTransferProduct {
  @ description - 상품 아이디
  id: string,

  @ description - 상품 이름
  name: string,

  @ description - 상품 금액
  amount: int64,

  @ description - 상품 면세 금액
  taxFreeAmount: int64,

  @ description - 태그
  tag?: string,
}

struct PlatformOrderTransferSummary {
  type: string,
  id: string,
  graphqlId: string,
  storeId: string,
  partner: PlatformTransferSummaryPartner,
  status: PlatformTransferStatus,
  memo?: string,
  settlementDate: date,
  settlementCurrency: Currency,
  isForTest: boolean,

  @ description - 사용자 정의 속성
  partnerUserDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  @ description - 사용자 정의 속성
  userDefinedProperties: PlatformUserDefinedPropertyKeyValue[],

  amount: PlatformOrderSettlementAmount,
  payment: PlatformTransferSummaryPayment,
  settlementStartDate: date,
}

@ description
| 파트너는 고객사가 정산해주어야 할 대상입니다.
| 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
struct PlatformPartner {
  @ description - 파트너 고유 아이디
  id: string,

  graphqlId: string,

  @ description - 파트너 법인명 혹은 이름
  name: string,

  @ description - 파트너 담당자 연락 정보
  contact: PlatformContact,

  @ description - 정산 계좌
  account: PlatformAccount,

  @ description - 파트너의 상태
  status: PlatformPartnerStatus,

  @ description - 파트너에 설정된 기본 계약 아이디
  defaultContractId: string,

  @ description - 파트너에 대한 메모
  memo?: string,

  @ description - 파트너의 태그 리스트
  tags: string[],

  @ description - 파트너 유형별 정보
  type: PlatformPartnerType,

  @ description - 보관 여부
  isArchived: boolean,

  @ description - 변경 적용 시점
  appliedAt: datetime,

  @ description - 사용자 정의 속성
  userDefinedProperties: PlatformProperties,
}

@ description - 플랫폼 파트너 사업자 상태
enum PlatformPartnerBusinessStatus {
  @ description - 조회 되지 않음
  NOT_VERIFIED,

  @ description - 조회 오류
  VERIFY_ERROR,

  @ description - 대응되는 사업자 없음
  NOT_FOUND,

  @ description - 사업 중
  IN_BUSINESS,

  @ description - 폐업
  CLOSED,

  @ description - 휴업
  SUSPENDED,
}

@ description - 파트너 계약 요약 정보
struct PlatformPartnerContractSummary {
  @ description - 계약 고유 아이디
  id: string,

  @ description - 계약 이름
  name: string,
}

@ description - 파트너 현황 조회 성공 응답
struct PlatformPartnerDashboard {
  @ description - 전체 파트너 현황
  totalPartner: PlatformPartnerDashboardCount,

  @ description - 정산 예정인 파트너 현황
  upcomingSettledPartner: PlatformPartnerDashboardCount,

  @ description - 예정된 정산일
  upcomingSettlementDate?: date,
}

@ description - 파트너 현황 정보
struct PlatformPartnerDashboardCount {
  @ description - 보관된 파트너를 포함한 전체 파트너 수
  total: int32,

  @ description - 보관된 파트너 수
  archived: int32,
}

@ description - 파트너 필터 입력 정보
struct PlatformPartnerFilterInput {
  @ description - 보관 조회 여부
  isArchived?: boolean,

  tags?: string[],

  @ description - 은행
  banks?: Bank[],

  @ description - 통화 단위
  accountCurrencies?: Currency[],

  ids?: string[],
  contractIds?: string[],

  @ description - 플랫폼 계좌 상태
  accountStatuses?: PlatformAccountStatus[],

  @ description - 플랫폼 파트너 사업자 상태
  businessStatuses?: PlatformPartnerBusinessStatus[],

  @ description - 플랫폼 파트너 유형 이름
  types?: PlatformPartnerTypeName[],

  @ description - 플랫폼 파트너 과세 유형
  taxationTypes?: PlatformPartnerTaxationType[],

  @ description - 플랫폼 파트너 연동 사업자 연결 상태
  memberCompanyConnectionStatuses?: PlatformPartnerMemberCompanyConnectionStatus[],

  @ description - 검색 키워드
  keyword?: PlatformPartnerFilterInputKeyword,
}

@ description - 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 파트너만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
struct PlatformPartnerFilterInputKeyword {
  id?: string,
  name?: string,
  email?: string,
  businessRegistrationNumber?: string,
  defaultContractId?: string,
  memo?: string,
  accountNumber?: string,
  accountHolder?: string,
}

@ description - 파트너 필터 옵션 조회 성공 응답 정보
struct PlatformPartnerFilterOptions {
  @ description - 조회된 태그 리스트
  tags: string[],

  @ description - 조회된 파트너 계약 요약 정보 리스트
  contractSummary: PlatformPartnerContractSummary[],
}

struct PlatformPartnerIdAlreadyExistsError {
  type: string,
  message?: string,
}

struct PlatformPartnerIdsAlreadyExistError {
  type: string,
  ids: string[],
  graphqlIds: string[],
  message?: string,
}

struct PlatformPartnerIdsDuplicatedError {
  type: string,
  ids: string[],
  graphqlIds: string[],
  message?: string,
}

struct PlatformPartnerManualSettlement {
  type: string,

  @ description - 정산내역 아이디
  id: string,

  graphqlId: string,

  @ description - 파트너
  partner: PlatformPartner,

  @ description - 정산 일
  settlementDate: date,

  @ description - 정산 통화
  settlementCurrency: Currency,

  @ description - 정산 상태
  status: PlatformPartnerSettlementStatus,

  @ description - 메모
  memo?: string,

  @ description - 정산 금액
  amount: int64,

  @ description - 정산 면세 금액
  taxFreeAmount: int64,

  @ description - 테스트 모드 여부
  isForTest: boolean,
}

@ description - 플랫폼 파트너 연동 사업자 연결 상태
enum PlatformPartnerMemberCompanyConnectionStatus {
  @ description - 연결되지 않음
  NOT_CONNECTED,

  @ description - 연결 대기
  CONNECT_PENDING,

  @ description - 연결됨
  CONNECTED,

  @ description - 연결 실패
  CONNECT_FAILED,

  @ description - 연결 해제 대기
  DISCONNECT_PENDING,
}

struct PlatformPartnerNotFoundError {
  type: string,
  message?: string,
}

struct PlatformPartnerOrderCancelSettlement {
  type: string,

  @ description - 정산내역 아이디
  id: string,

  graphqlId: string,

  @ description - 파트너
  partner: PlatformPartner,

  @ description - 정산 일
  settlementDate: date,

  @ description - 정산 통화
  settlementCurrency: Currency,

  @ description - 정산 상태
  status: PlatformPartnerSettlementStatus,

  @ description - 메모
  memo?: string,

  @ description - 계약
  contract: PlatformContract,

  @ description - 정산 시작 일 범위
  settlementStartDateRange: DateRange,

  @ description - 금액 정보
  amount: PlatformOrderSettlementAmount,

  @ description - 테스트 모드 여부
  isForTest: boolean,
}

struct PlatformPartnerOrderSettlement {
  type: string,

  @ description - 정산내역 아이디
  id: string,

  graphqlId: string,

  @ description - 파트너
  partner: PlatformPartner,

  @ description - 정산 일
  settlementDate: date,

  @ description - 정산 통화
  settlementCurrency: Currency,

  @ description - 정산 상태
  status: PlatformPartnerSettlementStatus,

  @ description - 메모
  memo?: string,

  @ description - 계약
  contract: PlatformContract,

  @ description - 정산 시작 일 범위
  settlementStartDateRange: DateRange,

  @ description - 금액 정보
  amount: PlatformOrderSettlementAmount,

  @ description - 테스트 모드 여부
  isForTest: boolean,
}

struct PlatformPartnerPayoutAccountTransfer {
  @ description - 계좌 이체 유형
  type: string,

  @ description - 계좌 이체 아이디
  id: string,

  @ description - 거래 일련번호
  sequenceNumber: int32,

  @ description - 통화
  currency: Currency,

  @ description - 입금 계좌 은행
  depositBank: Bank,

  @ description - 입금 계좌 번호
  depositAccountNumber: string,

  @ description - 금액
  amount: int64,

  @ description - 출금 계좌 적요
  withdrawalMemo?: string,

  @ description - 입금 계좌 적요
  depositMemo?: string,

  @ description - 잔액
  balance?: int64,

  @ description - 실패 사유
  failReason?: string,

  isForTest: boolean,

  @ description - 생성 일자
  createdAt: datetime,

  @ description - 수정 일자
  updatedAt: datetime,

  @ description - 파트너 고유 아이디
  partnerId: string,

  partnerGraphqlId: string,

  @ description - 일괄 지급 고유 아이디
  bulkPayoutId: string,

  bulkPayoutGraphqlId: string,

  @ description - 지급 고유 아이디
  payoutId: string,

  payoutGraphqlId: string,
}

struct PlatformPartnerScheduleAlreadyExistsError {
  type: string,
  message?: string,
}

@ description - 파트너 수정 예약 건이 존재하는 경우
struct PlatformPartnerScheduleExistsError {
  type: string,
  message?: string,
}

struct PlatformPartnerSchedulesAlreadyExistError {
  type: string,
  ids: string[],
  graphqlIds: string[],
  message?: string,
}

@ description - PlatformPartnerSettlement
@ discriminator - type
oneof PlatformPartnerSettlement {
  @ mapping - MANUAL
  PlatformPartnerManualSettlement,

  @ mapping - ORDER
  PlatformPartnerOrderSettlement,

  @ mapping - ORDER_CANCEL
  PlatformPartnerOrderCancelSettlement,
}

@ description - 정산내역 대시보드
struct PlatformPartnerSettlementDashboard {
  @ description - 정산 통화별 정산내역 통계 리스트
  currencyStats: PlatformPartnerSettlementDashboardCurrencyStat[],
}

@ description - 정산 통화별 정산내역 통계
struct PlatformPartnerSettlementDashboardCurrencyStat {
  @ description - 정산 통화
  currency: Currency,

  @ description - 총 정산 금액
  settlementAmount: int64,

  @ description - 총 주문 금액
  orderAmount: int64,

  @ description - 총 정산 수수료 금액
  feeAmount: int64,

  @ description - 총 수기 정산 금액
  manualAmount: int64,

  @ description - 상태별 총 정산 금액
  statusSettlementAmount: PlatformPartnerSettlementStatusStats,
}

struct PlatformPartnerSettlementFilterInput {
  settlementDates?: date[],
  contractIds?: string[],
  partnerTags?: string[],

  @ description - 통화 단위
  settlementCurrencies?: Currency[],

  @ description - 정산 상태
  statuses?: PlatformPartnerSettlementStatus[],

  partnerIds?: string[],

  @ description - 정산 유형
  settlementTypes?: PlatformPartnerSettlementType[],

  keyword?: PlatformPartnerSettlementFilterKeywordInput,
}

struct PlatformPartnerSettlementFilterKeywordInput {
  partnerSettlementId?: string,
  payoutId?: string,
  bulkPayoutId?: string,
}

@ description - 정산내역을 찾을 수 없는 경우
struct PlatformPartnerSettlementNotFoundError {
  type: string,
  message?: string,
}

@ description - 다운로드 할 시트 컬럼
enum PlatformPartnerSettlementSheetField {
  @ description - 정산내역 아이디
  PARTNER_SETTLEMENT_ID,

  @ description - 정산내역 상태
  STATUS,

  @ description - 파트너 아이디
  PARTNER_ID,

  @ description - 파트너 이름
  PARTNER_NAME,

  @ description - 파트너 계좌 번호
  PARTNER_ACCOUNT_NUMBER,

  @ description - 파트너 계좌 은행
  PARTNER_ACCOUNT_BANK,

  @ description - 계약 아이디
  CONTRACT_ID,

  @ description - 계약 이름
  CONTRACT_NAME,

  @ description - 정산 유형
  SETTLEMENT_TYPE,

  @ description - 정산 일
  SETTLEMENT_DATE,

  @ description - 정산 시작 일 범위
  SETTLEMENT_START_DATE_RANGE,

  @ description - 정산 통화
  SETTLEMENT_CURRENCY,

  @ description - 정산 금액
  SETTLEMENT_AMOUNT,

  @ description - 정산 면세 금액
  SETTLEMENT_TAX_FREE_AMOUNT,

  @ description - 주문 금액
  SETTLEMENT_ORDER_AMOUNT,

  @ description - 면세 주문 금액
  SETTLEMENT_ORDER_TAX_FREE_AMOUNT,

  @ description - 결제 금액
  SETTLEMENT_PAYMENT_AMOUNT,

  @ description - 결제 금액 부가세
  SETTLEMENT_PAYMENT_VAT_AMOUNT,

  @ description - 결제 금액 부가세 부담금
  SETTLEMENT_PAYMENT_VAT_BURDEN_AMOUNT,

  @ description - 결제 공급가액
  SETTLEMENT_PAYMENT_SUPPLY_AMOUNT,

  @ description - 결제 면세액
  SETTLEMENT_PAYMENT_TAX_FREE_AMOUNT,

  @ description - 중개 수수료
  SETTLEMENT_PLATFORM_FEE_AMOUNT,

  @ description - 중개 수수료 부가세
  SETTLEMENT_PLATFORM_FEE_VAT_AMOUNT,

  @ description - 할인 금액
  SETTLEMENT_DISCOUNT_AMOUNT,

  @ description - 면세 할인 금액
  SETTLEMENT_DISCOUNT_TAX_FREE_AMOUNT,

  @ description - 할인 분담금
  SETTLEMENT_DISCOUNT_SHARE_AMOUNT,

  @ description - 면세 할인 분담금
  SETTLEMENT_DISCOUNT_SHARE_TAX_FREE_AMOUNT,

  @ description - 추가 수수료
  SETTLEMENT_ADDITIONAL_FEE_AMOUNT,

  @ description - 추가 수수료 부가세
  SETTLEMENT_ADDITIONAL_FEE_VAT_AMOUNT,

  @ description - 메모
  MEMO,

  @ description - 파트너 유형
  PARTNER_TYPE,

  @ description - 과세 유형
  TAXATION_TYPE,

  @ description - 소득 유형
  INCOME_TYPE,

  @ description - 과세 유형 또는 소득 유형
  TAXATION_TYPE_OR_INCOME_TYPE,
}

@ description - 정산 상태
enum PlatformPartnerSettlementStatus {
  @ description - 지급 예약
  PAYOUT_SCHEDULED,

  @ description - 지급 예정
  PAYOUT_PREPARED,

  @ description - 지급 보류
  PAYOUT_WITHHELD,

  @ description - 지급 실패
  PAYOUT_FAILED,

  @ description - 지급 중
  IN_PAYOUT,

  @ description - 지급 완료
  PAID_OUT,
}

struct PlatformPartnerSettlementStatusStats {
  payoutScheduled: int64,
  payoutPrepared: int64,
  payoutWithheld: int64,
  payoutFailed: int64,
  inPayout: int64,
  paidOut: int64,
}

@ description - 정산 유형
enum PlatformPartnerSettlementType {
  @ description - 수동 정산
  MANUAL,

  @ description - 주문 정산
  ORDER,

  @ description - 주문 취소 정산
  ORDER_CANCEL,
}

@ description - 플랫폼 파트너 상태
enum PlatformPartnerStatus {
  @ description - 승인 대기 중
  PENDING,

  @ description - 승인 완료
  APPROVED,

  @ description - 승인 거절
  REJECTED,
}

@ description - 플랫폼 파트너 과세 유형
enum PlatformPartnerTaxationType {
  @ description - 일반 과세
  NORMAL,

  @ description - 간이과세(세금계산서 발행)
  SIMPLE_TAX_INVOICE_ISSUER,

  @ description - 간이과세(세금계산서 미발행)
  SIMPLE,

  @ description - 면세
  TAX_FREE,
}

@ description - 파트너의 과세 유형이 간이 과세 세금계산서 미발행 유형인 경우
struct PlatformPartnerTaxationTypeIsSimpleError {
  type: string,
  message?: string,
}

@ description - 파트너 유형별 추가 정보
@ discriminator - type
oneof PlatformPartnerType {
  @ description - 사업자 파트너 정보
  @ mapping - BUSINESS
  PlatformPartnerTypeBusiness,

  @ description - 원천징수 비대상자 파트너 정보
  @ mapping - NON_WHT_PAYER
  PlatformPartnerTypeNonWhtPayer,

  @ description - 원천징수 대상자 파트너 정보
  @ mapping - WHT_PAYER
  PlatformPartnerTypeWhtPayer,
}

@ description - 사업자 유형의 파트너 추가 정보 입니다.
struct PlatformPartnerTypeBusiness {
  type: string,

  @ description - 상호명
  companyName: string,

  @ description - 과세 유형
  taxationType: PlatformPartnerTaxationType,

  @ description - 사업자 상태
  businessStatus: PlatformPartnerBusinessStatus,

  @ description - 사업자등록번호
  businessRegistrationNumber: string,

  @ description - 대표자 이름
  representativeName: string,

  @ description - 사업장 주소
  companyAddress?: string,

  @ description - 업태
  businessType?: string,

  @ description - 업종
  businessClass?: string,

  @ description - 연동사업자 연동 상태
  memberCompanyConnectionStatus: PlatformPartnerMemberCompanyConnectionStatus,

  @ description - 연동사업자 연동 실패 사유
  memberCompanyConnectionFailedReason?: string,
}

@ description - 파트너 유형이 사업자가 아닌 경우
struct PlatformPartnerTypeIsNotBusinessError {
  type: string,
  message?: string,
}

@ description - 플랫폼 파트너 유형 이름
enum PlatformPartnerTypeName {
  @ description - 사업자
  BUSINESS,

  @ description - 원천징수 대상자
  WHT_PAYER,

  @ description - 원천징수 비대상자
  NON_WHT_PAYER,
}

@ description - 비사업자 유형의 파트너 추가 정보 입니다.
struct PlatformPartnerTypeNonWhtPayer {
  type: string,

  @ description - 생년월일
  birthdate?: date,
}

@ description - 비사업자 유형의 파트너 추가 정보 입니다.
struct PlatformPartnerTypeWhtPayer {
  type: string,

  @ description - 생년월일
  birthdate?: date,
}

@ description - 금액 부담 주체
enum PlatformPayer {
  @ description - 파트너가 부담하는 경우
  PARTNER,

  @ description - 고객사가 부담하는 경우
  MERCHANT,
}

@ description - 결제 정보
@ discriminator - type
oneof PlatformPayment {
  @ description - 외부 결제 정보
  @ mapping - EXTERNAL
  PlatformExternalPayment,

  @ description - 포트원 결제 정보
  @ mapping - PORT_ONE
  PlatformPortOnePayment,
}

@ description - 채널
struct PlatformPaymentChannel {
  @ description - 채널 아이디
  id: string,

  @ description - 채널 키
  key: string,

  @ description - 채널 이름
  name: string,

  @ description - PG사 가맹점 식별 아이디
  pgMerchantId: string,

  @ description - PG사
  pgCompany?: PgCompany,
}

@ description - 결제 수단
@ discriminator - type
oneof PlatformPaymentMethod {
  @ description - 카드
  @ mapping - CARD
  PlatformPaymentMethodCard,

  @ description - 간편 결제
  @ mapping - EASY_PAY
  PlatformPaymentMethodEasyPay,

  @ description - 상품권
  @ mapping - GIFT_CERTIFICATE
  PlatformPaymentMethodGiftCertificate,

  @ description - 모바일
  @ mapping - MOBILE
  PlatformPaymentMethodMobile,

  @ description - 계좌이체
  @ mapping - TRANSFER
  PlatformPaymentMethodTransfer,

  @ description - 가상계좌
  @ mapping - VIRTUAL_ACCOUNT
  PlatformPaymentMethodVirtualAccount,
}

@ description - 카드
struct PlatformPaymentMethodCard {
  type: string,
}

struct PlatformPaymentMethodCardInput {}

@ description - 간편 결제
struct PlatformPaymentMethodEasyPay {
  type: string,

  @ description - 간편 결제사
  provider?: EasyPayProvider,

  @ description - 간편 결제 수단
  methodType?: EasyPayMethodType,
}

@ description - 간편 결제 입력 정보
struct PlatformPaymentMethodEasyPayInput {
  @ description - 간편 결제사
  provider?: EasyPayProvider,

  @ description - 간편 결제 수단
  methodType?: EasyPayMethodType,
}

@ description - 상품권
struct PlatformPaymentMethodGiftCertificate {
  type: string,
}

struct PlatformPaymentMethodGiftCertificateInput {}

@ description - 결제 수단 입력 정보
struct PlatformPaymentMethodInput {
  @ description - 카드
  card?: PlatformPaymentMethodCardInput,

  @ description - 계좌이체
  transfer?: PlatformPaymentMethodTransferInput,

  @ description - 가상계좌
  virtualAccount?: PlatformPaymentMethodVirtualAccountInput,

  @ description - 상품권
  giftCertificate?: PlatformPaymentMethodGiftCertificateInput,

  @ description - 모바일
  mobile?: PlatformPaymentMethodMobileInput,

  @ description - 간편 결제
  easyPay?: PlatformPaymentMethodEasyPayInput,
}

@ description - 모바일
struct PlatformPaymentMethodMobile {
  type: string,
}

struct PlatformPaymentMethodMobileInput {}

@ description - 계좌이체
struct PlatformPaymentMethodTransfer {
  type: string,
}

struct PlatformPaymentMethodTransferInput {}

@ description - 가상계좌
struct PlatformPaymentMethodVirtualAccount {
  type: string,
}

struct PlatformPaymentMethodVirtualAccountInput {}

struct PlatformPaymentNotFoundError {
  type: string,
  message?: string,
}

struct PlatformPayout {
  @ description - 지급 고유 아이디
  id: string,

  graphqlId: string,
  method: PlatformPayoutMethod,
  status: PlatformPayoutStatus,
  statusUpdatedAt: datetime,
  memo?: string,
  partner: PlatformPartner,
  account: PlatformPayoutAccount,
  currency: Currency,

  @ description - 지급금액
  amount: int64,

  @ description - 공급가액
  supplyAmount: int64,

  @ description - 면세 금액
  taxFreeAmount: int64,

  @ description - 부가세
  vatAmount: int64,

  @ description - 정산 금액
  settlementAmount: int64,

  @ description - 정산 면세 금액
  settlementTaxFreeAmount: int64,

  @ description - 원천징수세액 (소득세)
  incomeTaxAmount: int64,

  @ description - 원천징수세액 (지방소득세)
  localIncomeTaxAmount: int64,

  withdrawalMemo?: string,
  depositMemo?: string,
  createdAt: datetime,
  scheduledAt?: datetime,
}

struct PlatformPayoutAccount {
  bank: Bank,
  number: string,
  holder: string,
}

@ description - 지급 내역 필터 입력 정보
struct PlatformPayoutFilterInput {
  @ description - 지급 상태
  statuses?: PlatformPayoutStatus[],

  @ description - 파트너 아이디
  partnerIds?: string[],

  @ description - 조회 기준
  criteria: PlatformPayoutFilterInputCriteria,

  @ description - 지급 계좌 은행
  payoutAccountBanks?: Bank[],

  @ description - 파트너 태그
  partnerTags?: string[],

  @ description - 지급 통화
  payoutCurrencies?: Currency[],
}

@ description - 검색 기준 입력 정보
struct PlatformPayoutFilterInputCriteria {
  @ description - 생성 시간 범위
  timestampRange?: DateTimeRange,

  @ description - 상태값 업데이트 시간 범위
  statusUpdatedTimestampRange?: DateTimeRange,

  @ description - 지급 아이디
  payoutId?: string,

  @ description - 일괄 지급 아이디
  bulkPayoutId?: string,
}

enum PlatformPayoutMethod {
  DIRECT,
  AGENCY,
}

struct PlatformPayoutNotFoundError {
  type: string,
  message?: string,
}

enum PlatformPayoutStatus {
  PREPARED,
  CANCELLED,
  STOPPED,
  PROCESSING,
  SUCCEEDED,
  FAILED,
  SCHEDULED,
}

struct PlatformPayoutStatusStats {
  prepared: int64,
  cancelled: int64,
  stopped: int64,
  processing: int64,
  succeeded: int64,
  failed: int64,
  scheduled: int64,
}

@ description - 다운로드 할 시트 컬럼
enum PlatformPayoutsSheetField {
  @ description - 지급 아이디
  PAYOUT_ID,

  @ description - 지급 방식
  METHOD,

  @ description - 지급 상태
  STATUS,

  @ description - 상태 업데이트 시각
  STATUS_UPDATED_AT,

  @ description - 지급 예약 시각
  SCHEDULED_AT,

  @ description - 파트너 아이디
  PARTNER_ID,

  @ description - 파트너 이름
  PARTNER_NAME,

  @ description - 지급 계좌 은행
  ACCOUNT_BANK,

  @ description - 지급 계좌 번호
  ACCOUNT_NUMBER,

  @ description - 지급 계좌 예금주
  ACCOUNT_HOLDER,

  @ description - 지급 통화
  CURRENCY,

  @ description - 지급 금액
  AMOUNT,

  @ description - 정산 금액
  SETTLEMENT_AMOUNT,

  @ description - 정산 면세 금액
  SETTLEMENT_TAX_FREE_AMOUNT,

  @ description - 확정 부가세
  VAT_AMOUNT,

  @ description - 확정 공급가액
  SUPPLY_AMOUNT,

  @ description - 확정 면세 금액
  TAX_FREE_AMOUNT,

  @ description - 소득세
  INCOME_TAX_AMOUNT,

  @ description - 지방 소득세
  LOCAL_INCOME_TAX_AMOUNT,

  @ description - 출금 메모
  WITHDRAWAL_MEMO,

  @ description - 입금 메모
  DEPOSIT_MEMO,

  @ description - 메모
  MEMO,

  @ description - 지급 생성 시각
  CREATED_AT,

  @ description - 파트너 유형
  PARTNER_TYPE,

  @ description - 과세 유형
  TAXATION_TYPE,

  @ description - 소득 유형
  INCOME_TYPE,

  @ description - 과세 유형 또는 소득 유형
  TAXATION_TYPE_OR_INCOME_TYPE,
}

@ description - 포트원 결제 정보
struct PlatformPortOnePayment {
  type: string,

  @ description - 결제 아이디
  id: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 채널 키
  channelKey: string,

  @ description - 주문 명
  orderName: string,

  @ description - 결제 수단
  method?: PlatformPaymentMethod,

  @ description - 통화
  currency: Currency,

  @ description - 결제 일시
  paidAt: datetime,
}

@ description - 금액 타입
enum PlatformPortOnePaymentCancelAmountType {
  @ description - 공급대가
  SUPPLY_WITH_VAT,

  @ description - 면세 금액
  TAX_FREE,
}

struct PlatformProductIdDuplicatedError {
  type: string,
  id: string,
  message?: string,
}

struct PlatformProductIdNotFoundError {
  type: string,
  id: string,
  message?: string,
}

custom PlatformProperties = PlatformUserDefinedPropertyValue[string]

struct PlatformRemitAccountTransfer {
  @ description - 계좌 이체 유형
  type: string,

  @ description - 계좌 이체 아이디
  id: string,

  @ description - 거래 일련번호
  sequenceNumber: int32,

  @ description - 통화
  currency: Currency,

  @ description - 입금 계좌 은행
  depositBank: Bank,

  @ description - 입금 계좌 번호
  depositAccountNumber: string,

  @ description - 금액
  amount: int64,

  @ description - 출금 계좌 적요
  withdrawalMemo?: string,

  @ description - 입금 계좌 적요
  depositMemo?: string,

  @ description - 잔액
  balance?: int64,

  @ description - 실패 사유
  failReason?: string,

  isForTest: boolean,

  @ description - 생성 일자
  createdAt: datetime,

  @ description - 수정 일자
  updatedAt: datetime,

  @ description - 전자서명 아이디
  documentId: string,
}

@ description - 플랫폼 설정
struct PlatformSetting {
  @ description - 기본 보내는 이 통장 메모
  defaultWithdrawalMemo?: string,

  @ description - 기본 받는 이 통장 메모
  defaultDepositMemo?: string,
}

@ description - 정산 가능한 금액을 초과한 경우
struct PlatformSettlementAmountExceededError {
  type: PlatformAmountExceededType,
  message?: string,

  @ description - 상품 아이디
  productId?: string,

  @ description - 요청 받은 금액
  requestedAmount: int64,

  @ description - 초과한 금액
  allowedAmount: int64,
}

@ description - 정산 취소 요청 금액이 포트원 결제 취소 내역의 취소 금액을 초과한 경우
struct PlatformSettlementCancelAmountExceededPortOneCancelError {
  type: string,
  registeredSettlementCancelAmount: int64,
  requestSettlementCancelAmount: int64,
  portOneCancelAmount: int64,
  amountType: PlatformPortOnePaymentCancelAmountType,
  message?: string,
}

@ description - 지체일, 정산일, 기준일로 구성되며, 해당 요소들의 조합으로 실제 정산일을 계산합니다.
struct PlatformSettlementCycle {
  @ description - 지체일 (d+n 의 n)
  lagDays: int32,

  @ description - 기준일로, 정산일 계산 시 공휴일을 고려하기 위한 정보입니다.
  datePolicy: PlatformSettlementCycleDatePolicy,

  @ description - 정산 주기 계산 방식
  method: PlatformSettlementCycleMethod,
}

@ description - 플랫폼 정산 기준일
enum PlatformSettlementCycleDatePolicy {
  @ description - 공휴일 전 영업일
  HOLIDAY_BEFORE,

  @ description - 공휴일 후 영업일
  HOLIDAY_AFTER,

  @ description - 달력일
  CALENDAR_DAY,
}

@ description - 플랫폼 정산 주기 입력 정보
struct PlatformSettlementCycleInput {
  @ description - 지체일 (d+n 의 n)
  lagDays: int32,

  @ description - 기준일로, 정산일 계산 시 공휴일을 고려하기 위한 정보입니다.
  datePolicy: PlatformSettlementCycleDatePolicy,

  @ description - 정산 주기 계산 방식
  method: PlatformSettlementCycleMethodInput,
}

@ description - 플랫폼 정산 주기 계산 방식
@ discriminator - type
oneof PlatformSettlementCycleMethod {
  @ description - 매일 정산
  @ mapping - DAILY
  PlatformSettlementCycleMethodDaily,

  @ description - 정해진 날짜(월, 일)에 정산
  @ mapping - MANUAL_DATES
  PlatformSettlementCycleMethodManualDates,

  @ description - 매월 정해진 날(일)에 정산
  @ mapping - MONTHLY
  PlatformSettlementCycleMethodMonthly,

  @ description - 매주 정해진 요일에 정산
  @ mapping - WEEKLY
  PlatformSettlementCycleMethodWeekly,
}

@ description - 매일 정산
struct PlatformSettlementCycleMethodDaily {
  type: string,
}

struct PlatformSettlementCycleMethodDailyInput {}

@ description - 하나의 하위 필드에만 값을 명시하여 요청합니다.
struct PlatformSettlementCycleMethodInput {
  @ description - 매일 정산
  daily?: PlatformSettlementCycleMethodDailyInput,

  @ description - 매주 정해진 요일에 정산
  weekly?: PlatformSettlementCycleMethodWeeklyInput,

  @ description - 매월 정해진 날(일)에 정산
  monthly?: PlatformSettlementCycleMethodMonthlyInput,

  @ description - 정해진 날짜(월, 일)에 정산
  manualDates?: PlatformSettlementCycleMethodManualDatesInput,
}

@ description - 정해진 날짜(월, 일)에 정산
struct PlatformSettlementCycleMethodManualDates {
  type: string,

  @ description - 월 및 일자 정보
  dates: MonthDay[],
}

struct PlatformSettlementCycleMethodManualDatesInput {
  @ description - 월 및 일자 정보
  dates: MonthDay[],
}

@ description - 매월 정해진 날(일)에 정산
struct PlatformSettlementCycleMethodMonthly {
  type: string,
  daysOfMonth: int32[],
}

struct PlatformSettlementCycleMethodMonthlyInput {
  daysOfMonth: int32[],
}

@ description - 매주 정해진 요일에 정산
struct PlatformSettlementCycleMethodWeekly {
  type: string,

  @ description - 요일
  daysOfWeek: DayOfWeek[],
}

struct PlatformSettlementCycleMethodWeeklyInput {
  @ description - 요일
  daysOfWeek: DayOfWeek[],
}

@ description - 플랫폼 정산 주기 계산 방식
enum PlatformSettlementCycleType {
  @ description - 매일 정산
  DAILY,

  @ description - 매주 정해진 요일에 정산
  WEEKLY,

  @ description - 매월 정해진 날(일)에 정산
  MONTHLY,

  @ description - 정해진 날짜(월, 일)에 정산
  MANUAL_DATES,
}

@ description - 정산 파라미터가 존재하지 않는 경우
struct PlatformSettlementParameterNotFoundError {
  type: string,
  message?: string,
}

@ description - 플랫폼 정산 파라미터 값
struct PlatformSettlementParameterValue {
  @ description - 크기가 조정되지 않은 숫자
  decimal: int64,

  @ description - 소수 자리수
  decimalScale?: int32,
}

@ description - 정산 요청 결제 금액이 포트원 결제 내역의 결제 금액을 초과한 경우
struct PlatformSettlementPaymentAmountExceededPortOnePaymentError {
  type: string,
  registeredSettlementPaymentAmount: int64,
  requestSettlementPaymentAmount: int64,
  portOnePaymentAmount: int64,
  message?: string,
}

@ description - 플랫폼 정산건 처리 방식에 관한 규칙
struct PlatformSettlementRule {
  @ description - paymentId, storeId, partnerId가 같은 주문 정산건에 대한 중복 정산 지원 여부
  supportsMultipleOrderTransfersPerPartner: boolean,

  @ description - 정산일이 정산시작일보다 작거나 같을 경우 공휴일 후 영업일로 정산일 다시 계산 여부
  adjustSettlementDateAfterHolidayIfEarlier: boolean,

  @ description - 지급 금액에서 원천징수세 차감 여부
  subtractWhtInPayoutAmount: boolean,
}

@ description - 정산 요청 공급대가가 포트원 결제 내역의 공급대가를 초과한 경우
struct PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError {
  type: string,
  registeredSettlementSupplyWithVatAmount: int64,
  requestSettlementSupplyWithVatAmount: int64,
  portOneSupplyWithVatAmount: int64,
  message?: string,
}

@ description - 정산 요청 면세 금액이 포트원 결제 내역의 면세 금액을 초과한 경우
struct PlatformSettlementTaxFreeAmountExceededPortOnePaymentError {
  type: string,
  registeredSettlementTaxFreeAmount: int64,
  requestSettlementTaxFreeAmount: int64,
  portOneTaxFreeAmount: int64,
  message?: string,
}

@ description - 처리 대상 파트너가 존재하지 않는 경우
struct PlatformTargetPartnerNotFoundError {
  type: string,
  message?: string,
}

@ description - 플랫폼 과세 유형
enum PlatformTaxationType {
  @ description - 일반 과세
  NORMAL,

  @ description - 간이과세(세금계산서 발행)
  SIMPLE_TAX_INVOICE_ISSUER,

  @ description - 간이과세(세금계산서 미발행)
  SIMPLE,

  @ description - 면세
  TAX_FREE,

  @ description - 고유 번호 부여 사업자 (비영리, 국가 등 납세 의무가 없는)
  ASSIGNED_ID_NUMBER,

  @ description - 과세 특례자
  SPECIAL,
}

@ description - 정산건
@ discriminator - type
oneof PlatformTransfer {
  @ description - 수기 정산건
  @ mapping - MANUAL
  PlatformManualTransfer,

  @ description - 주문 정산건
  @ mapping - ORDER
  PlatformOrderTransfer,

  @ description - 주문 취소 정산건
  @ mapping - ORDER_CANCEL
  PlatformOrderCancelTransfer,
}

struct PlatformTransferAlreadyExistsError {
  type: string,
  transferId: string,
  transferGraphqlId: string,
  message?: string,
}

struct PlatformTransferDashboard {
  totalSettlementAmount: int64,
  totalSettlementFeeAmount: int64,
  totalOrderAmount: int64,
  settlementStartDateRange?: DateRange,
}

struct PlatformTransferDiscountSharePolicyNotFoundError {
  type: string,
  discountSharePolicyId: string,
  discountSharePolicyGraphqlId: string,
  productId?: string,
  message?: string,
}

@ description - 정산 시작일 범위와 정산 일 범위는 둘 중 하나만 입력 가능합니다.
struct PlatformTransferFilterInput {
  @ description - 정산 시작일 범위
  settlementStartDateRange?: DateRange,

  @ description - 정산 일 범위
  settlementDateRange?: DateRange,

  @ description - 파트너 태그 리스트
  partnerTags?: string[],

  @ description - 계약 아이디 리스트
  contractIds?: string[],

  @ description - 할인 분담 정책 아이디 리스트
  discountSharePolicyIds?: string[],

  @ description - 추가 수수료 정책 아이디 리스트
  additionalFeePolicyIds?: string[],

  @ description - 결제 수단 리스트
  paymentMethodTypes?: PaymentMethodType[],

  @ description - 채널 키 리스트
  channelKeys?: string[],

  @ description - 정산 방식 리스트
  types?: PlatformTransferType[],

  @ description - 정산 상태 리스트
  statuses?: PlatformTransferStatus[],

  @ description - 검색 키워드
  keyword?: PlatformTransferFilterInputKeyword,

  @ description - 테스트 모드 여부
  isForTest?: boolean,
}

@ description - 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 정산건만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
struct PlatformTransferFilterInputKeyword {
  all?: string,
  paymentId?: string,
  transferId?: string,
  transferMemo?: string,
  productId?: string,
  productName?: string,
  partnerId?: string,
  partnerName?: string,
  partnerMemo?: string,
}

struct PlatformTransferFilterOptions {
  partnerTags: string[],
  contractIds: string[],
  additionalFeePolicyIds: string[],
  discountSharePolicyIds: string[],

  @ description - 채널
  paymentChannels: PlatformPaymentChannel[],
}

struct PlatformTransferNonDeletableStatusError {
  type: string,
  message?: string,
}

struct PlatformTransferNotFoundError {
  type: string,
  message?: string,
}

@ description - 다운로드 할 시트 컬럼
enum PlatformTransferSheetField {
  @ description - 정산 건 상태
  STATUS,

  @ description - 정산 건 아이디
  TRANSFER_ID,

  @ description - 파트너 이름
  PARTNER_NAME,

  @ description - 정산 일
  SETTLEMENT_DATE,

  @ description - 정산 시작 일
  SETTLEMENT_START_DATE,

  @ description - 정산 구분
  TYPE,

  @ description - 결제 내역 아이디
  PAYMENT_ID,

  @ description - 주문 명
  ORDER_NAME,

  @ description - 결제 수단
  PAYMENT_METHOD,

  @ description - 정산 금액
  SETTLEMENT_AMOUNT,

  @ description - 정산 면세 금액
  SETTLEMENT_TAX_FREE_AMOUNT,

  @ description - 주문 금액
  SETTLEMENT_ORDER_AMOUNT,

  @ description - 면세 주문 금액
  SETTLEMENT_ORDER_TAX_FREE_AMOUNT,

  @ description - 결제 금액
  SETTLEMENT_PAYMENT_AMOUNT,

  @ description - 결제 금액 부가세
  SETTLEMENT_PAYMENT_VAT_AMOUNT,

  @ description - 결제 금액 부가세 부담금
  SETTLEMENT_PAYMENT_VAT_BURDEN_AMOUNT,

  @ description - 결제 공급가액
  SETTLEMENT_PAYMENT_SUPPLY_AMOUNT,

  @ description - 결제 면세액
  SETTLEMENT_PAYMENT_TAX_FREE_AMOUNT,

  @ description - 중개 수수료
  SETTLEMENT_PLATFORM_FEE_AMOUNT,

  @ description - 중개 수수료 부가세
  SETTLEMENT_PLATFORM_FEE_VAT_AMOUNT,

  @ description - 할인 금액
  SETTLEMENT_DISCOUNT_AMOUNT,

  @ description - 면세 할인 금액
  SETTLEMENT_DISCOUNT_TAX_FREE_AMOUNT,

  @ description - 할인 분담금
  SETTLEMENT_DISCOUNT_SHARE_AMOUNT,

  @ description - 면세 할인 분담금
  SETTLEMENT_DISCOUNT_SHARE_TAX_FREE_AMOUNT,

  @ description - 추가 수수료
  SETTLEMENT_ADDITIONAL_FEE_AMOUNT,

  @ description - 추가 수수료 부가세
  SETTLEMENT_ADDITIONAL_FEE_VAT_AMOUNT,

  @ description - 정산 통화
  SETTLEMENT_CURRENCY,

  @ description - 파트너 유형
  PARTNER_TYPE,

  @ description - 파트너 과세 유형
  PARTNER_TAXATION_TYPE,

  @ description - 파트너 소득 유형
  PARTNER_INCOME_TYPE,

  @ description - 파트너 과세 유형 또는 소득 유형
  PARTNER_TAXATION_TYPE_OR_INCOME_TYPE,

  @ description - 파트너 아이디
  PARTNER_ID,

  @ description - 메모
  MEMO,
}

@ description - 정산 상태
enum PlatformTransferStatus {
  @ description - 정산 예약
  SCHEDULED,

  @ description - 정산 중
  IN_PROCESS,

  @ description - 정산 완료
  SETTLED,

  @ description - 지급 중
  IN_PAYOUT,

  @ description - 지급 완료
  PAID_OUT,
}

@ description - PlatformTransferSummary
@ discriminator - type
oneof PlatformTransferSummary {
  @ mapping - MANUAL
  PlatformManualTransferSummary,

  @ mapping - ORDER
  PlatformOrderTransferSummary,

  @ mapping - ORDER_CANCEL
  PlatformOrderCancelTransferSummary,
}

struct PlatformTransferSummaryExternalPayment {
  type: string,
  id: string,
  orderName?: string,
  currency: Currency,
  methodType?: PaymentMethodType,
}

struct PlatformTransferSummaryPartner {
  id: string,
  graphqlId: string,
  name: string,
  type: PlatformTransferSummaryPartnerType,
  taxationType?: PlatformPartnerTaxationType,
}

@ description - 파트너 유형
enum PlatformTransferSummaryPartnerType {
  @ description - 사업자
  BUSINESS,

  @ description - 원천징수 대상자
  WHT_PAYER,

  @ description - 원천징수 비대상자
  NON_WHT_PAYER,
}

@ description - PlatformTransferSummaryPayment
@ discriminator - type
oneof PlatformTransferSummaryPayment {
  @ mapping - EXTERNAL
  PlatformTransferSummaryExternalPayment,

  @ mapping - PORT_ONE
  PlatformTransferSummaryPortOnePayment,
}

struct PlatformTransferSummaryPortOnePayment {
  type: string,
  id: string,
  orderName: string,
  currency: Currency,
  methodType?: PaymentMethodType,
}

enum PlatformTransferType {
  ORDER,
  ORDER_CANCEL,
  MANUAL,
}

custom PlatformUserDefinedFormulaResults = int64[string]

@ description - 사용자 정의 속성
struct PlatformUserDefinedPropertyKeyValue {
  @ description - 사용자 정의 속성 키
  key: string,

  @ description - 사용자 정의 속성 값
  value: PlatformUserDefinedPropertyValue,
}

@ description - 사용자 정의 속성이 존재 하지 않는 경우
struct PlatformUserDefinedPropertyNotFoundError {
  type: string,
  message?: string,
}

struct PlatformUserDefinedPropertyValue {
  string: string,
}

@ description - 포트원 버전
enum PortOneVersion {
  V1,
  V2,
}

@ description - 결제 정보 사전 등록 입력 정보
struct PreRegisterPaymentBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 결제 총 금액
  totalAmount?: int64,

  @ description - 결제 면세 금액
  taxFreeAmount?: int64,

  @ description - 통화 단위
  currency?: Currency,
}

@ description - PreRegisterPaymentError
@ discriminator - type
oneof PreRegisterPaymentError {
  @ mapping - ALREADY_PAID
  AlreadyPaidError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제 사전 등록 성공 응답
struct PreRegisterPaymentResponse {}

@ description - 프로모션
@ discriminator - type
oneof Promotion {
  @ description - 카드 프로모션
  @ mapping - CARD
  CardPromotion,
}

struct PromotionAmountDiscountScheme {
  @ description - 프로모션 할인 유형
  type: string,

  amount: int64,
}

@ description - 프로모션 적용 가능한 카드사
enum PromotionCardCompany {
  @ description - 우리카드
  WOORI_CARD,

  @ description - BC카드
  BC_CARD,

  @ description - 삼성카드
  SAMSUNG_CARD,

  @ description - 신한카드
  SHINHAN_CARD,

  @ description - 현대카드
  HYUNDAI_CARD,

  @ description - 롯데카드
  LOTTE_CARD,

  @ description - NH카드
  NH_CARD,

  @ description - 하나카드
  HANA_CARD,

  @ description - 국민카드
  KOOKMIN_CARD,
}

@ description - 금액 구간별 프로모션 할인 정책
struct PromotionDiscountPartition {
  amountFrom: int64,
  scheme: PromotionDiscountScheme,
}

@ description - 프로모션 할인 정책
struct PromotionDiscountPolicy {
  @ description - 금액 구간별 프로모션 할인 정책
  partitions: PromotionDiscountPartition[],
}

enum PromotionDiscountRetainOption {
  RETAIN,
  RELEASE,
}

@ description - 프로모션 혜택 유지 옵션을 이전 부분 취소와 다른 것으로 입력한 경우
struct PromotionDiscountRetainOptionShouldNotBeChangedError {
  type: string,
  message?: string,
}

@ description - PromotionDiscountScheme
@ discriminator - type
oneof PromotionDiscountScheme {
  @ description - 정액 할인
  @ mapping - AMOUNT
  PromotionAmountDiscountScheme,

  @ description - 정률 할인
  @ mapping - PERCENT
  PromotionPercentDiscountScheme,
}

@ description - 프로모션 그룹이 존재하지 않는 경우
struct PromotionGroupNotFoundError {
  type: string,
  message?: string,
}

@ description - 프로모션 그룹 (프로모션 정보 포함)
struct PromotionGroupVerbose {
  @ description - 프로모션 그룹 아이디
  id: string,

  @ description - 프로모션 그룹 이름
  name: string,

  @ description - 카드사별로 지정된 프로모션 정보
  promotions: Promotion[],
}

@ description - 프로모션이 존재하지 않는 경우
struct PromotionNotFoundError {
  type: string,
  message?: string,
}

@ description - 결제수단이 프로모션에 지정된 것과 일치하지 않는 경우
struct PromotionPayMethodDoesNotMatchError {
  type: string,
  message?: string,
}

struct PromotionPercentDiscountScheme {
  @ description - 프로모션 할인 유형
  type: string,

  percent: int32,
}

@ description - PromotionRecoverOption
@ discriminator - type
oneof PromotionRecoverOption {
  @ description - 결제 취소 시 프로모션 예산 미복구
  @ mapping - NO_RECOVER
  PromotionRecoverOptionNoRecover,

  @ description - 결제 취소 시 프로모션 예산 복구
  @ mapping - RECOVER
  PromotionRecoverOptionRecover,
}

@ description - 결제 취소 시 프로모션 예산 미복구
struct PromotionRecoverOptionNoRecover {
  @ description - 결제 취소 시 프로모션 예산 복구 옵션
  type: string,

  spareBudget?: PromotionSpareBudget,
}

@ description - 결제 취소 시 프로모션 예산 복구
struct PromotionRecoverOptionRecover {
  @ description - 결제 취소 시 프로모션 예산 복구 옵션
  type: string,
}

@ description - PromotionSpareBudget
@ discriminator - type
oneof PromotionSpareBudget {
  @ description - 추가 예산 금액
  @ mapping - AMOUNT
  PromotionSpareBudgetAmount,

  @ description - 추가 예산 비율
  @ mapping - PERCENT
  PromotionSpareBudgetPercent,
}

struct PromotionSpareBudgetAmount {
  @ description - 환불 대비용 프로모션 추가 예산
  type: string,

  amount: int64,
}

struct PromotionSpareBudgetPercent {
  @ description - 환불 대비용 프로모션 추가 예산
  type: string,

  percent: int32,
}

enum PromotionStatus {
  @ description - 예정됨
  SCHEDULED,

  @ description - 진행중
  IN_PROGRESS,

  @ description - 일시 중지됨
  PAUSED,

  @ description - 예산 소진됨
  BUDGET_EXHAUSTED,

  @ description - 중단됨
  TERMINATED,

  @ description - 완료됨
  COMPLETED,
}

enum PromotionTimeRangeField {
  @ description - 프로모션 생성 시각
  CREATED_AT,

  @ description - 프로모션 시작 시각
  START_AT,
}

@ description - PromotionsExcelDownloadError
@ discriminator - type
oneof PromotionsExcelDownloadError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 준비 상태의 본인인증 내역
struct ReadyIdentityVerification {
  @ description - 본인인증 상태
  status: string,

  @ description - 본인인증 내역 아이디
  id: string,

  @ description - 사용된 본인인증 채널
  channel?: SelectedChannel,

  @ description - 요청 시 고객 정보
  requestedCustomer: IdentityVerificationRequestedCustomer,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 본인인증 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 포트원 버전
  version: PortOneVersion,
}

@ description - 준비 상태 건
struct ReadyPayment {
  @ description - 결제 건 상태
  status: string,

  @ description - 결제 건 아이디
  id: string,

  @ description - 결제 건 포트원 채번 아이디
  transactionId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel?: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제의 배송 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,
}

@ description - 준비 상태 건
struct ReadyPaymentTransaction {
  @ description - 결제 시도 상태
  status: string,

  @ description - 결제 시도 아이디 (transactionId)
  id: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel?: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제의 배송 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,
}

@ description - 필드 중 하나만 적용됩니다.
struct ReconciliationDateConditionInput {
  @ description - 정산일 범위
  settlementDateRange?: DateRange,

  @ description - 결제일 범위
  transactionDateRange?: DateRange,
}

@ description - ReconciliationEasyPayMethod
@ discriminator - type
oneof ReconciliationEasyPayMethod {
  @ description - 카드 결제
  @ mapping - CARD
  ReconciliationPaymentMethodCard,

  @ description - 간편결제 충전
  @ mapping - CHARGE
  ReconciliationPaymentMethodCharge,

  @ description - 기타 결제
  @ mapping - ETC
  ReconciliationPaymentMethodEtc,

  @ description - 모바일 결제
  @ mapping - MOBILE
  ReconciliationPaymentMethodMobile,

  @ description - 계좌이체
  @ mapping - TRANSFER
  ReconciliationPaymentMethodTransfer,

  @ description - 가상계좌 결제
  @ mapping - VIRTUAL_ACCOUNT
  ReconciliationPaymentMethodVirtualAccount,
}

@ description - 대사용 간편 결제 PG사
enum ReconciliationEasyPayProvider {
  PAYCO,
  SAMSUNGPAY,
  SSGPAY,
  KAKAOPAY,
  NAVERPAY,
  CHAI,
  LPAY,
  KPAY,
  TOSSPAY,
  TOSS_BRANDPAY,
  LGPAY,
  APPLEPAY,
  PINPAY,
  SKPAY,
  WECHATPAY,
  PAYPAL,
  ALIPAY,
  KB_APP,
  TMONEYPAY,
  HYPHEN,
  OK_CASHBAG,
  BENEPIA,
}

@ description - ReconciliationPaymentMethod
@ discriminator - type
oneof ReconciliationPaymentMethod {
  @ description - ARS 결제
  @ mapping - ARS
  ReconciliationPaymentMethodArs,

  @ description - 카드 결제
  @ mapping - CARD
  ReconciliationPaymentMethodCard,

  @ description - 간편결제 충전
  @ mapping - CHARGE
  ReconciliationPaymentMethodCharge,

  @ description - 간편 결제
  @ mapping - EASY_PAY
  ReconciliationPaymentMethodEasyPay,

  @ description - 기타 결제
  @ mapping - ETC
  ReconciliationPaymentMethodEtc,

  @ description - 상품권 결제
  @ mapping - GIFT_CERTIFICATE
  ReconciliationPaymentMethodGiftCertificate,

  @ description - 모바일 결제
  @ mapping - MOBILE
  ReconciliationPaymentMethodMobile,

  @ description - 계좌이체
  @ mapping - TRANSFER
  ReconciliationPaymentMethodTransfer,

  @ description - 가상계좌 결제
  @ mapping - VIRTUAL_ACCOUNT
  ReconciliationPaymentMethodVirtualAccount,
}

@ description - ARS 결제
struct ReconciliationPaymentMethodArs {
  @ description - 대사용 결제 수단
  type: string,
}

@ description - 카드 결제
struct ReconciliationPaymentMethodCard {
  @ description - 대사용 결제 수단
  type: string,

  @ description - 카드 발급사
  issuer?: CardCompany,

  @ description - 카드 매입사
  acquirer?: CardCompany,

  @ description - 카드 승인 번호
  approvalNumber?: string,

  @ description - 카드 할부 개월 수
  installmentMonth?: int32,
}

@ description - 간편결제 충전
struct ReconciliationPaymentMethodCharge {
  @ description - 간편결제 결제 수단
  type: string,
}

@ description - 간편 결제
struct ReconciliationPaymentMethodEasyPay {
  @ description - 대사용 결제 수단
  type: string,

  @ description - 간편 결제 PG사
  provider?: ReconciliationEasyPayProvider,

  @ description - 간편 결제 결제 수단
  method?: ReconciliationEasyPayMethod,
}

@ description - 기타 결제
struct ReconciliationPaymentMethodEtc {
  @ description - 대사용 결제 수단
  type: string,

  @ description - 기타 결제 이름
  name: string,
}

@ description - 상품권 결제
struct ReconciliationPaymentMethodGiftCertificate {
  @ description - 대사용 결제 수단
  type: string,

  @ description - 상품권 승인 번호
  approvalNumber?: string,

  @ description - 상품권 종류
  giftCertificateType?: GiftCertificateType,
}

@ description - 모바일 결제
struct ReconciliationPaymentMethodMobile {
  @ description - 대사용 결제 수단
  type: string,

  @ description - 통신사
  carrier?: Carrier,
}

@ description - 계좌이체
struct ReconciliationPaymentMethodTransfer {
  @ description - 대사용 결제 수단
  type: string,

  @ description - 계좌 이체 은행
  bank?: Bank,

  @ description - 계좌 이체 승인 번호
  approvalNumber?: string,
}

@ description - 대사용 결제수단 목록
enum ReconciliationPaymentMethodType {
  @ description - 카드
  CARD,

  @ description - 간편결제 충전
  CHARGE,

  @ description - 계좌이체
  TRANSFER,

  @ description - ARS
  ARS,

  @ description - 상품권
  GIFT_CERTIFICATE,

  @ description - 모바일
  MOBILE,

  @ description - 가상계좌
  VIRTUAL_ACCOUNT,

  @ description - 기타 결제수단
  ETC,

  @ description - 기타 간편결제
  EASY_PAY_ETC,

  @ description - 페이코 간편결제
  EASY_PAY_PAYCO,

  @ description - 삼성페이 간편결제
  EASY_PAY_SAMSUNGPAY,

  @ description - SSG페이 간편결제
  EASY_PAY_SSGPAY,

  @ description - 카카오페이 간편결제
  EASY_PAY_KAKAOPAY,

  @ description - 네이버페이 간편결제
  EASY_PAY_NAVERPAY,

  @ description - 차이페이 간편결제
  EASY_PAY_CHAI,

  @ description - 엘페이 간편결제
  EASY_PAY_LPAY,

  @ description - 케이페이 간편결제
  EASY_PAY_KPAY,

  @ description - 토스페이 간편결제
  EASY_PAY_TOSSPAY,

  @ description - 엘지페이 간편결제
  EASY_PAY_LGPAY,

  @ description - 애플페이 간편결제
  EASY_PAY_APPLEPAY,

  @ description - 핀페이 간편결제
  EASY_PAY_PINPAY,

  @ description - 에스케이페이 간편결제
  EASY_PAY_SKPAY,

  @ description - 위챗페이 간편결제
  EASY_PAY_WECHATPAY,

  @ description - 페이팔 간편결제
  EASY_PAY_PAYPAL,

  @ description - 알리페이 간편결제
  EASY_PAY_ALIPAY,

  @ description - 토스브랜드페이 간편결제
  EASY_PAY_TOSS_BRANDPAY,

  @ description - 케이비앱 간편결제
  EASY_PAY_KB_APP,

  @ description - 티머니페이 간편결제
  EASY_PAY_TMONEYPAY,

  @ description - 하이픈 간편결제
  EASY_PAY_HYPHEN,

  @ description - OK캐시백 간편결제
  EASY_PAY_OK_CASHBAG,

  @ description - 베네피아 간편결제
  EASY_PAY_BENEPIA,
}

@ description - 가상계좌 결제
struct ReconciliationPaymentMethodVirtualAccount {
  @ description - 대사용 결제 수단
  type: string,

  @ description - 가상계좌  은행
  bank?: Bank,

  @ description - 가상계좌 은행
  approvalNumber?: string,
}

enum ReconciliationPgProvider {
  KAKAOPAY,
  NICEPAY,
  NAVERPAY,
  UPLUS,
  TOSSPAYMENTS,
  TOSSPAY,
  PAYCO,
  KCP,
  DANAL,
  EXIMBAY,
  INICIS,
  HECTO,
  KSNET,
  KPN,
  HYPHEN,
}

@ description - 대사용 PG사 가맹점 식별자
struct ReconciliationPgSpecifier {
  @ description - PG사 가맹점 식별 아이디
  pgMerchantId: string,

  @ description - PG사
  pgProvider: ReconciliationPgProvider,
}

@ description - RecoverPlatformAdditionalFeePolicyError
@ discriminator - type
oneof RecoverPlatformAdditionalFeePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND
  PlatformAdditionalFeePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 추가 수수료 정책 복원 성공 응답
struct RecoverPlatformAdditionalFeePolicyResponse {
  @ description - 복원된 추가 수수료 정책
  additionalFeePolicy: PlatformAdditionalFeePolicy,
}

@ description - RecoverPlatformContractError
@ discriminator - type
oneof RecoverPlatformContractError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 계약 복원 성공 응답
struct RecoverPlatformContractResponse {
  @ description - 복원된 계약
  contract: PlatformContract,
}

@ description - RecoverPlatformDiscountSharePolicyError
@ discriminator - type
oneof RecoverPlatformDiscountSharePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 할인 분담 복원 성공 응답
struct RecoverPlatformDiscountSharePolicyResponse {
  @ description - 복원된 할인 분담
  discountSharePolicy: PlatformDiscountSharePolicy,
}

@ description - RecoverPlatformPartnerError
@ discriminator - type
oneof RecoverPlatformPartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 복원 성공 응답
struct RecoverPlatformPartnerResponse {
  @ description - 복원된 파트너
  partner: PlatformPartner,
}

@ description - 토큰 재발급을 위한 입력 정보
struct RefreshTokenBody {
  @ description - 리프레시 토큰
  refreshToken: string,
}

@ description - RefreshTokenError
@ discriminator - type
oneof RefreshTokenError {
  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 토큰 재발급 성공 응답
struct RefreshTokenResponse {
  @ description - 인증에 사용하는 엑세스 토큰
  accessToken: string,

  @ description - 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
  refreshToken: string,
}

@ description - 세금계산서 역발행 요청 거부 정보
struct RefuseB2bTaxInvoiceRequestBody {
  @ description - 메모
  memo?: string,
}

@ description - RefuseB2bTaxInvoiceRequestError
@ discriminator - type
oneof RefuseB2bTaxInvoiceRequestError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_REQUESTED_STATUS
  B2bTaxInvoiceNotRequestedStatusError,

  @ mapping - B2B_TAX_INVOICE_NO_SUPPLIER_DOCUMENT_KEY
  B2bTaxInvoiceNoSupplierDocumentKeyError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 역발행 요청 거부 응답
struct RefuseB2bTaxInvoiceRequestResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description - 사업자 연동 요청 정보
struct RegisterB2bMemberCompanyBody {
  @ description - 연동 사업자 아이디
  id?: string,

  @ description - 사업자 정보
  company: B2bMemberCompanyInput,
}

@ description - RegisterB2bMemberCompanyError
@ discriminator - type
oneof RegisterB2bMemberCompanyError {
  @ mapping - B2B_COMPANY_ALREADY_REGISTERED
  B2bCompanyAlreadyRegisteredError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_ID_ALREADY_EXISTS
  B2bIdAlreadyExistsError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 사업자 연동 응답 정보
struct RegisterB2bMemberCompanyResponse {
  @ description - 사업자 정보
  company: B2bMemberCompany,
}

@ description - 에스크로 배송 정보 등록 입력 정보
struct RegisterEscrowLogisticsBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 에스크로 발송자 정보
  sender?: PaymentEscrowSenderInput,

  @ description - 에스크로 수취인 정보
  receiver?: PaymentEscrowReceiverInput,

  @ description - 에스크로 물류 정보
  logistics: PaymentLogistics,

  @ description - 이메일 알림 전송 여부
  sendEmail?: boolean,

  @ description - 상품 정보
  products?: PaymentProduct[],
}

@ description - 영수증 내 하위 상점 거래 등록 정보
struct RegisterStoreReceiptBody {
  @ description - 하위 상점 거래 목록
  items: RegisterStoreReceiptBodyItem[],

  @ description - 상점 아이디
  storeId?: string,
}

@ description - 하위 상점 거래 정보
struct RegisterStoreReceiptBodyItem {
  @ description - 하위 상점 사업자등록번호
  storeBusinessRegistrationNumber: string,

  @ description - 하위 상점명
  storeName: string,

  @ description - 결제 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세액
  vatAmount?: int64,

  @ description - 공급가액
  supplyAmount?: int64,

  @ description - 통화
  currency: Currency,
}

@ description - RegisterStoreReceiptError
@ discriminator - type
oneof RegisterStoreReceiptError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - PAYMENT_NOT_PAID
  PaymentNotPaidError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 영수증 내 하위 상점 거래 등록 응답
struct RegisterStoreReceiptResponse {
  @ description - 결제 영수증 URL
  receiptUrl?: string,
}

@ description - 배송 정보 등록 완료
struct RegisteredPaymentEscrow {
  @ description - 에스크로 상태
  status: string,

  @ description - 택배사
  company: string,

  @ description - 송장번호
  invoiceNumber: string,

  @ description - 발송 일시
  sentAt?: datetime,

  @ description - 배송등록 처리 일자
  appliedAt?: datetime,
}

@ description - 구매 거절 확정
struct RejectConfirmedPaymentEscrow {
  @ description - 에스크로 상태
  status: string,

  @ description - 택배사
  company: string,

  @ description - 송장번호
  invoiceNumber: string,

  @ description - 발송 일시
  sentAt?: datetime,

  @ description - 배송등록 처리 일자
  appliedAt?: datetime,
}

@ description - 파트너 상태를 승인 거절로 변경하기 위한 입력 정보
struct RejectPlatformPartnerBody {
  @ description - 파트너 메모. 값이 명시되지 않은 경우 업데이트하지 않습니다.
  memo?: string,
}

@ description - RejectPlatformPartnerError
@ discriminator - type
oneof RejectPlatformPartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ARCHIVED_PARTNER
  PlatformArchivedPartnerError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 거절 성공 응답
struct RejectPlatformPartnerResponse {
  @ description - 거절된 파트너
  partner: PlatformPartner,
}

@ description - 구매 거절
struct RejectedPaymentEscrow {
  @ description - 에스크로 상태
  status: string,

  @ description - 택배사
  company: string,

  @ description - 송장번호
  invoiceNumber: string,

  @ description - 발송 일시
  sentAt?: datetime,

  @ description - 배송등록 처리 일자
  appliedAt?: datetime,
}

@ description - 세금계산서 역발행 요청 응답
struct RequestB2bTaxInvoiceResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description - 세금계산서 역발행 즉시 요청 정보
struct RequestB2bTaxInvoiceReverseIssuanceBody {
  @ description - 세금계산서 생성 요청 정보
  taxInvoice: B2bTaxInvoiceInput,

  @ description - 메모
  memo?: string,

  @ description - 수정 세금계산서 입력 정보
  modification?: B2bTaxInvoiceModificationCreateBody,
}

@ description - RequestB2bTaxInvoiceReverseIssuanceError
@ discriminator - type
oneof RequestB2bTaxInvoiceReverseIssuanceError {
  @ mapping - B2B_CANNOT_CHANGE_TAX_TYPE
  B2BCannotChangeTaxTypeError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_ID_ALREADY_EXISTS
  B2bIdAlreadyExistsError,

  @ mapping - B2B_MODIFICATION_NOT_PROVIDED
  B2bModificationNotProvidedError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_ORIGINAL_TAX_INVOICE_NOT_FOUND
  B2bOriginalTaxInvoiceNotFoundError,

  @ mapping - B2B_RECIPIENT_NOT_FOUND
  B2bRecipientNotFoundError,

  @ mapping - B2B_SUPPLIER_NOT_FOUND
  B2bSupplierNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_RECIPIENT_DOCUMENT_KEY_ALREADY_USED
  B2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError,

  @ mapping - B2B_TAX_INVOICE_STATUS_NOT_SENDING_COMPLETED
  B2BTaxInvoiceStatusNotSendingCompletedError,

  @ mapping - B2B_TAX_INVOICE_SUPPLIER_DOCUMENT_KEY_ALREADY_USED
  B2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 역발행 즉시 요청 응답
struct RequestB2bTaxInvoiceReverseIssuanceResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description - 취소 요청 상태
struct RequestedPaymentCancellation {
  @ description - 결제 취소 내역 상태
  status: string,

  @ description - 취소 내역 아이디
  id: string,

  @ description - PG사 결제 취소 내역 아이디
  pgCancellationId?: string,

  @ description - 취소 총 금액
  totalAmount: int64,

  @ description - 취소 금액 중 면세 금액
  taxFreeAmount: int64,

  @ description - 취소 금액 중 부가세액
  vatAmount: int64,

  @ description - 적립형 포인트의 환불 금액
  easyPayDiscountAmount?: int64,

  @ description - 취소 사유
  reason: string,

  @ description - 취소 시점
  cancelledAt?: datetime,

  @ description - 취소 요청 시점
  requestedAt: datetime,

  @ description - 취소 요청 경로
  trigger?: Trigger,
}

@ description - RescheduleAdditionalFeePolicyError
@ discriminator - type
oneof RescheduleAdditionalFeePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND
  PlatformAdditionalFeePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - RescheduleContractError
@ discriminator - type
oneof RescheduleContractError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - RescheduleDiscountSharePolicyError
@ discriminator - type
oneof RescheduleDiscountSharePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - ReschedulePartnerError
@ discriminator - type
oneof ReschedulePartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_CANNOT_BE_SCHEDULED
  PlatformMemberCompanyConnectedPartnerCannotBeScheduledError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 추가 수수료 정책 예약 업데이트 재설정을 위한 입력 정보
struct ReschedulePlatformAdditionalFeePolicyBody {
  @ description - 반영할 업데이트 내용
  update: UpdatePlatformAdditionalFeePolicyBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

@ description - 추가 수수료 정책 예약 업데이트 재설정 성공 응답
struct ReschedulePlatformAdditionalFeePolicyResponse {
  @ description - 예약된 추가 수수료 정책
  scheduledAdditionalFeePolicy: PlatformAdditionalFeePolicy,
}

@ description - 계약 예약 업데이트 재설정을 위한 입력 정보
struct ReschedulePlatformContractBody {
  @ description - 반영할 업데이트 내용
  update: UpdatePlatformContractBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

@ description - 계약 예약 업데이트 재설정 성공 응답
struct ReschedulePlatformContractResponse {
  @ description - 예약된 계약 정보
  scheduledContract: PlatformContract,
}

@ description - 할인 분담 정책 예약 업데이트 재설정을 위한 입력 정보
struct ReschedulePlatformDiscountSharePolicyBody {
  @ description - 반영할 업데이트 내용
  update: UpdatePlatformDiscountSharePolicyBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

@ description - 할인 분담 정책 예약 업데이트 재설정 성공 응답
struct ReschedulePlatformDiscountSharePolicyResponse {
  @ description - 예약된 할인 분담 정보
  scheduledDiscountSharePolicy: PlatformDiscountSharePolicy,
}

@ description - 파트너 예약 업데이트 재설정을 위한 입력 정보
struct ReschedulePlatformPartnerBody {
  @ description - 반영할 업데이트 내용
  update: UpdatePlatformPartnerBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

@ description - 파트너 예약 업데이트 재설정 성공 응답
struct ReschedulePlatformPartnerResponse {
  @ description - 예약된 파트너 정보
  scheduledPartner: PlatformPartner,
}

@ description - ResendIdentityVerificationError
@ discriminator - type
oneof ResendIdentityVerificationError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - IDENTITY_VERIFICATION_ALREADY_VERIFIED
  IdentityVerificationAlreadyVerifiedError,

  @ mapping - IDENTITY_VERIFICATION_NOT_FOUND
  IdentityVerificationNotFoundError,

  @ mapping - IDENTITY_VERIFICATION_NOT_SENT
  IdentityVerificationNotSentError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 본인인증 요청 재전송 성공 응답
struct ResendIdentityVerificationResponse {}

@ description - 웹훅 재발송을 위한 입력 정보
struct ResendWebhookBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 웹훅 아이디
  webhookId?: string,
}

@ description - ResendWebhookError
@ discriminator - type
oneof ResendWebhookError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - MAX_WEBHOOK_RETRY_COUNT_REACHED
  MaxWebhookRetryCountReachedError,

  @ mapping - PAYMENT_NOT_FOUND
  PaymentNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,

  @ mapping - WEBHOOK_NOT_FOUND
  WebhookNotFoundError,
}

@ description - 웹훅 재발송 응답 정보
struct ResendWebhookResponse {
  @ description - 재발송 웹훅 정보
  webhook: PaymentWebhook,
}

@ description - 결제 예약 건 취소 요청 입력 정보
struct RevokePaymentSchedulesBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 빌링키
  billingKey?: string,

  @ description - 결제 예약 건 아이디 목록
  scheduleIds?: string[],
}

@ description - RevokePaymentSchedulesError
@ discriminator - type
oneof RevokePaymentSchedulesError {
  @ mapping - BILLING_KEY_ALREADY_DELETED
  BillingKeyAlreadyDeletedError,

  @ mapping - BILLING_KEY_NOT_FOUND
  BillingKeyNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PAYMENT_SCHEDULE_ALREADY_PROCESSED
  PaymentScheduleAlreadyProcessedError,

  @ mapping - PAYMENT_SCHEDULE_ALREADY_REVOKED
  PaymentScheduleAlreadyRevokedError,

  @ mapping - PAYMENT_SCHEDULE_NOT_FOUND
  PaymentScheduleNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 결제 예약 건 취소 성공 응답
struct RevokePaymentSchedulesResponse {
  @ description - 취소 완료된 결제 예약 건 아이디 목록
  revokedScheduleIds: string[],

  @ description - 결제 예약 건 취소 완료 시점
  revokedAt?: datetime,
}

@ description - 결제 예약 취소 상태
struct RevokedPaymentSchedule {
  @ description - 결제 예약 건 상태
  status: string,

  @ description - 결제 예약 건 아이디
  id: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 빌링키
  billingKey: string,

  @ description - 주문명
  orderName: string,

  @ description - 문화비 지출 여부
  isCulturalExpense: boolean,

  @ description - 에스크로 결제 여부
  isEscrow: boolean,

  @ description - 고객 정보
  customer: Customer,

  @ description - 사용자 지정 데이터
  customData: string,

  @ description - 결제 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세
  vatAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 할부 개월 수
  installmentMonth?: int32,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 결제 예약 등록 시점
  createdAt: datetime,

  @ description - 결제 예정 시점
  timeToPay: datetime,

  @ description - 결제 취소 시점
  revokedAt: datetime,
}

@ description - ScheduleAdditionalFeePolicyError
@ discriminator - type
oneof ScheduleAdditionalFeePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND
  PlatformAdditionalFeePolicyNotFoundError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_SCHEDULE_ALREADY_EXISTS
  PlatformAdditionalFeePolicyScheduleAlreadyExistsError,

  @ mapping - PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY
  PlatformArchivedAdditionalFeePolicyError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - ScheduleContractError
@ discriminator - type
oneof ScheduleContractError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ARCHIVED_CONTRACT
  PlatformArchivedContractError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_CONTRACT_SCHEDULE_ALREADY_EXISTS
  PlatformContractScheduleAlreadyExistsError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - ScheduleDiscountSharePolicyError
@ discriminator - type
oneof ScheduleDiscountSharePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY
  PlatformArchivedDiscountSharePolicyError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_SCHEDULE_ALREADY_EXISTS
  PlatformDiscountSharePolicyScheduleAlreadyExistsError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - SchedulePartnerError
@ discriminator - type
oneof SchedulePartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED
  PlatformAccountVerificationAlreadyUsedError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_FAILED
  PlatformAccountVerificationFailedError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND
  PlatformAccountVerificationNotFoundError,

  @ mapping - PLATFORM_ARCHIVED_PARTNER
  PlatformArchivedPartnerError,

  @ mapping - PLATFORM_COMPANY_VERIFICATION_ALREADY_USED
  PlatformCompanyVerificationAlreadyUsedError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE
  PlatformInsufficientDataToChangePartnerTypeError,

  @ mapping - PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_BRN_UNCHANGEABLE
  PlatformMemberCompanyConnectedPartnerBrnUnchangeableError,

  @ mapping - PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_CANNOT_BE_SCHEDULED
  PlatformMemberCompanyConnectedPartnerCannotBeScheduledError,

  @ mapping - PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_TYPE_UNCHANGEABLE
  PlatformMemberCompanyConnectedPartnerTypeUnchangeableError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - PLATFORM_PARTNER_SCHEDULE_ALREADY_EXISTS
  PlatformPartnerScheduleAlreadyExistsError,

  @ mapping - PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND
  PlatformUserDefinedPropertyNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 추가 수수료 정책 업데이트 예약을 위한 입력 정보
struct SchedulePlatformAdditionalFeePolicyBody {
  @ description - 반영할 업데이트 내용
  update: UpdatePlatformAdditionalFeePolicyBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

@ description - 추가 수수료 정책 업데이트 예약 성공 응답
struct SchedulePlatformAdditionalFeePolicyResponse {
  @ description - 예약된 추가 수수료 정책
  scheduledAdditionalFeePolicy: PlatformAdditionalFeePolicy,
}

@ description - 계약 업데이트 예약을 위한 입력 정보
struct SchedulePlatformContractBody {
  @ description - 반영할 업데이트 내용
  update: UpdatePlatformContractBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

@ description - 계약 업데이트 예약 성공 응답
struct SchedulePlatformContractResponse {
  @ description - 예약된 계약 정보
  scheduledContract: PlatformContract,
}

@ description - 할인 분담 정책 업데이트 예약을 위한 입력 정보
struct SchedulePlatformDiscountSharePolicyBody {
  @ description - 반영할 업데이트 내용
  update: UpdatePlatformDiscountSharePolicyBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

@ description - 할인 분담 정책 업데이트 예약 성공 응답
struct SchedulePlatformDiscountSharePolicyResponse {
  @ description - 예약된 할인 분담 정보
  scheduledDiscountSharePolicy: PlatformDiscountSharePolicy,
}

@ description - 파트너 업데이트 예약을 위한 입력 정보
struct SchedulePlatformPartnerBody {
  @ description - 반영할 업데이트 내용
  update: UpdatePlatformPartnerBody,

  @ description - 업데이트 적용 시점
  appliedAt: datetime,
}

@ description - 파트너 업데이트 예약 성공 응답
struct SchedulePlatformPartnerResponse {
  @ description - 예약된 파트너 정보
  scheduledPartner: PlatformPartner,
}

struct SchedulePlatformPartnersBody {
  filter?: PlatformPartnerFilterInput,
  update: SchedulePlatformPartnersBodyUpdate,
  appliedAt: datetime,
}

struct SchedulePlatformPartnersBodyUpdate {
  name?: string,
  contact?: SchedulePlatformPartnersBodyUpdateContact,
  type?: SchedulePlatformPartnersBodyUpdateType,
  account?: SchedulePlatformPartnersBodyUpdateAccount,
  defaultContractId?: string,
  memo?: string,
  tags?: string[],
  userDefinedProperties?: PlatformProperties,
}

@ description - 파트너 계좌 업데이트를 위한 입력 정보
struct SchedulePlatformPartnersBodyUpdateAccount {
  @ description - 은행
  bank: Bank,

  @ description - 정산에 사용할 통화
  currency: Currency,

  @ description - 계좌번호
  number: string,

  @ description - 예금주명
  holder: string,

  @ description - 계좌 검증 아이디
  accountVerificationId?: string,
}

@ description - 파트너 업데이트를 위한 유형별 추가 정보
struct SchedulePlatformPartnersBodyUpdateContact {
  @ description - 담당자 이름
  name?: string,

  @ description - 담당자 휴대폰 번호
  phoneNumber?: string,

  @ description - 담당자 이메일
  email?: string,
}

@ description
| 파트너 유형별 추가 정보를 수정합니다.
| 최초 생성된 유형 내에서 세부 정보만 수정할 수 있고 파트너의 유형 자체를 수정할 수는 없습니다.
struct SchedulePlatformPartnersBodyUpdateType {
  @ description - 사업자 추가 정보
  business?: SchedulePlatformPartnersBodyUpdateTypeBusiness,

  @ description - 원천징수 대상자 추가 정보
  whtPayer?: SchedulePlatformPartnersBodyUpdateTypeWhtPayer,

  @ description - 원천징수 비대상자 추가 정보
  nonWhtPayer?: SchedulePlatformPartnersBodyUpdateTypeNonWhtPayer,
}

struct SchedulePlatformPartnersBodyUpdateTypeBusiness {
  @ description - 상호명
  companyName?: string,

  @ description - 사업자 유형
  taxationType?: PlatformPartnerTaxationType,

  @ description - 사업자등록번호
  businessRegistrationNumber?: string,

  @ description - 대표자 이름
  representativeName?: string,

  @ description - 사업장 주소
  companyAddress?: string,

  @ description - 업태
  businessType?: string,

  @ description - 업종
  businessClass?: string,

  @ description - 사업자 조회 검증 아이디
  companyVerificationId?: string,
}

struct SchedulePlatformPartnersBodyUpdateTypeNonWhtPayer {
  @ description - 생년월일
  birthdate?: date,
}

struct SchedulePlatformPartnersBodyUpdateTypeWhtPayer {
  @ description - 생년월일
  birthdate?: date,
}

@ description - SchedulePlatformPartnersError
@ discriminator - type
oneof SchedulePlatformPartnersError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ARCHIVED_PARTNERS_CANNOT_BE_SCHEDULED
  PlatformArchivedPartnersCannotBeScheduledError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNERS_CANNOT_BE_SCHEDULED
  PlatformMemberCompanyConnectedPartnersCannotBeScheduledError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_SCHEDULES_ALREADY_EXIST
  PlatformPartnerSchedulesAlreadyExistError,

  @ mapping - PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND
  PlatformUserDefinedPropertyNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct SchedulePlatformPartnersResponse {}

@ description - 결제 예약 완료 상태
struct ScheduledPaymentSchedule {
  @ description - 결제 예약 건 상태
  status: string,

  @ description - 결제 예약 건 아이디
  id: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 빌링키
  billingKey: string,

  @ description - 주문명
  orderName: string,

  @ description - 문화비 지출 여부
  isCulturalExpense: boolean,

  @ description - 에스크로 결제 여부
  isEscrow: boolean,

  @ description - 고객 정보
  customer: Customer,

  @ description - 사용자 지정 데이터
  customData: string,

  @ description - 결제 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세
  vatAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 할부 개월 수
  installmentMonth?: int32,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 결제 예약 등록 시점
  createdAt: datetime,

  @ description - 결제 예정 시점
  timeToPay: datetime,
}

@ description - (결제, 본인인증 등에) 선택된 채널 정보
struct SelectedChannel {
  @ description - 채널 타입
  type: SelectedChannelType,

  @ description - 채널 아이디
  id?: string,

  @ description - 채널 키
  key?: string,

  @ description - 채널 명
  name?: string,

  @ description - PG사
  pgProvider: PgProvider,

  @ description - PG사 고객사 식별 아이디
  pgMerchantId: string,
}

@ description - 채널 타입
enum SelectedChannelType {
  @ description - 실 연동 채널
  LIVE,

  @ description - 테스트 연동 채널
  TEST,
}

@ description - 본인인증 요청을 위한 입력 정보
struct SendIdentityVerificationBody {
  @ description - 상점 아이디
  storeId?: string,

  @ description - 채널 키
  channelKey: string,

  @ description - 고객 정보
  customer: SendIdentityVerificationBodyCustomer,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고)
  bypass?: object,

  @ description - 통신사
  operator: IdentityVerificationOperator,

  @ description - 본인인증 방식
  method: IdentityVerificationMethod,
}

@ description - 본인인증 요청을 위한 고객 정보
struct SendIdentityVerificationBodyCustomer {
  @ description - 식별 아이디
  id?: string,

  @ description - 이름
  name: string,

  @ description - 전화번호
  phoneNumber: string,

  @ description - 주민등록번호 앞 7자리
  identityNumber?: string,

  @ description - IP 주소
  ipAddress: string,
}

@ description - SendIdentityVerificationError
@ discriminator - type
oneof SendIdentityVerificationError {
  @ mapping - CHANNEL_NOT_FOUND
  ChannelNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - IDENTITY_VERIFICATION_ALREADY_SENT
  IdentityVerificationAlreadySentError,

  @ mapping - IDENTITY_VERIFICATION_ALREADY_VERIFIED
  IdentityVerificationAlreadyVerifiedError,

  @ mapping - IDENTITY_VERIFICATION_NOT_FOUND
  IdentityVerificationNotFoundError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - MAX_TRANSACTION_COUNT_REACHED
  MaxTransactionCountReachedError,

  @ mapping - PG_PROVIDER
  PgProviderError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 본인인증 요청 전송 성공 응답
struct SendIdentityVerificationResponse {}

@ description - SendToNtsB2bTaxInvoiceError
@ discriminator - type
oneof SendToNtsB2bTaxInvoiceError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_ISSUED_STATUS
  B2bTaxInvoiceNotIssuedStatusError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 국세청 즉시 전송 응답
struct SendToNtsB2bTaxInvoiceResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description
| 한 줄 형식 주소와 분리 형식 주소 모두 존재합니다.
| 한 줄 형식 주소는 분리 형식 주소를 이어 붙인 형태로 생성됩니다.
struct SeparatedAddress {
  type: string,

  @ description - 주소 (한 줄)
  oneLine: string,

  @ description - 상세 주소 1
  addressLine1: string,

  @ description - 상세 주소 2
  addressLine2: string,

  @ description - 시/군/구
  city?: string,

  @ description - 주/도/시
  province?: string,

  @ description - 국가
  country?: Country,
}

@ description - 분리 형식 주소 입력 정보
struct SeparatedAddressInput {
  @ description - 상세 주소 1
  addressLine1: string,

  @ description - 상세 주소 2
  addressLine2: string,

  @ description - 시/군/구
  city?: string,

  @ description - 주/도/시
  province?: string,

  @ description - 국가
  country?: Country,
}

@ description - 정산 정보
struct Settlement {
  @ description - PG 수수료 요금
  feeAmount: int64,

  @ description - PG 수수료 부가세
  feeVatAmount: int64,

  @ description - 정산 금액
  settlementAmount: int64,

  @ description - 정산 통화
  settlementCurrency: Currency,

  @ description - 정산일
  settlementDate: date,
}

@ description - 정렬 방식
enum SortOrder {
  @ description - 내림차순
  DESC,

  @ description - 오름차순
  ASC,
}

@ description - 결제 시작 상태
struct StartedPaymentSchedule {
  @ description - 결제 예약 건 상태
  status: string,

  @ description - 결제 예약 건 아이디
  id: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 빌링키
  billingKey: string,

  @ description - 주문명
  orderName: string,

  @ description - 문화비 지출 여부
  isCulturalExpense: boolean,

  @ description - 에스크로 결제 여부
  isEscrow: boolean,

  @ description - 고객 정보
  customer: Customer,

  @ description - 사용자 지정 데이터
  customData: string,

  @ description - 결제 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세
  vatAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 할부 개월 수
  installmentMonth?: int32,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 결제 예약 등록 시점
  createdAt: datetime,

  @ description - 결제 예정 시점
  timeToPay: datetime,

  @ description - 결제 시작 시점
  startedAt: datetime,
}

@ description - 취소 완료 상태
struct SucceededPaymentCancellation {
  @ description - 결제 취소 내역 상태
  status: string,

  @ description - 취소 내역 아이디
  id: string,

  @ description - PG사 결제 취소 내역 아이디
  pgCancellationId?: string,

  @ description - 취소 총 금액
  totalAmount: int64,

  @ description - 취소 금액 중 면세 금액
  taxFreeAmount: int64,

  @ description - 취소 금액 중 부가세액
  vatAmount: int64,

  @ description - 적립형 포인트의 환불 금액
  easyPayDiscountAmount?: int64,

  @ description - 취소 사유
  reason: string,

  @ description - 취소 시점
  cancelledAt?: datetime,

  @ description - 취소 요청 시점
  requestedAt: datetime,

  @ description - 취소 영수증 URL
  receiptUrl?: string,

  @ description - 취소 요청 경로
  trigger?: Trigger,
}

@ description - 결제 성공 상태
struct SucceededPaymentSchedule {
  @ description - 결제 예약 건 상태
  status: string,

  @ description - 결제 예약 건 아이디
  id: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 빌링키
  billingKey: string,

  @ description - 주문명
  orderName: string,

  @ description - 문화비 지출 여부
  isCulturalExpense: boolean,

  @ description - 에스크로 결제 여부
  isEscrow: boolean,

  @ description - 고객 정보
  customer: Customer,

  @ description - 사용자 지정 데이터
  customData: string,

  @ description - 결제 총 금액
  totalAmount: int64,

  @ description - 면세액
  taxFreeAmount?: int64,

  @ description - 부가세
  vatAmount?: int64,

  @ description - 통화
  currency: Currency,

  @ description - 할부 개월 수
  installmentMonth?: int32,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 결제 예약 등록 시점
  createdAt: datetime,

  @ description - 결제 예정 시점
  timeToPay: datetime,

  @ description - 결제 시작 시점
  startedAt: datetime,

  @ description - 결제 완료 시점
  completedAt: datetime,
}

@ description - 세금계산서 웹훅 응답
struct Success {
  result: string,
}

@ description - 면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우
struct SumOfPartsExceedsCancelAmountError {
  type: string,
  message?: string,
}

@ description - 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
struct SumOfPartsExceedsTotalAmountError {
  type: string,
  message?: string,
}

@ description - 세금계산서 웹훅 정보
struct TaxInvoiceWebhookHandleBody {
  itemKey: string,
  eventDT: string,
  eventType: B2bTaxInvoiceWebhookEventType,
}

@ description - TaxInvoiceWebhookHandleError
@ discriminator - type
oneof TaxInvoiceWebhookHandleError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 다운로드 할 시트 컬럼
enum TaxInvoicesSheetField {
  @ description - 상태
  STATUS,

  @ description - 취소사유
  CANCEL_REASON,

  @ description - 발행유형
  ISSUANCE_TYPE,

  @ description - 문서형태
  DOCUMENT_MODIFICATION_TYPE,

  @ description - 지연발행
  IS_DELAYED,

  @ description - 작성일자
  WRITE_DATE,

  @ description - 발행마감일
  ISSUANCE_DUE_DATE,

  @ description - 과세형태
  TAXATION_TYPE,

  @ description - 영수/청구
  PURPOSE_TYPE,

  @ description - 공급자 회사명
  SUPPLIER_NAME,

  @ description - 공급자 사업자등록번호
  SUPPLIER_BRN,

  @ description - 합계금액
  TOTAL_AMOUNT,

  @ description - 공급가액
  TOTAL_SUPPLY_AMOUNT,

  @ description - 세액
  TOTAL_TAX_AMOUNT,

  @ description - 관리용 메모
  MEMO,

  @ description - 발행요청일시
  REQUESTED_AT,

  @ description - 발행완료일시
  ISSUED_AT,

  @ description - 국세청 전송일시
  NTS_SENT_AT,

  @ description - 상태 업데이트 일시
  STATUS_UPDATED_AT,

  @ description - 일괄 세금계산서 아이디
  BULK_TAX_INVOICE_ID,

  @ description - 세금계산서 아이디
  PLAIN_ID,

  @ description - 공급자 문서번호
  SUPPLIER_DOCUMENT_KEY,

  @ description - 공급받는자 문서번호
  RECIPIENT_DOCUMENT_KEY,
}

enum TaxationType {
  TAXABLE,
  NON_TAXABLE,
}

custom TransferParameters = PlatformSettlementParameterValue[string]

enum Trigger {
  CONSOLE,
  API,
  PORTONE_ADMIN,
}

@ description - 인증 정보가 올바르지 않은 경우
struct UnauthorizedError {
  type: string,
  message?: string,
}

@ description - 연동 사업자 정보 수정 요청
struct UpdateB2bMemberCompanyBody {
  @ description - 회사명
  companyName?: string,

  @ description - 대표자 성명
  representativeName?: string,

  @ description - 회사 주소
  address?: string,

  @ description - 업태
  businessType?: string,

  @ description - 업종
  businessClass?: string,

  @ description - 담당자 정보
  contactName?: string,

  @ description - 담당자 핸드폰 번호
  contactPhoneNumber?: string,

  @ description - 담당자 이메일
  contactEmail?: string,
}

@ description - UpdateB2bMemberCompanyError
@ discriminator - type
oneof UpdateB2bMemberCompanyError {
  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_MEMBER_COMPANY_NOT_FOUND
  B2bMemberCompanyNotFoundError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 연동 사업자 정보 수정 응답
struct UpdateB2bMemberCompanyResponse {
  @ description - 연동 사업자 정보
  memberCompany: B2bMemberCompany,
}

@ description - 세금계산서 임시저장 수정 정보
struct UpdateB2bTaxInvoiceDraftBody {
  @ description - 사업자등록번호
  brn?: string,

  @ description - 세금계산서 문서 번호
  taxInvoiceKey: string,

  @ description - 문서 번호 유형
  taxInvoiceKeyType?: B2bTaxInvoiceKeyType,

  @ description - 세금계산서 임시저장 수정 정보
  taxInvoice: B2bTaxInvoiceInput,

  @ description - 메모
  memo?: string,
}

@ description - UpdateB2bTaxInvoiceDraftError
@ discriminator - type
oneof UpdateB2bTaxInvoiceDraftError {
  @ mapping - B2B_CANNOT_CHANGE_TAX_TYPE
  B2BCannotChangeTaxTypeError,

  @ mapping - B2B_DOCUMENT_KEY_CANNOT_BE_CHANGED
  B2bDocumentKeyCannotBeChangedError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_ID_ALREADY_EXISTS
  B2bIdAlreadyExistsError,

  @ mapping - B2B_MODIFICATION_NOT_PROVIDED
  B2bModificationNotProvidedError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_ORIGINAL_TAX_INVOICE_NOT_FOUND
  B2bOriginalTaxInvoiceNotFoundError,

  @ mapping - B2B_RECIPIENT_NOT_FOUND
  B2bRecipientNotFoundError,

  @ mapping - B2B_SUPPLIER_NOT_FOUND
  B2bSupplierNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_DRAFTED_STATUS
  B2bTaxInvoiceNotDraftedStatusError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_RECIPIENT_DOCUMENT_KEY_ALREADY_USED
  B2bTaxInvoiceRecipientDocumentKeyAlreadyUsedError,

  @ mapping - B2B_TAX_INVOICE_STATUS_NOT_SENDING_COMPLETED
  B2BTaxInvoiceStatusNotSendingCompletedError,

  @ mapping - B2B_TAX_INVOICE_SUPPLIER_DOCUMENT_KEY_ALREADY_USED
  B2bTaxInvoiceSupplierDocumentKeyAlreadyUsedError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 세금계산서 임시저장 수정 응답
struct UpdateB2bTaxInvoiceDraftResponse {
  taxInvoice: B2bTaxInvoice,
}

@ description - UpdatePaymentReconciliationChannelError
@ discriminator - type
oneof UpdatePaymentReconciliationChannelError {
  @ mapping - CHANNEL_NOT_FOUND
  ChannelNotFoundError,

  @ mapping - DUPLICATE_CHANNEL_NAME
  ChannelDuplicateNameError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - NOT_ALLOWED_PG_MERCHANT_ID
  NotAllowedPgMerchantIdError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

struct UpdatePaymentReconciliationChannelResponse {
  channel: PaymentReconciliationChannel,
}

@ description - 값이 명시하지 않은 필드는 업데이트되지 않습니다.
struct UpdatePlatformAdditionalFeePolicyBody {
  @ description - 책정 수수료
  fee?: PlatformFeeInput,

  @ description - 추가 수수료 정책 이름
  name?: string,

  @ description - 해당 추가 수수료 정책에 대한 메모
  memo?: string,

  @ description - 부가세를 부담할 주체
  vatPayer?: PlatformPayer,
}

@ description - UpdatePlatformAdditionalFeePolicyError
@ discriminator - type
oneof UpdatePlatformAdditionalFeePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND
  PlatformAdditionalFeePolicyNotFoundError,

  @ mapping - PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY
  PlatformArchivedAdditionalFeePolicyError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 추가 수수료 정책 업데이트 성공 응답
struct UpdatePlatformAdditionalFeePolicyResponse {
  @ description - 업데이트된 추가 수수료 정책
  additionalFeePolicy: PlatformAdditionalFeePolicy,
}

@ description - 값이 명시되지 않은 필드는 업데이트하지 않습니다.
struct UpdatePlatformBody {
  @ description - 정산 규칙
  settlementRule?: UpdatePlatformBodySettlementRule,
}

@ description - 값이 명시되지 않은 필드는 업데이트하지 않습니다.
struct UpdatePlatformBodySettlementRule {
  @ description - paymentId, storeId, partnerId가 같은 주문 정산건에 대한 중복 정산 지원 여부
  supportsMultipleOrderTransfersPerPartner?: boolean,

  @ description - 정산일이 정산시작일보다 작거나 같을 경우 공휴일 후 영업일로 정산일 다시 계산 여부
  adjustSettlementDateAfterHolidayIfEarlier?: boolean,

  @ description - 지급 금액에서 원천징수세 차감 여부
  subtractWhtInPayoutAmount?: boolean,
}

@ description - 값이 명시되지 않은 필드는 업데이트되지 않습니다.
struct UpdatePlatformContractBody {
  @ description - 계약 이름
  name?: string,

  @ description - 계약 내부 표기를 위한 메모
  memo?: string,

  @ description - 중개수수료
  platformFee?: PlatformFeeInput,

  @ description - 정산 주기
  settlementCycle?: PlatformSettlementCycleInput,

  @ description - 중개수수료에 대한 부가세 부담 주체
  platformFeeVatPayer?: PlatformPayer,

  @ description - 정산 시 결제금액 부가세 감액 여부
  subtractPaymentVatAmount?: boolean,
}

@ description - UpdatePlatformContractError
@ discriminator - type
oneof UpdatePlatformContractError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ARCHIVED_CONTRACT
  PlatformArchivedContractError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 계약 객체 업데이트 성공 응답
struct UpdatePlatformContractResponse {
  @ description - 업데이트된 계약 객체
  contract: PlatformContract,
}

@ description - 값이 명시되지 않은 필드는 업데이트하지 않습니다.
struct UpdatePlatformDiscountSharePolicyBody {
  @ description - 할인 분담 정책 이름
  name?: string,

  @ description - 할인 분담율
  partnerShareRate?: int32,

  @ description - 해당 할인 분담에 대한 메모
  memo?: string,
}

@ description - UpdatePlatformDiscountSharePolicyError
@ discriminator - type
oneof UpdatePlatformDiscountSharePolicyError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY
  PlatformArchivedDiscountSharePolicyError,

  @ mapping - PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND
  PlatformDiscountSharePolicyNotFoundError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 할인 분담 정책 업데이트 성공 응답
struct UpdatePlatformDiscountSharePolicyResponse {
  @ description - 업데이트된 할인 분담 정책
  discountSharePolicy: PlatformDiscountSharePolicy,
}

@ description - UpdatePlatformError
@ discriminator - type
oneof UpdatePlatformError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 값이 명시되지 않은 필드는 업데이트되지 않습니다.
struct UpdatePlatformPartnerBody {
  @ description - 파트너 법인명 혹은 이름
  name?: string,

  @ description - 파트너 담당자 연락 정보
  contact?: UpdatePlatformPartnerBodyContact,

  @ description - 정산 계좌
  account?: UpdatePlatformPartnerBodyAccount,

  @ description - 파트너에 설정된 기본 계약 아이디
  defaultContractId?: string,

  @ description - 파트너에 대한 메모
  memo?: string,

  @ description - 파트너의 태그 리스트
  tags?: string[],

  @ description - 파트너 유형별 정보
  type?: UpdatePlatformPartnerBodyType,

  @ description - 사용자 정의 속성
  userDefinedProperties?: PlatformProperties,
}

@ description - 파트너 계좌 업데이트를 위한 입력 정보
struct UpdatePlatformPartnerBodyAccount {
  @ description - 은행
  bank: Bank,

  @ description - 정산에 사용할 통화
  currency: Currency,

  @ description - 계좌번호
  number: string,

  @ description - 예금주명
  holder: string,

  @ description - 계좌 검증 아이디
  accountVerificationId?: string,
}

@ description - 파트너 담당자 업데이트를 위한 정보
struct UpdatePlatformPartnerBodyContact {
  @ description - 담당자 이름
  name?: string,

  @ description - 담당자 휴대폰 번호
  phoneNumber?: string,

  @ description - 담당자 이메일
  email?: string,
}

@ description
| 파트너 유형별 추가 정보를 수정합니다.
| 기존과 다른 파트너 유형 정보가 입력된 경우, 파트너의 유형 자체가 변경됩니다.
struct UpdatePlatformPartnerBodyType {
  @ description - 사업자 추가 정보
  business?: UpdatePlatformPartnerBodyTypeBusiness,

  @ description - 원천징수 대상자 추가 정보
  whtPayer?: UpdatePlatformPartnerBodyTypeWhtPayer,

  @ description - 원천징수 비대상자 추가 정보
  nonWhtPayer?: UpdatePlatformPartnerBodyTypeNonWhtPayer,
}

struct UpdatePlatformPartnerBodyTypeBusiness {
  @ description - 상호명
  companyName?: string,

  @ description - 사업자 유형
  taxationType?: PlatformPartnerTaxationType,

  @ description - 사업자등록번호
  businessRegistrationNumber?: string,

  @ description - 대표자 이름
  representativeName?: string,

  @ description - 사업장 주소
  companyAddress?: string,

  @ description - 업태
  businessType?: string,

  @ description - 업종
  businessClass?: string,

  @ description - 사업자 조회 검증 아이디
  companyVerificationId?: string,
}

struct UpdatePlatformPartnerBodyTypeNonWhtPayer {
  @ description - 생년월일
  birthdate?: date,
}

struct UpdatePlatformPartnerBodyTypeWhtPayer {
  @ description - 생년월일
  birthdate?: date,
}

@ description - UpdatePlatformPartnerError
@ discriminator - type
oneof UpdatePlatformPartnerError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED
  PlatformAccountVerificationAlreadyUsedError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_FAILED
  PlatformAccountVerificationFailedError,

  @ mapping - PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND
  PlatformAccountVerificationNotFoundError,

  @ mapping - PLATFORM_ARCHIVED_PARTNER
  PlatformArchivedPartnerError,

  @ mapping - PLATFORM_COMPANY_VERIFICATION_ALREADY_USED
  PlatformCompanyVerificationAlreadyUsedError,

  @ mapping - PLATFORM_CONTRACT_NOT_FOUND
  PlatformContractNotFoundError,

  @ mapping - PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE
  PlatformInsufficientDataToChangePartnerTypeError,

  @ mapping - PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_BRN_UNCHANGEABLE
  PlatformMemberCompanyConnectedPartnerBrnUnchangeableError,

  @ mapping - PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_TYPE_UNCHANGEABLE
  PlatformMemberCompanyConnectedPartnerTypeUnchangeableError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - PLATFORM_PARTNER_NOT_FOUND
  PlatformPartnerNotFoundError,

  @ mapping - PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND
  PlatformUserDefinedPropertyNotFoundError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 파트너 업데이트 성공 응답
struct UpdatePlatformPartnerResponse {
  @ description - 업데이트된 파트너
  partner: PlatformPartner,
}

struct UpdatePlatformPartnerSettlementStatusBody {
  partnerSettlementId: string,
  status: PlatformPartnerSettlementStatus,
  memo?: string,
}

@ description - 정산내역 상태 업데이트 결과
struct UpdatePlatformPartnerSettlementStatusResponse {
  partnerSettlement: PlatformPartnerSettlement,
}

@ description - 플랫폼 업데이트 결과 정보
struct UpdatePlatformResponse {
  @ description - 업데이트된 플랫폼 정보
  platform: Platform,
}

@ description - 플랫폼 설정 업데이트를 위한 입력 정보
struct UpdatePlatformSettingBody {
  @ description - 기본 보내는 이 통장 메모
  defaultWithdrawalMemo?: string,

  @ description - 기본 받는 이 통장 메모
  defaultDepositMemo?: string,
}

@ description - UpdatePlatformSettingError
@ discriminator - type
oneof UpdatePlatformSettingError {
  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - PLATFORM_NOT_ENABLED
  PlatformNotEnabledError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 플랫폼 설정 업데이트 결과
struct UpdatePlatformSettingResponse {
  setting: PlatformSetting,
}

@ description - ValidateB2bCertificateError
@ discriminator - type
oneof ValidateB2bCertificateError {
  @ mapping - B2B_CERTIFICATE_UNREGISTERED
  B2bCertificateUnregisteredError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_MEMBER_COMPANY_NOT_FOUND
  B2bMemberCompanyNotFoundError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}

@ description - 인증서 유효성 검증 응답 정보
struct ValidateB2bCertificateResponse {
  @ description - 인증서 유효 여부
  isValid: boolean,
}

@ description - 완료된 본인인증 내역
struct VerifiedIdentityVerification {
  @ description - 본인인증 상태
  status: string,

  @ description - 본인인증 내역 아이디
  id: string,

  @ description - 사용된 본인인증 채널
  channel?: SelectedChannel,

  @ description - 인증된 고객 정보
  verifiedCustomer: IdentityVerificationVerifiedCustomer,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 본인인증 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 본인인증 완료 시점
  verifiedAt: datetime,

  @ description - 본인인증 내역 PG사 아이디
  pgTxId: string,

  @ description - PG사 응답 데이터
  pgRawResponse: string,

  @ description - 포트원 버전
  version: PortOneVersion,
}

@ description - 가상계좌 발급 완료 상태 건
struct VirtualAccountIssuedPayment {
  @ description - 결제 건 상태
  status: string,

  @ description - 결제 건 아이디
  id: string,

  @ description - 결제 건 포트원 채번 아이디
  transactionId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - PG사 거래 아이디
  pgTxId?: string,
}

@ description - 가상계좌 발급 완료 상태 건
struct VirtualAccountIssuedPaymentTransaction {
  @ description - 결제 시도 상태
  status: string,

  @ description - 결제 시도 아이디 (transactionId)
  id: string,

  @ description - 결제 건 아이디
  paymentId: string,

  @ description - 고객사 아이디
  merchantId: string,

  @ description - 상점 아이디
  storeId: string,

  @ description - 결제수단 정보
  method?: PaymentMethod,

  @ description - 결제 채널
  channel: SelectedChannel,

  @ description - 결제 채널 그룹 정보
  channelGroup?: ChannelGroupSummary,

  @ description - 포트원 버전
  version: PortOneVersion,

  @ description - 결제 예약 건 아이디
  scheduleId?: string,

  @ description - 결제 시 사용된 빌링키
  billingKey?: string,

  @ description - 웹훅 발송 내역
  webhooks?: PaymentWebhook[],

  @ description - 결제 요청 시점
  requestedAt: datetime,

  @ description - 업데이트 시점
  updatedAt: datetime,

  @ description - 상태 업데이트 시점
  statusChangedAt: datetime,

  @ description - 주문명
  orderName: string,

  @ description - 결제 금액 관련 세부 정보
  amount: PaymentAmount,

  @ description - 통화
  currency: Currency,

  @ description - 구매자 정보
  customer: Customer,

  @ description - 프로모션 아이디
  promotionId?: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 정보
  escrow?: PaymentEscrow,

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 갯수
  productCount?: int32,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 국가 코드
  country?: Country,

  @ description - PG사 거래 아이디
  pgTxId?: string,
}

@ description - 웹훅 내역이 존재하지 않는 경우
struct WebhookNotFoundError {
  type: string,
  message?: string,
}

@ description - requestB2bTaxInvoiceError
@ discriminator - type
oneof requestB2bTaxInvoiceError {
  @ mapping - B2B_CANNOT_CHANGE_TAX_TYPE
  B2BCannotChangeTaxTypeError,

  @ mapping - B2B_EXTERNAL_SERVICE
  B2bExternalServiceError,

  @ mapping - B2B_MODIFICATION_NOT_PROVIDED
  B2bModificationNotProvidedError,

  @ mapping - B2B_NOT_ENABLED
  B2bNotEnabledError,

  @ mapping - B2B_ORIGINAL_TAX_INVOICE_NOT_FOUND
  B2bOriginalTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NOT_DRAFTED_STATUS
  B2bTaxInvoiceNotDraftedStatusError,

  @ mapping - B2B_TAX_INVOICE_NOT_FOUND
  B2bTaxInvoiceNotFoundError,

  @ mapping - B2B_TAX_INVOICE_NO_RECIPIENT_DOCUMENT_KEY
  B2bTaxInvoiceNoRecipientDocumentKeyError,

  @ mapping - B2B_TAX_INVOICE_STATUS_NOT_SENDING_COMPLETED
  B2BTaxInvoiceStatusNotSendingCompletedError,

  @ mapping - FORBIDDEN
  ForbiddenError,

  @ mapping - INVALID_REQUEST
  InvalidRequestError,

  @ mapping - UNAUTHORIZED
  UnauthorizedError,
}
