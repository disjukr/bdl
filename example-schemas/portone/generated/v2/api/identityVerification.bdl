# standard - portone-rest-api

import portone.v2.api.data {
  ConfirmIdentityVerificationError as ConfirmIdentityVerificationError1,
  ConfirmIdentityVerificationResponse,
  GetIdentityVerificationError as GetIdentityVerificationError1,
  GetIdentityVerificationsBody,
  GetIdentityVerificationsError as GetIdentityVerificationsError1,
  GetIdentityVerificationsResponse,
  IdentityVerification,
  IdentityVerificationMethod,
  IdentityVerificationOperator,
  ResendIdentityVerificationError as ResendIdentityVerificationError1,
  ResendIdentityVerificationResponse,
  SendIdentityVerificationBodyCustomer,
  SendIdentityVerificationError as SendIdentityVerificationError1,
  SendIdentityVerificationResponse,
}

@ http - GET /identity-verifications/{identityVerificationId}
@ summary - 본인인증 단건 조회
@ description - 주어진 아이디에 대응되는 본인인증 내역을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetIdentityVerification =
  GetIdentityVerificationInput ->
  GetIdentityVerificationOutput throws GetIdentityVerificationError

struct GetIdentityVerificationInput {
  @ in - path
  @ summary - 조회할 본인인증 아이디
  identityVerificationId: string,

  @ in - query
  @ summary - 상점 아이디
  @ description - 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
  storeId?: string,
}

oneof GetIdentityVerificationOutput {
  @ status - 200
  @ description - 성공 응답으로 본인 인증 객체를 반환합니다.
  @ example - {"status":"VERIFIED","id":"your-identity-verification-id","channel":{"type":"LIVE","id":"your-channel-id","key":"your-channel-key","name":"your-channel-name","pgProvider":"DANAL","pgMerchantId":"your-pg-merchant-id"},"verifiedCustomer":{"id":"your-customer-id","name":"customer-name","operator":"KT_MVNO","phoneNumber":"01012345678","birthDate":"1992-10-16","gender":"FEMALE","isForeigner":false,"ci":"ci-value","di":"di-value"},"customData":"your-custom-data-string","requestedAt":"2023-10-15T23:59:59Z","updatedAt":"2023-10-16T00:00:00Z","statusChangedAt":"2023-10-16T00:00:00Z","verifiedAt":"2023-10-16T00:00:00Z","pgTxId":"transaction-id-from-pg-provider","pgRawResponse":"{ .. raw response from pg provider .. }","version":"V2"}
  IdentityVerification,
}

oneof GetIdentityVerificationError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetIdentityVerificationError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetIdentityVerificationError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetIdentityVerificationError1,

  @ status - 404
  @ description - * `IdentityVerificationNotFoundError`: 요청된 본인인증 건이 존재하지 않는 경우
  GetIdentityVerificationError1,
}

@ http - GET /identity-verifications
@ summary - 본인인증 내역 다건 조회
@ description - 주어진 조건에 맞는 본인인증 내역들을 페이지 기반으로 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetIdentityVerifications =
  GetIdentityVerificationsBody ->
  GetIdentityVerificationsOutput throws GetIdentityVerificationsError

oneof GetIdentityVerificationsOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 본인인증 내역 리스트와 페이지 정보가 반환됩니다.
  GetIdentityVerificationsResponse,
}

oneof GetIdentityVerificationsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetIdentityVerificationsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetIdentityVerificationsError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetIdentityVerificationsError1,
}

@ http - POST /identity-verifications/{identityVerificationId}/send
@ summary - 본인인증 요청 전송
@ description - SMS 또는 APP 방식을 이용하여 본인인증 요청을 전송합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc SendIdentityVerification =
  SendIdentityVerificationInput ->
  SendIdentityVerificationOutput throws SendIdentityVerificationError

@ description - 본인인증 요청을 위한 입력 정보
struct SendIdentityVerificationInput {
  @ in - path
  @ summary - 본인인증 아이디
  identityVerificationId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 채널 키
  channelKey: string,

  @ description - 고객 정보
  customer: SendIdentityVerificationBodyCustomer,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고)
  bypass?: object,

  @ description - 통신사
  operator: IdentityVerificationOperator,

  @ description - 본인인증 방식
  method: IdentityVerificationMethod,
}

oneof SendIdentityVerificationOutput {
  @ status - 200
  @ description - 성공 응답
  SendIdentityVerificationResponse,
}

oneof SendIdentityVerificationError {
  @ status - 400
  @ description
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  | * `MaxTransactionCountReachedError`: 결제 혹은 본인인증 시도 횟수가 최대에 도달한 경우
  SendIdentityVerificationError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  SendIdentityVerificationError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  SendIdentityVerificationError1,

  @ status - 404
  @ description
  | * `IdentityVerificationNotFoundError`: 요청된 본인인증 건이 존재하지 않는 경우
  | * `ChannelNotFoundError`: 요청된 채널이 존재하지 않는 경우
  SendIdentityVerificationError1,

  @ status - 409
  @ description
  | * `IdentityVerificationAlreadyVerifiedError`: 본인인증 건이 이미 인증 완료된 상태인 경우
  | * `IdentityVerificationAlreadySentError`: 본인인증 건이 이미 API로 요청된 상태인 경우
  SendIdentityVerificationError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  SendIdentityVerificationError1,
}

@ http - POST /identity-verifications/{identityVerificationId}/confirm
@ summary - 본인인증 확인
@ description - 요청된 본인인증에 대한 확인을 진행합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ConfirmIdentityVerification =
  ConfirmIdentityVerificationInput ->
  ConfirmIdentityVerificationOutput throws ConfirmIdentityVerificationError

@ description - 본인인증 확인을 위한 입력 정보
struct ConfirmIdentityVerificationInput {
  @ in - path
  @ summary - 본인인증 아이디
  identityVerificationId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - OTP (One-Time Password)
  otp?: string,
}

oneof ConfirmIdentityVerificationOutput {
  @ status - 200
  @ description - 성공 응답
  ConfirmIdentityVerificationResponse,
}

oneof ConfirmIdentityVerificationError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ConfirmIdentityVerificationError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ConfirmIdentityVerificationError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  ConfirmIdentityVerificationError1,

  @ status - 404
  @ description
  | * `IdentityVerificationNotFoundError`: 요청된 본인인증 건이 존재하지 않는 경우
  | * `IdentityVerificationNotSentError`: 본인인증 건이 API로 요청된 상태가 아닌 경우
  ConfirmIdentityVerificationError1,

  @ status - 409
  @ description - * `IdentityVerificationAlreadyVerifiedError`: 본인인증 건이 이미 인증 완료된 상태인 경우
  ConfirmIdentityVerificationError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  ConfirmIdentityVerificationError1,
}

@ http - POST /identity-verifications/{identityVerificationId}/resend
@ summary - SMS 본인인증 요청 재전송
@ description - SMS 본인인증 요청을 재전송합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ResendIdentityVerification =
  ResendIdentityVerificationInput ->
  ResendIdentityVerificationOutput throws ResendIdentityVerificationError

struct ResendIdentityVerificationInput {
  @ in - path
  @ summary - 본인인증 아이디
  identityVerificationId: string,

  @ in - query
  @ summary - 상점 아이디
  @ description - 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
  storeId?: string,
}

oneof ResendIdentityVerificationOutput {
  @ status - 200
  @ description - 성공 응답
  ResendIdentityVerificationResponse,
}

oneof ResendIdentityVerificationError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ResendIdentityVerificationError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ResendIdentityVerificationError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  ResendIdentityVerificationError1,

  @ status - 404
  @ description
  | * `IdentityVerificationNotFoundError`: 요청된 본인인증 건이 존재하지 않는 경우
  | * `IdentityVerificationNotSentError`: 본인인증 건이 API로 요청된 상태가 아닌 경우
  ResendIdentityVerificationError1,

  @ status - 409
  @ description - * `IdentityVerificationAlreadyVerifiedError`: 본인인증 건이 이미 인증 완료된 상태인 경우
  ResendIdentityVerificationError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  ResendIdentityVerificationError1,
}
