# standard - portone-rest-api

import portone.v2.api.data {
  ApplyEscrowLogisticsError as ApplyEscrowLogisticsError1,
  ApplyEscrowLogisticsResponse,
  CancelPaymentBodyRefundAccount,
  CancelPaymentError as CancelPaymentError1,
  CancelPaymentResponse,
  CancelRequester,
  CashReceiptInput,
  CloseVirtualAccountError as CloseVirtualAccountError1,
  CloseVirtualAccountResponse,
  ConfirmEscrowError as ConfirmEscrowError1,
  ConfirmEscrowResponse,
  Country,
  Currency,
  CustomerInput,
  GetAllPaymentsByCursorBody,
  GetAllPaymentsByCursorResponse,
  GetAllPaymentsError,
  GetPaymentError as GetPaymentError1,
  GetPaymentTransactionsError as GetPaymentTransactionsError1,
  GetPaymentTransactionsResponse,
  GetPaymentsBody,
  GetPaymentsError as GetPaymentsError1,
  GetPaymentsResponse,
  InstantPaymentMethodInput,
  ModifyEscrowLogisticsError as ModifyEscrowLogisticsError1,
  ModifyEscrowLogisticsResponse,
  PayInstantlyError as PayInstantlyError1,
  PayInstantlyResponse,
  PayWithBillingKeyError as PayWithBillingKeyError1,
  PayWithBillingKeyResponse,
  Payment,
  PaymentAmountInput,
  PaymentEscrowReceiverInput,
  PaymentEscrowSenderInput,
  PaymentLogistics,
  PaymentProduct,
  PaymentProductType,
  PreRegisterPaymentError as PreRegisterPaymentError1,
  PreRegisterPaymentResponse,
  PromotionDiscountRetainOption,
  RegisterStoreReceiptBodyItem,
  RegisterStoreReceiptError as RegisterStoreReceiptError1,
  RegisterStoreReceiptResponse,
  ResendWebhookError as ResendWebhookError1,
  ResendWebhookResponse,
  SeparatedAddressInput,
}

@ http - POST /payments/{paymentId}/pre-register
@ summary - 결제 정보 사전 등록
@ description - 결제 정보를 사전 등록합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc PreRegisterPayment =
  PreRegisterPaymentInput ->
  PreRegisterPaymentOutput throws PreRegisterPaymentError

@ description - 결제 정보 사전 등록 입력 정보
struct PreRegisterPaymentInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 결제 총 금액
  totalAmount?: int64,

  @ description - 결제 면세 금액
  taxFreeAmount?: int64,

  @ description - 통화 단위
  currency?: Currency,
}

oneof PreRegisterPaymentOutput {
  @ status - 200
  @ description - 성공 응답
  PreRegisterPaymentResponse,
}

oneof PreRegisterPaymentError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  PreRegisterPaymentError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  PreRegisterPaymentError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  PreRegisterPaymentError1,

  @ status - 409
  @ description - * `AlreadyPaidError`: 결제가 이미 완료된 경우
  PreRegisterPaymentError1,
}

@ http - GET /payments/{paymentId}
@ summary - 결제 단건 조회
@ description - 주어진 아이디에 대응되는 결제 건을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPayment = GetPaymentInput -> GetPaymentOutput throws GetPaymentError

struct GetPaymentInput {
  @ in - path
  @ summary - 조회할 결제 아이디
  paymentId: string,

  @ in - query
  @ summary - 상점 아이디
  storeId?: string,
}

oneof GetPaymentOutput {
  @ status - 200
  @ description - 성공 응답으로 결제 건 객체를 반환합니다.
  Payment,
}

oneof GetPaymentError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPaymentError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPaymentError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetPaymentError1,

  @ status - 404
  @ description - * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  GetPaymentError1,
}

@ http - GET /payments/{paymentId}/transactions
@ summary - 결제 시도 내역 조회
@ description - 주어진 아이디에 대응되는 결제 건의 결제 시도 내역을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPaymentTransactions =
  GetPaymentTransactionsInput ->
  GetPaymentTransactionsOutput throws GetPaymentTransactionsError

struct GetPaymentTransactionsInput {
  @ in - path
  @ summary - 조회할 결제 아이디
  paymentId: string,

  @ in - query
  @ summary - 상점 아이디
  storeId?: string,
}

oneof GetPaymentTransactionsOutput {
  @ status - 200
  @ description - 성공 응답으로 결제 시도 이력을 반환합니다.
  GetPaymentTransactionsResponse,
}

oneof GetPaymentTransactionsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPaymentTransactionsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPaymentTransactionsError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetPaymentTransactionsError1,

  @ status - 404
  @ description - * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  GetPaymentTransactionsError1,
}

@ http - GET /payments
@ summary - 결제 다건 조회(페이지 기반)
@ description - 주어진 조건에 맞는 결제 건들을 페이지 기반으로 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPayments = GetPaymentsBody -> GetPaymentsOutput throws GetPaymentsError

oneof GetPaymentsOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 결제 건 리스트와 페이지 정보가 반환됩니다.
  GetPaymentsResponse,
}

oneof GetPaymentsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPaymentsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPaymentsError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetPaymentsError1,
}

@ http - GET /payments-by-cursor
@ summary - 결제 대용량 다건 조회(커서 기반)
@ description - 기간 내 모든 결제 건을 커서 기반으로 조회합니다. 결제 건의 생성일시를 기준으로 주어진 기간 내 존재하는 모든 결제 건이 조회됩니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetAllPaymentsByCursor =
  GetAllPaymentsByCursorBody ->
  GetAllPaymentsByCursorOutput throws GetAllPaymentsByCursorError

oneof GetAllPaymentsByCursorOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 결제 건 리스트와 커서 정보가 반환됩니다.
  GetAllPaymentsByCursorResponse,
}

oneof GetAllPaymentsByCursorError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetAllPaymentsError,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetAllPaymentsError,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  GetAllPaymentsError,
}

@ http - POST /payments/{paymentId}/cancel
@ summary - 결제 취소
@ description - 결제 취소를 요청합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CancelPayment =
  CancelPaymentInput ->
  CancelPaymentOutput throws CancelPaymentError

@ description - 결제 취소 요청 입력 정보
struct CancelPaymentInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 취소 총 금액
  amount?: int64,

  @ description - 취소 금액 중 면세 금액
  taxFreeAmount?: int64,

  @ description - 취소 금액 중 부가세액
  vatAmount?: int64,

  @ description - 취소 사유
  reason: string,

  @ description - 취소 요청자
  requester?: CancelRequester,

  @ description - 프로모션 할인율 유지 옵션
  promotionDiscountRetainOption?: PromotionDiscountRetainOption,

  @ description - 결제 건의 취소 가능 잔액
  currentCancellableAmount?: int64,

  @ description - 환불 계좌
  refundAccount?: CancelPaymentBodyRefundAccount,
}

oneof CancelPaymentOutput {
  @ status - 200
  @ description - 성공 응답
  CancelPaymentResponse,
}

oneof CancelPaymentError {
  @ status - 400
  @ description
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  | * `NegativePromotionAdjustedCancelAmountError`: 프로모션에 의해 조정된 취소 금액이 음수인 경우
  | * `PromotionDiscountRetainOptionShouldNotBeChangedError`: 프로모션 혜택 유지 옵션을 이전 부분 취소와 다른 것으로 입력한 경우
  CancelPaymentError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CancelPaymentError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  CancelPaymentError1,

  @ status - 404
  @ description - * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  CancelPaymentError1,

  @ status - 409
  @ description
  | * `PaymentNotPaidError`: 결제가 완료되지 않은 경우
  | * `PaymentAlreadyCancelledError`: 결제가 이미 취소된 경우
  | * `CancellableAmountConsistencyBrokenError`: 취소 가능 잔액 검증에 실패한 경우
  | * `CancelAmountExceedsCancellableAmountError`: 결제 취소 금액이 취소 가능 금액을 초과한 경우
  | * `SumOfPartsExceedsCancelAmountError`: 면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우
  | * `CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError`: 취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우
  | * `CancelTaxAmountExceedsCancellableTaxAmountError`: 취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우
  CancelPaymentError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  CancelPaymentError1,
}

@ http - POST /payments/{paymentId}/billing-key
@ summary - 빌링키 결제
@ description - 빌링키로 결제를 진행합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc PayWithBillingKey =
  PayWithBillingKeyInput ->
  PayWithBillingKeyOutput throws PayWithBillingKeyError

@ description - 빌링키 결제 요청 입력 정보
struct PayWithBillingKeyInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 빌링키 결제에 사용할 빌링키
  billingKey: string,

  @ description - 채널 키
  channelKey?: string,

  @ description - 주문명
  orderName: string,

  @ description - 고객 정보
  customer?: CustomerInput,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 결제 금액 세부 입력 정보
  amount: PaymentAmountInput,

  @ description - 통화
  currency: Currency,

  @ description - 할부 개월 수
  installmentMonth?: int32,

  @ description - 무이자 할부 이자를 고객사가 부담할지 여부
  useFreeInterestFromMerchant?: boolean,

  @ description - 카드 포인트 사용 여부
  useCardPoint?: boolean,

  @ description - 현금영수증 정보
  cashReceipt?: CashReceiptInput,

  @ description - 결제 국가
  country?: Country,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 개수
  productCount?: int32,

  @ description - 상품 유형
  productType?: PaymentProductType,

  @ description - 배송지 주소
  shippingAddress?: SeparatedAddressInput,

  @ description - 해당 결제에 적용할 프로모션 아이디
  promotionId?: string,

  @ description - PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고)
  bypass?: object,
}

oneof PayWithBillingKeyOutput {
  @ status - 200
  @ description - 성공 응답
  PayWithBillingKeyResponse,
}

oneof PayWithBillingKeyError {
  @ status - 400
  @ description
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  | * `PromotionPayMethodDoesNotMatchError`: 결제수단이 프로모션에 지정된 것과 일치하지 않는 경우
  | * `DiscountAmountExceedsTotalAmountError`: 프로모션 할인 금액이 결제 시도 금액 이상인 경우
  | * `MaxTransactionCountReachedError`: 결제 혹은 본인인증 시도 횟수가 최대에 도달한 경우
  PayWithBillingKeyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  PayWithBillingKeyError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  PayWithBillingKeyError1,

  @ status - 404
  @ description
  | * `BillingKeyNotFoundError`: 빌링키가 존재하지 않는 경우
  | * `ChannelNotFoundError`: 요청된 채널이 존재하지 않는 경우
  PayWithBillingKeyError1,

  @ status - 409
  @ description
  | * `AlreadyPaidError`: 결제가 이미 완료된 경우
  | * `SumOfPartsExceedsTotalAmountError`: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
  | * `BillingKeyAlreadyDeletedError`: 빌링키가 이미 삭제된 경우
  | * `PaymentScheduleAlreadyExistsError`: 결제 예약건이 이미 존재하는 경우
  PayWithBillingKeyError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  PayWithBillingKeyError1,
}

@ http - POST /payments/{paymentId}/instant
@ summary - 수기 결제
@ description - 수기 결제를 진행합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc PayInstantly =
  PayInstantlyInput ->
  PayInstantlyOutput throws PayInstantlyError

@ description - 수기 결제 요청 정보
struct PayInstantlyInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 채널 키
  channelKey?: string,

  @ description - 채널 그룹 ID
  channelGroupId?: string,

  @ description - 결제수단 정보
  method: InstantPaymentMethodInput,

  @ description - 주문명
  orderName: string,

  @ description - 문화비 지출 여부
  isCulturalExpense?: boolean,

  @ description - 에스크로 결제 여부
  isEscrow?: boolean,

  @ description - 고객 정보
  customer?: CustomerInput,

  @ description - 사용자 지정 데이터
  customData?: string,

  @ description - 결제 금액 세부 입력 정보
  amount: PaymentAmountInput,

  @ description - 통화
  currency: Currency,

  @ description - 결제 국가
  country?: Country,

  @ description - 웹훅 주소
  noticeUrls?: string[],

  @ description - 상품 정보
  products?: PaymentProduct[],

  @ description - 상품 개수
  productCount?: int32,

  @ description - 상품 유형
  productType?: PaymentProductType,

  @ description - 배송지 주소
  shippingAddress?: SeparatedAddressInput,

  @ description - 해당 결제에 적용할 프로모션 아이디
  promotionId?: string,
}

oneof PayInstantlyOutput {
  @ status - 200
  @ description - 성공 응답
  PayInstantlyResponse,
}

oneof PayInstantlyError {
  @ status - 400
  @ description
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  | * `PromotionPayMethodDoesNotMatchError`: 결제수단이 프로모션에 지정된 것과 일치하지 않는 경우
  | * `DiscountAmountExceedsTotalAmountError`: 프로모션 할인 금액이 결제 시도 금액 이상인 경우
  | * `MaxTransactionCountReachedError`: 결제 혹은 본인인증 시도 횟수가 최대에 도달한 경우
  PayInstantlyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  PayInstantlyError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  PayInstantlyError1,

  @ status - 404
  @ description - * `ChannelNotFoundError`: 요청된 채널이 존재하지 않는 경우
  PayInstantlyError1,

  @ status - 409
  @ description
  | * `AlreadyPaidError`: 결제가 이미 완료된 경우
  | * `SumOfPartsExceedsTotalAmountError`: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
  | * `PaymentScheduleAlreadyExistsError`: 결제 예약건이 이미 존재하는 경우
  PayInstantlyError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  PayInstantlyError1,
}

@ http - POST /payments/{paymentId}/virtual-account/close
@ summary - 가상계좌 말소
@ description - 발급된 가상계좌를 말소합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CloseVirtualAccount =
  CloseVirtualAccountInput ->
  CloseVirtualAccountOutput throws CloseVirtualAccountError

struct CloseVirtualAccountInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ in - query
  @ summary - 상점 아이디
  @ description - 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
  storeId?: string,
}

oneof CloseVirtualAccountOutput {
  @ status - 200
  @ description - 성공 응답
  CloseVirtualAccountResponse,
}

oneof CloseVirtualAccountError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CloseVirtualAccountError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CloseVirtualAccountError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  CloseVirtualAccountError1,

  @ status - 404
  @ description - * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  CloseVirtualAccountError1,

  @ status - 409
  @ description - * `PaymentNotWaitingForDepositError`: 결제 건이 입금 대기 상태가 아닌 경우
  CloseVirtualAccountError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  CloseVirtualAccountError1,
}

@ http - POST /payments/{paymentId}/escrow/logistics
@ summary - 에스크로 배송 정보 등록
@ description - 에스크로 배송 정보를 등록합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ApplyEscrowLogistics =
  ApplyEscrowLogisticsInput ->
  ApplyEscrowLogisticsOutput throws ApplyEscrowLogisticsError

@ description - 에스크로 배송 정보 등록 입력 정보
struct ApplyEscrowLogisticsInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 에스크로 발송자 정보
  sender?: PaymentEscrowSenderInput,

  @ description - 에스크로 수취인 정보
  receiver?: PaymentEscrowReceiverInput,

  @ description - 에스크로 물류 정보
  logistics: PaymentLogistics,

  @ description - 이메일 알림 전송 여부
  sendEmail?: boolean,

  @ description - 상품 정보
  products?: PaymentProduct[],
}

oneof ApplyEscrowLogisticsOutput {
  @ status - 200
  @ description - 성공 응답
  ApplyEscrowLogisticsResponse,
}

oneof ApplyEscrowLogisticsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ApplyEscrowLogisticsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ApplyEscrowLogisticsError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  ApplyEscrowLogisticsError1,

  @ status - 404
  @ description - * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  ApplyEscrowLogisticsError1,

  @ status - 409
  @ description - * `PaymentNotPaidError`: 결제가 완료되지 않은 경우
  ApplyEscrowLogisticsError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  ApplyEscrowLogisticsError1,
}

@ http - PATCH /payments/{paymentId}/escrow/logistics
@ summary - 에스크로 배송 정보 수정
@ description - 에스크로 배송 정보를 수정합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ModifyEscrowLogistics =
  ModifyEscrowLogisticsInput ->
  ModifyEscrowLogisticsOutput throws ModifyEscrowLogisticsError

@ description - 에스크로 배송 정보 수정 입력 정보
struct ModifyEscrowLogisticsInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 에스크로 발송자 정보
  sender?: PaymentEscrowSenderInput,

  @ description - 에스크로 수취인 정보
  receiver?: PaymentEscrowReceiverInput,

  @ description - 에스크로 물류 정보
  logistics: PaymentLogistics,

  @ description - 이메일 알림 전송 여부
  sendEmail?: boolean,

  @ description - 상품 정보
  products?: PaymentProduct[],
}

oneof ModifyEscrowLogisticsOutput {
  @ status - 200
  @ description - 성공 응답
  ModifyEscrowLogisticsResponse,
}

oneof ModifyEscrowLogisticsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ModifyEscrowLogisticsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ModifyEscrowLogisticsError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  ModifyEscrowLogisticsError1,

  @ status - 404
  @ description - * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  ModifyEscrowLogisticsError1,

  @ status - 409
  @ description - * `PaymentNotPaidError`: 결제가 완료되지 않은 경우
  ModifyEscrowLogisticsError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  ModifyEscrowLogisticsError1,
}

@ http - POST /payments/{paymentId}/escrow/complete
@ summary - 에스크로 구매 확정
@ description - 에스크로 결제를 구매 확정 처리합니다
@ security
| - bearerJwt: []
| - portOne: []
proc ConfirmEscrow =
  ConfirmEscrowInput ->
  ConfirmEscrowOutput throws ConfirmEscrowError

@ description - 에스크로 구매 확정 입력 정보
struct ConfirmEscrowInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 확인 주체가 상점인지 여부
  fromStore?: boolean,
}

oneof ConfirmEscrowOutput {
  @ status - 200
  @ description - 성공 응답
  ConfirmEscrowResponse,
}

oneof ConfirmEscrowError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ConfirmEscrowError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ConfirmEscrowError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  ConfirmEscrowError1,

  @ status - 404
  @ description - * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  ConfirmEscrowError1,

  @ status - 409
  @ description - * `PaymentNotPaidError`: 결제가 완료되지 않은 경우
  ConfirmEscrowError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  ConfirmEscrowError1,
}

@ http - POST /payments/{paymentId}/resend-webhook
@ summary - 웹훅 재발송
@ description - 웹훅을 재발송합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ResendWebhook =
  ResendWebhookInput ->
  ResendWebhookOutput throws ResendWebhookError

@ description - 웹훅 재발송을 위한 입력 정보
struct ResendWebhookInput {
  @ in - path
  @ summary - 결제 건 아이디
  paymentId: string,

  @ description - 상점 아이디
  storeId?: string,

  @ description - 웹훅 아이디
  webhookId?: string,
}

oneof ResendWebhookOutput {
  @ status - 200
  @ description - 성공 응답
  ResendWebhookResponse,
}

oneof ResendWebhookError {
  @ status - 400
  @ description
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  | * `MaxWebhookRetryCountReachedError`: 동일한 webhook id에 대한 수동 재시도 횟수가 최대에 도달한 경우
  ResendWebhookError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ResendWebhookError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  ResendWebhookError1,

  @ status - 404
  @ description
  | * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  | * `WebhookNotFoundError`: 웹훅 내역이 존재하지 않는 경우
  ResendWebhookError1,
}

@ http - POST /payments/{paymentId}/register-store-receipt
@ summary - 영수증 내 하위 상점 거래 등록
@ description
| 결제 내역 매출전표에 하위 상점의 거래를 등록합니다.
| 지원되는 PG사:
| KG이니시스(이용 전 콘솔 -> 결제연동 탭에서 INIApi Key 등록 필요)
@ security
| - bearerJwt: []
| - portOne: []
proc RegisterStoreReceipt =
  RegisterStoreReceiptInput ->
  RegisterStoreReceiptOutput throws RegisterStoreReceiptError

@ description - 영수증 내 하위 상점 거래 등록 정보
struct RegisterStoreReceiptInput {
  @ in - path
  @ summary - 등록할 하위 상점 결제 건 아이디
  paymentId: string,

  @ description - 하위 상점 거래 목록
  items: RegisterStoreReceiptBodyItem[],

  @ description - 상점 아이디
  storeId?: string,
}

oneof RegisterStoreReceiptOutput {
  @ status - 200
  @ description - 성공 응답
  RegisterStoreReceiptResponse,
}

oneof RegisterStoreReceiptError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  RegisterStoreReceiptError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  RegisterStoreReceiptError1,

  @ status - 403
  @ description - * `ForbiddenError`: 요청이 거절된 경우
  RegisterStoreReceiptError1,

  @ status - 404
  @ description - * `PaymentNotFoundError`: 결제 건이 존재하지 않는 경우
  RegisterStoreReceiptError1,

  @ status - 409
  @ description - * `PaymentNotPaidError`: 결제가 완료되지 않은 경우
  RegisterStoreReceiptError1,

  @ status - 502
  @ description - * `PgProviderError`: PG사에서 오류를 전달한 경우
  RegisterStoreReceiptError1,
}
