# standard - portone-rest-api

import portone.v2.api.data {
  CreateManualTransferResponse,
  CreateOrderCancelTransferResponse,
  CreateOrderTransferResponse,
  CreatePlatformManualTransferBody,
  CreatePlatformManualTransferError as CreatePlatformManualTransferError1,
  CreatePlatformOrderCancelTransferBody,
  CreatePlatformOrderCancelTransferError as CreatePlatformOrderCancelTransferError1,
  CreatePlatformOrderTransferBody,
  CreatePlatformOrderTransferError as CreatePlatformOrderTransferError1,
  DeletePlatformTransferError as DeletePlatformTransferError1,
  DeletePlatformTransferResponse,
  DownloadPlatformTransferSheetBody,
  DownloadPlatformTransferSheetError as DownloadPlatformTransferSheetError1,
  GetPlatformTransferError as GetPlatformTransferError1,
  GetPlatformTransferSummariesBody,
  GetPlatformTransferSummariesError as GetPlatformTransferSummariesError1,
  GetPlatformTransferSummariesResponse,
  PlatformTransfer,
}

@ http - GET /platform/transfers/{id}
@ summary - 정산건 조회
@ description - 정산건을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformTransfer =
  GetPlatformTransferInput ->
  GetPlatformTransferOutput throws GetPlatformTransferError

struct GetPlatformTransferInput {
  @ in - path
  @ summary - 조회하고 싶은 정산건 아이디
  id: string,
}

oneof GetPlatformTransferOutput {
  @ status - 200
  @ description - 성공 응답으로 정산건 객체가 반환됩니다.
  PlatformTransfer,
}

oneof GetPlatformTransferError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformTransferError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformTransferError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformTransferError1,

  @ status - 404
  @ description - * `PlatformTransferNotFoundError`
  GetPlatformTransferError1,
}

@ http - DELETE /platform/transfers/{id}
@ summary - 정산건 삭제
@ description - scheduled, in_process 상태의 정산건만 삭제가능합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc DeletePlatformTransfer =
  DeletePlatformTransferInput ->
  DeletePlatformTransferOutput throws DeletePlatformTransferError

struct DeletePlatformTransferInput {
  @ in - path
  @ summary - 정산건 아이디
  id: string,
}

oneof DeletePlatformTransferOutput {
  @ status - 200
  DeletePlatformTransferResponse,
}

oneof DeletePlatformTransferError {
  @ status - 400
  @ description
  | * `PlatformCancelOrderTransfersExistsError`
  | * `PlatformTransferNonDeletableStatusError`
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  DeletePlatformTransferError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  DeletePlatformTransferError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  DeletePlatformTransferError1,

  @ status - 404
  @ description - * `PlatformTransferNotFoundError`
  DeletePlatformTransferError1,
}

@ http - GET /platform/transfer-summaries
@ summary - 정산건 다건 조회
@ description - 성공 응답으로 조회된 정산건 요약 리스트와 페이지 정보가 반환됩니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformTransferSummaries =
  GetPlatformTransferSummariesBody ->
  GetPlatformTransferSummariesOutput throws GetPlatformTransferSummariesError

oneof GetPlatformTransferSummariesOutput {
  @ status - 200
  GetPlatformTransferSummariesResponse,
}

oneof GetPlatformTransferSummariesError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformTransferSummariesError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformTransferSummariesError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformTransferSummariesError1,
}

@ http - POST /platform/transfers/order
@ summary - 주문 정산건 생성
@ description - 성공 응답으로 생성된 주문 정산건 객체가 반환됩니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CreatePlatformOrderTransfer =
  CreatePlatformOrderTransferBody ->
  CreatePlatformOrderTransferOutput throws CreatePlatformOrderTransferError

oneof CreatePlatformOrderTransferOutput {
  @ status - 200
  CreateOrderTransferResponse,
}

oneof CreatePlatformOrderTransferError {
  @ status - 400
  @ description
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  | * `PlatformProductIdDuplicatedError`
  | * `PlatformSettlementPaymentAmountExceededPortOnePaymentError`: 정산 요청 결제 금액이 포트원 결제 내역의 결제 금액을 초과한 경우
  | * `PlatformSettlementTaxFreeAmountExceededPortOnePaymentError`: 정산 요청 면세 금액이 포트원 결제 내역의 면세 금액을 초과한 경우
  | * `PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError`: 정산 요청 공급대가가 포트원 결제 내역의 공급대가를 초과한 경우
  | * `PlatformSettlementAmountExceededError`: 정산 가능한 금액을 초과한 경우
  | * `PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError`
  | * `PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError`
  | * `PlatformCurrencyNotSupportedError`: 지원 되지 않는 통화를 선택한 경우
  CreatePlatformOrderTransferError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CreatePlatformOrderTransferError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CreatePlatformOrderTransferError1,

  @ status - 404
  @ description
  | * `PlatformPartnerNotFoundError`
  | * `PlatformContractNotFoundError`
  | * `PlatformAdditionalFeePoliciesNotFoundError`
  | * `PlatformDiscountSharePoliciesNotFoundError`
  | * `PlatformPaymentNotFoundError`
  | * `PlatformUserDefinedPropertyNotFoundError`: 사용자 정의 속성이 존재 하지 않는 경우
  | * `PlatformSettlementParameterNotFoundError`: 정산 파라미터가 존재하지 않는 경우
  CreatePlatformOrderTransferError1,

  @ status - 409
  @ description - * `PlatformTransferAlreadyExistsError`
  CreatePlatformOrderTransferError1,
}

@ http - POST /platform/transfers/order-cancel
@ summary - 주문 취소 정산건 생성
@ description - 성공 응답으로 생성된 주문 취소 정산건 객체가 반환됩니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CreatePlatformOrderCancelTransfer =
  CreatePlatformOrderCancelTransferBody ->
  CreatePlatformOrderCancelTransferOutput throws CreatePlatformOrderCancelTransferError

oneof CreatePlatformOrderCancelTransferOutput {
  @ status - 200
  CreateOrderCancelTransferResponse,
}

oneof CreatePlatformOrderCancelTransferError {
  @ status - 400
  @ description
  | * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  | * `PlatformOrderDetailMismatchedError`
  | * `PlatformDiscountSharePolicyIdDuplicatedError`
  | * `PlatformCancellableAmountExceededError`: 취소 가능한 금액이 초과한 경우
  | * `PlatformCancellableDiscountAmountExceededError`
  | * `PlatformCancellableDiscountTaxFreeAmountExceededError`
  | * `PlatformProductIdDuplicatedError`
  | * `PlatformCancellableProductQuantityExceededError`
  | * `PlatformOrderTransferAlreadyCancelledError`
  | * `PlatformSettlementAmountExceededError`: 정산 가능한 금액을 초과한 경우
  | * `PlatformCancellationAndPaymentTypeMismatchedError`
  | * `PlatformSettlementCancelAmountExceededPortOneCancelError`: 정산 취소 요청 금액이 포트원 결제 취소 내역의 취소 금액을 초과한 경우
  | * `PlatformCannotSpecifyTransferError`: 정산 건 식별에 실패한 경우
  CreatePlatformOrderCancelTransferError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CreatePlatformOrderCancelTransferError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CreatePlatformOrderCancelTransferError1,

  @ status - 404
  @ description
  | * `PlatformTransferNotFoundError`
  | * `PlatformCancellationNotFoundError`
  | * `PlatformPaymentNotFoundError`
  | * `PlatformProductIdNotFoundError`
  | * `PlatformTransferDiscountSharePolicyNotFoundError`
  | * `PlatformUserDefinedPropertyNotFoundError`: 사용자 정의 속성이 존재 하지 않는 경우
  CreatePlatformOrderCancelTransferError1,

  @ status - 409
  @ description - * `PlatformTransferAlreadyExistsError`
  CreatePlatformOrderCancelTransferError1,
}

@ http - POST /platform/transfers/manual
@ summary - 수기 정산건 생성
@ description - 성공 응답으로 생성된 수기 정산건 객체가 반환됩니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CreatePlatformManualTransfer =
  CreatePlatformManualTransferBody ->
  CreatePlatformManualTransferOutput throws CreatePlatformManualTransferError

oneof CreatePlatformManualTransferOutput {
  @ status - 200
  CreateManualTransferResponse,
}

oneof CreatePlatformManualTransferError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CreatePlatformManualTransferError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CreatePlatformManualTransferError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CreatePlatformManualTransferError1,

  @ status - 404
  @ description
  | * `PlatformPartnerNotFoundError`
  | * `PlatformUserDefinedPropertyNotFoundError`: 사용자 정의 속성이 존재 하지 않는 경우
  CreatePlatformManualTransferError1,
}

@ http - GET /platform/transfer-summaries/sheet-file
@ summary - 정산 상세 내역 다운로드
@ description - 정산 상세 내역을 csv 파일로 다운로드 합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc DownloadPlatformTransferSheet =
  DownloadPlatformTransferSheetBody ->
  void throws DownloadPlatformTransferSheetError

oneof DownloadPlatformTransferSheetError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  DownloadPlatformTransferSheetError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  DownloadPlatformTransferSheetError1,
}
