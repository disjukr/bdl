# standard - portone-rest-api

import portone.v2.api.data {
  ArchivePlatformAdditionalFeePolicyError as ArchivePlatformAdditionalFeePolicyError1,
  ArchivePlatformAdditionalFeePolicyResponse,
  ArchivePlatformContractError as ArchivePlatformContractError1,
  ArchivePlatformContractResponse,
  ArchivePlatformDiscountSharePolicyError as ArchivePlatformDiscountSharePolicyError1,
  ArchivePlatformDiscountSharePolicyResponse,
  CreatePlatformAdditionalFeePolicyBody,
  CreatePlatformAdditionalFeePolicyError as CreatePlatformAdditionalFeePolicyError1,
  CreatePlatformAdditionalFeePolicyResponse,
  CreatePlatformContractBody,
  CreatePlatformContractError as CreatePlatformContractError1,
  CreatePlatformContractResponse,
  CreatePlatformDiscountSharePolicyBody,
  CreatePlatformDiscountSharePolicyError as CreatePlatformDiscountSharePolicyError1,
  CreatePlatformDiscountSharePolicyResponse,
  GetPlatformAdditionalFeePoliciesBody,
  GetPlatformAdditionalFeePoliciesError as GetPlatformAdditionalFeePoliciesError1,
  GetPlatformAdditionalFeePoliciesResponse,
  GetPlatformAdditionalFeePolicyError as GetPlatformAdditionalFeePolicyError1,
  GetPlatformContractError as GetPlatformContractError1,
  GetPlatformContractsBody,
  GetPlatformContractsError as GetPlatformContractsError1,
  GetPlatformContractsResponse,
  GetPlatformDiscountSharePoliciesBody,
  GetPlatformDiscountSharePoliciesError as GetPlatformDiscountSharePoliciesError1,
  GetPlatformDiscountSharePoliciesResponse,
  GetPlatformDiscountSharePolicyError as GetPlatformDiscountSharePolicyError1,
  PlatformAdditionalFeePolicy,
  PlatformContract,
  PlatformDiscountSharePolicy,
  PlatformFeeInput,
  PlatformPayer,
  PlatformSettlementCycleInput,
  RecoverPlatformAdditionalFeePolicyError as RecoverPlatformAdditionalFeePolicyError1,
  RecoverPlatformAdditionalFeePolicyResponse,
  RecoverPlatformContractError as RecoverPlatformContractError1,
  RecoverPlatformContractResponse,
  RecoverPlatformDiscountSharePolicyError as RecoverPlatformDiscountSharePolicyError1,
  RecoverPlatformDiscountSharePolicyResponse,
  UpdatePlatformAdditionalFeePolicyError as UpdatePlatformAdditionalFeePolicyError1,
  UpdatePlatformAdditionalFeePolicyResponse,
  UpdatePlatformContractError as UpdatePlatformContractError1,
  UpdatePlatformContractResponse,
  UpdatePlatformDiscountSharePolicyError as UpdatePlatformDiscountSharePolicyError1,
  UpdatePlatformDiscountSharePolicyResponse,
}

@ http - GET /platform/discount-share-policies
@ summary - 할인 분담 정책 다건 조회
@ description - 여러 할인 분담을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformDiscountSharePolicies =
  GetPlatformDiscountSharePoliciesBody ->
  GetPlatformDiscountSharePoliciesOutput throws GetPlatformDiscountSharePoliciesError

oneof GetPlatformDiscountSharePoliciesOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 할인 분담 정책 리스트와 페이지 정보가 반환됩니다.
  GetPlatformDiscountSharePoliciesResponse,
}

oneof GetPlatformDiscountSharePoliciesError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformDiscountSharePoliciesError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformDiscountSharePoliciesError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformDiscountSharePoliciesError1,
}

@ http - POST /platform/discount-share-policies
@ summary - 할인 분담 정책 생성
@ description - 새로운 할인 분담을 생성합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CreatePlatformDiscountSharePolicy =
  CreatePlatformDiscountSharePolicyBody ->
  CreatePlatformDiscountSharePolicyOutput throws CreatePlatformDiscountSharePolicyError

oneof CreatePlatformDiscountSharePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 생성된 할인 분담 정책이 반환됩니다.
  CreatePlatformDiscountSharePolicyResponse,
}

oneof CreatePlatformDiscountSharePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CreatePlatformDiscountSharePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CreatePlatformDiscountSharePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CreatePlatformDiscountSharePolicyError1,

  @ status - 409
  @ description - * `PlatformDiscountSharePolicyAlreadyExistsError`
  CreatePlatformDiscountSharePolicyError1,
}

@ http - GET /platform/discount-share-policies/{id}
@ summary - 할인 분담 정책 조회
@ description - 주어진 아이디에 대응되는 할인 분담을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformDiscountSharePolicy =
  GetPlatformDiscountSharePolicyInput ->
  GetPlatformDiscountSharePolicyOutput throws GetPlatformDiscountSharePolicyError

struct GetPlatformDiscountSharePolicyInput {
  @ in - path
  @ summary - 조회할 할인 분담 정책 아이디
  id: string,
}

oneof GetPlatformDiscountSharePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 할인 분담 정책을 반환합니다.
  PlatformDiscountSharePolicy,
}

oneof GetPlatformDiscountSharePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformDiscountSharePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformDiscountSharePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformDiscountSharePolicyError1,

  @ status - 404
  @ description - * `PlatformDiscountSharePolicyNotFoundError`
  GetPlatformDiscountSharePolicyError1,
}

@ http - PATCH /platform/discount-share-policies/{id}
@ summary - 할인 분담 정책 수정
@ description - 주어진 아이디에 대응되는 할인 분담을 업데이트합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc UpdatePlatformDiscountSharePolicy =
  UpdatePlatformDiscountSharePolicyInput ->
  UpdatePlatformDiscountSharePolicyOutput throws UpdatePlatformDiscountSharePolicyError

@ description - 값이 명시되지 않은 필드는 업데이트하지 않습니다.
struct UpdatePlatformDiscountSharePolicyInput {
  @ in - path
  @ summary - 업데이트할 할인 분담 정책 아이디
  id: string,

  @ description - 할인 분담 정책 이름
  name?: string,

  @ description - 할인 분담율
  partnerShareRate?: int32,

  @ description - 해당 할인 분담에 대한 메모
  memo?: string,
}

oneof UpdatePlatformDiscountSharePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 업데이트된 할인 분담 정책을 반환합니다.
  UpdatePlatformDiscountSharePolicyResponse,
}

oneof UpdatePlatformDiscountSharePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  UpdatePlatformDiscountSharePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  UpdatePlatformDiscountSharePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  UpdatePlatformDiscountSharePolicyError1,

  @ status - 404
  @ description - * `PlatformDiscountSharePolicyNotFoundError`
  UpdatePlatformDiscountSharePolicyError1,

  @ status - 409
  @ description - * `PlatformArchivedDiscountSharePolicyError`: 보관된 할인 분담 정책을 업데이트하려고 하는 경우
  UpdatePlatformDiscountSharePolicyError1,
}

@ http - POST /platform/discount-share-policies/{id}/archive
@ summary - 할인 분담 정책 보관
@ description - 주어진 아이디에 대응되는 할인 분담을 보관합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ArchivePlatformDiscountSharePolicy =
  ArchivePlatformDiscountSharePolicyInput ->
  ArchivePlatformDiscountSharePolicyOutput throws ArchivePlatformDiscountSharePolicyError

struct ArchivePlatformDiscountSharePolicyInput {
  @ in - path
  @ summary - 할인 분담 아이디
  id: string,
}

oneof ArchivePlatformDiscountSharePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 보관된 할인 분담 객체를 반환합니다.
  ArchivePlatformDiscountSharePolicyResponse,
}

oneof ArchivePlatformDiscountSharePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ArchivePlatformDiscountSharePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ArchivePlatformDiscountSharePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  ArchivePlatformDiscountSharePolicyError1,

  @ status - 404
  @ description - * `PlatformDiscountSharePolicyNotFoundError`
  ArchivePlatformDiscountSharePolicyError1,

  @ status - 409
  @ description - * `PlatformCannotArchiveScheduledDiscountSharePolicyError`: 예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우
  ArchivePlatformDiscountSharePolicyError1,
}

@ http - POST /platform/discount-share-policies/{id}/recover
@ summary - 할인 분담 정책 복원
@ description - 주어진 아이디에 대응되는 할인 분담을 복원합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc RecoverPlatformDiscountSharePolicy =
  RecoverPlatformDiscountSharePolicyInput ->
  RecoverPlatformDiscountSharePolicyOutput throws RecoverPlatformDiscountSharePolicyError

struct RecoverPlatformDiscountSharePolicyInput {
  @ in - path
  @ summary - 할인 분담 아이디
  id: string,
}

oneof RecoverPlatformDiscountSharePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 복원된 할인 분담 객체를 반환합니다.
  RecoverPlatformDiscountSharePolicyResponse,
}

oneof RecoverPlatformDiscountSharePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  RecoverPlatformDiscountSharePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  RecoverPlatformDiscountSharePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  RecoverPlatformDiscountSharePolicyError1,

  @ status - 404
  @ description - * `PlatformDiscountSharePolicyNotFoundError`
  RecoverPlatformDiscountSharePolicyError1,
}

@ http - GET /platform/additional-fee-policies
@ summary - 추가 수수료 정책 다건 조회
@ description - 여러 추가 수수료 정책을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformAdditionalFeePolicies =
  GetPlatformAdditionalFeePoliciesBody ->
  GetPlatformAdditionalFeePoliciesOutput throws GetPlatformAdditionalFeePoliciesError

oneof GetPlatformAdditionalFeePoliciesOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 추가 수수료 정책 리스트와 페이지 정보를 반환합니다.
  GetPlatformAdditionalFeePoliciesResponse,
}

oneof GetPlatformAdditionalFeePoliciesError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformAdditionalFeePoliciesError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformAdditionalFeePoliciesError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformAdditionalFeePoliciesError1,
}

@ http - POST /platform/additional-fee-policies
@ summary - 추가 수수료 정책 생성
@ description - 새로운 추가 수수료 정책을 생성합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CreatePlatformAdditionalFeePolicy =
  CreatePlatformAdditionalFeePolicyBody ->
  CreatePlatformAdditionalFeePolicyOutput throws CreatePlatformAdditionalFeePolicyError

oneof CreatePlatformAdditionalFeePolicyOutput {
  @ status - 200
  @ description - 성공 응답
  CreatePlatformAdditionalFeePolicyResponse,
}

oneof CreatePlatformAdditionalFeePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CreatePlatformAdditionalFeePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CreatePlatformAdditionalFeePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CreatePlatformAdditionalFeePolicyError1,

  @ status - 409
  @ description - * `PlatformAdditionalFeePolicyAlreadyExistsError`
  CreatePlatformAdditionalFeePolicyError1,
}

@ http - GET /platform/additional-fee-policies/{id}
@ summary - 추가 수수료 정책 조회
@ description - 주어진 아이디에 대응되는 추가 수수료 정책을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformAdditionalFeePolicy =
  GetPlatformAdditionalFeePolicyInput ->
  GetPlatformAdditionalFeePolicyOutput throws GetPlatformAdditionalFeePolicyError

struct GetPlatformAdditionalFeePolicyInput {
  @ in - path
  @ summary - 조회할 추가 수수료 정책 아이디
  id: string,
}

oneof GetPlatformAdditionalFeePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 추가 수수료 정책을 반환합니다.
  PlatformAdditionalFeePolicy,
}

oneof GetPlatformAdditionalFeePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformAdditionalFeePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformAdditionalFeePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformAdditionalFeePolicyError1,

  @ status - 404
  @ description - * `PlatformAdditionalFeePolicyNotFoundError`
  GetPlatformAdditionalFeePolicyError1,
}

@ http - PATCH /platform/additional-fee-policies/{id}
@ summary - 추가 수수료 정책 수정
@ description - 주어진 아이디에 대응되는 추가 수수료 정책을 업데이트합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc UpdatePlatformAdditionalFeePolicy =
  UpdatePlatformAdditionalFeePolicyInput ->
  UpdatePlatformAdditionalFeePolicyOutput throws UpdatePlatformAdditionalFeePolicyError

@ description - 값이 명시하지 않은 필드는 업데이트되지 않습니다.
struct UpdatePlatformAdditionalFeePolicyInput {
  @ in - path
  @ summary - 업데이트할 추가 수수료 정책 아이디
  id: string,

  @ description - 책정 수수료
  fee?: PlatformFeeInput,

  @ description - 추가 수수료 정책 이름
  name?: string,

  @ description - 해당 추가 수수료 정책에 대한 메모
  memo?: string,

  @ description - 부가세를 부담할 주체
  vatPayer?: PlatformPayer,
}

oneof UpdatePlatformAdditionalFeePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 업데이트된 추가 수수료 정책이 반환됩니다.
  UpdatePlatformAdditionalFeePolicyResponse,
}

oneof UpdatePlatformAdditionalFeePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  UpdatePlatformAdditionalFeePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  UpdatePlatformAdditionalFeePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  UpdatePlatformAdditionalFeePolicyError1,

  @ status - 404
  @ description - * `PlatformAdditionalFeePolicyNotFoundError`
  UpdatePlatformAdditionalFeePolicyError1,

  @ status - 409
  @ description - * `PlatformArchivedAdditionalFeePolicyError`: 보관된 추가 수수료 정책을 업데이트하려고 하는 경우
  UpdatePlatformAdditionalFeePolicyError1,
}

@ http - POST /platform/additional-fee-policies/{id}/archive
@ summary - 추가 수수료 정책 보관
@ description - 주어진 아이디에 대응되는 추가 수수료 정책을 보관합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ArchivePlatformAdditionalFeePolicy =
  ArchivePlatformAdditionalFeePolicyInput ->
  ArchivePlatformAdditionalFeePolicyOutput throws ArchivePlatformAdditionalFeePolicyError

struct ArchivePlatformAdditionalFeePolicyInput {
  @ in - path
  @ summary - 추가 수수료 정책 아이디
  id: string,
}

oneof ArchivePlatformAdditionalFeePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 보관된 추가 수수료 정책 객체를 반환합니다.
  ArchivePlatformAdditionalFeePolicyResponse,
}

oneof ArchivePlatformAdditionalFeePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ArchivePlatformAdditionalFeePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ArchivePlatformAdditionalFeePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  ArchivePlatformAdditionalFeePolicyError1,

  @ status - 404
  @ description - * `PlatformAdditionalFeePolicyNotFoundError`
  ArchivePlatformAdditionalFeePolicyError1,

  @ status - 409
  @ description - * `PlatformCannotArchiveScheduledAdditionalFeePolicyError`: 예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우
  ArchivePlatformAdditionalFeePolicyError1,
}

@ http - POST /platform/additional-fee-policies/{id}/recover
@ summary - 추가 수수료 정책 복원
@ description - 주어진 아이디에 대응되는 추가 수수료 정책을 복원합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc RecoverPlatformAdditionalFeePolicy =
  RecoverPlatformAdditionalFeePolicyInput ->
  RecoverPlatformAdditionalFeePolicyOutput throws RecoverPlatformAdditionalFeePolicyError

struct RecoverPlatformAdditionalFeePolicyInput {
  @ in - path
  @ summary - 추가 수수료 정책 아이디
  id: string,
}

oneof RecoverPlatformAdditionalFeePolicyOutput {
  @ status - 200
  @ description - 성공 응답으로 복원된 추가 수수료 정책 객체를 반환합니다.
  RecoverPlatformAdditionalFeePolicyResponse,
}

oneof RecoverPlatformAdditionalFeePolicyError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  RecoverPlatformAdditionalFeePolicyError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  RecoverPlatformAdditionalFeePolicyError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  RecoverPlatformAdditionalFeePolicyError1,

  @ status - 404
  @ description - * `PlatformAdditionalFeePolicyNotFoundError`
  RecoverPlatformAdditionalFeePolicyError1,
}

@ http - GET /platform/contracts
@ summary - 계약 다건 조회
@ description - 여러 계약을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformContracts =
  GetPlatformContractsBody ->
  GetPlatformContractsOutput throws GetPlatformContractsError

oneof GetPlatformContractsOutput {
  @ status - 200
  @ description - 성공 응답으로 조회된 계약 리스트와 페이지 정보를 반환합니다.
  GetPlatformContractsResponse,
}

oneof GetPlatformContractsError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformContractsError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformContractsError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformContractsError1,
}

@ http - POST /platform/contracts
@ summary - 계약 생성
@ description - 새로운 계약을 생성합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc CreatePlatformContract =
  CreatePlatformContractBody ->
  CreatePlatformContractOutput throws CreatePlatformContractError

oneof CreatePlatformContractOutput {
  @ status - 200
  @ description - 성공 응답으로 생성된 계약 객체가 반환됩니다.
  CreatePlatformContractResponse,
}

oneof CreatePlatformContractError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  CreatePlatformContractError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  CreatePlatformContractError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  CreatePlatformContractError1,

  @ status - 409
  @ description - * `PlatformContractAlreadyExistsError`
  CreatePlatformContractError1,
}

@ http - GET /platform/contracts/{id}
@ summary - 계약 조회
@ description - 주어진 아이디에 대응되는 계약을 조회합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc GetPlatformContract =
  GetPlatformContractInput ->
  GetPlatformContractOutput throws GetPlatformContractError

struct GetPlatformContractInput {
  @ in - path
  @ summary - 조회할 계약 아이디
  id: string,
}

oneof GetPlatformContractOutput {
  @ status - 200
  @ description - 성공 응답으로 계약 객체를 반환합니다.
  PlatformContract,
}

oneof GetPlatformContractError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  GetPlatformContractError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  GetPlatformContractError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  GetPlatformContractError1,

  @ status - 404
  @ description - * `PlatformContractNotFoundError`
  GetPlatformContractError1,
}

@ http - PATCH /platform/contracts/{id}
@ summary - 계약 수정
@ description - 주어진 아이디에 대응되는 계약을 업데이트합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc UpdatePlatformContract =
  UpdatePlatformContractInput ->
  UpdatePlatformContractOutput throws UpdatePlatformContractError

@ description - 값이 명시되지 않은 필드는 업데이트되지 않습니다.
struct UpdatePlatformContractInput {
  @ in - path
  @ summary - 업데이트할 계약 아이디
  id: string,

  @ description - 계약 이름
  name?: string,

  @ description - 계약 내부 표기를 위한 메모
  memo?: string,

  @ description - 중개수수료
  platformFee?: PlatformFeeInput,

  @ description - 정산 주기
  settlementCycle?: PlatformSettlementCycleInput,

  @ description - 중개수수료에 대한 부가세 부담 주체
  platformFeeVatPayer?: PlatformPayer,

  @ description - 정산 시 결제금액 부가세 감액 여부
  subtractPaymentVatAmount?: boolean,
}

oneof UpdatePlatformContractOutput {
  @ status - 200
  @ description - 성공 응답으로 업데이트된 계약 객체가 반환됩니다.
  UpdatePlatformContractResponse,
}

oneof UpdatePlatformContractError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  UpdatePlatformContractError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  UpdatePlatformContractError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  UpdatePlatformContractError1,

  @ status - 404
  @ description - * `PlatformContractNotFoundError`
  UpdatePlatformContractError1,

  @ status - 409
  @ description - * `PlatformArchivedContractError`: 보관된 계약을 업데이트하려고 하는 경우
  UpdatePlatformContractError1,
}

@ http - POST /platform/contracts/{id}/archive
@ summary - 계약 보관
@ description - 주어진 아이디에 대응되는 계약을 보관합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc ArchivePlatformContract =
  ArchivePlatformContractInput ->
  ArchivePlatformContractOutput throws ArchivePlatformContractError

struct ArchivePlatformContractInput {
  @ in - path
  @ summary - 계약 아이디
  id: string,
}

oneof ArchivePlatformContractOutput {
  @ status - 200
  @ description - 성공 응답으로 보관된 계약 객체를 반환합니다.
  ArchivePlatformContractResponse,
}

oneof ArchivePlatformContractError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  ArchivePlatformContractError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  ArchivePlatformContractError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  ArchivePlatformContractError1,

  @ status - 404
  @ description - * `PlatformContractNotFoundError`
  ArchivePlatformContractError1,

  @ status - 409
  @ description - * `PlatformCannotArchiveScheduledContractError`: 예약된 업데이트가 있는 계약을 보관하려고 하는 경우
  ArchivePlatformContractError1,
}

@ http - POST /platform/contracts/{id}/recover
@ summary - 계약 복원
@ description - 주어진 아이디에 대응되는 계약을 복원합니다.
@ security
| - bearerJwt: []
| - portOne: []
proc RecoverPlatformContract =
  RecoverPlatformContractInput ->
  RecoverPlatformContractOutput throws RecoverPlatformContractError

struct RecoverPlatformContractInput {
  @ in - path
  @ summary - 계약 아이디
  id: string,
}

oneof RecoverPlatformContractOutput {
  @ status - 200
  @ description - 성공 응답으로 복원된 계약 객체를 반환합니다.
  RecoverPlatformContractResponse,
}

oneof RecoverPlatformContractError {
  @ status - 400
  @ description - * `InvalidRequestError`: 요청된 입력 정보가 유효하지 않은 경우
  RecoverPlatformContractError1,

  @ status - 401
  @ description - * `UnauthorizedError`: 인증 정보가 올바르지 않은 경우
  RecoverPlatformContractError1,

  @ status - 403
  @ description
  | * `PlatformNotEnabledError`: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
  | * `ForbiddenError`: 요청이 거절된 경우
  RecoverPlatformContractError1,

  @ status - 404
  @ description - * `PlatformContractNotFoundError`
  RecoverPlatformContractError1,
}
