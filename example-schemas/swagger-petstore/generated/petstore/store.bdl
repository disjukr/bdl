# standard - swagger-petstore

import swagger.petstore.entity { Order }

@ http - GET /store/inventory
@ security - api_key
@ tags - store
@ summary - Returns pet inventories by status.
@ description - Returns a map of status codes to quantities.
proc GetInventory = void -> GetInventoryOutput throws GetInventoryError

oneof GetInventoryOutput {
  @ status - 200
  @ description - successful operation
  int32[string],
}

oneof GetInventoryError {
  @ status - default
  @ description - Unexpected error
  void,
}

@ http - POST /store/order
@ tags - store
@ summary - Place an order for a pet.
@ description - Place a new order in the store.
proc PlaceOrder = Order -> PlaceOrderOutput throws PlaceOrderError

oneof PlaceOrderOutput {
  @ status - 200
  @ description - successful operation
  Order,
}

oneof PlaceOrderError {
  @ status - 400
  @ description - Invalid input
  void,

  @ status - 422
  @ description - Validation exception
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - GET /store/order/{orderId}
@ tags - store
@ summary - Find purchase order by ID.
@ description - For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
proc GetOrderById =
  GetOrderByIdInput ->
  GetOrderByIdOutput throws GetOrderByIdError

struct GetOrderByIdInput {
  @ in - path
  @ description - ID of order that needs to be fetched
  orderId: int64,
}

oneof GetOrderByIdOutput {
  @ status - 200
  @ description - successful operation
  Order,
}

oneof GetOrderByIdError {
  @ status - 400
  @ description - Invalid ID supplied
  void,

  @ status - 404
  @ description - Order not found
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - DELETE /store/order/{orderId}
@ tags - store
@ summary - Delete purchase order by identifier.
@ description - For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
proc DeleteOrder = DeleteOrderInput -> DeleteOrderOutput throws DeleteOrderError

struct DeleteOrderInput {
  @ in - path
  @ description - ID of the order that needs to be deleted
  orderId: int64,
}

oneof DeleteOrderOutput {
  @ status - 200
  @ description - order deleted
  void,
}

oneof DeleteOrderError {
  @ status - 400
  @ description - Invalid ID supplied
  void,

  @ status - 404
  @ description - Order not found
  void,

  @ status - default
  @ description - Unexpected error
  void,
}
