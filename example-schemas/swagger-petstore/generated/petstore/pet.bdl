# standard - swagger-petstore

import swagger.petstore.entity { ApiResponse, Pet, PetStatus }

@ http - PUT /pet
@ security - petstore_auth: write:pets, read:pets
@ tags - pet
@ summary - Update an existing pet.
@ description - Update an existing pet by Id.
proc UpdatePet = Pet -> UpdatePetOutput throws UpdatePetError

oneof UpdatePetOutput {
  @ status - 200
  @ description - Successful operation
  Pet,
}

oneof UpdatePetError {
  @ status - 400
  @ description - Invalid ID supplied
  void,

  @ status - 404
  @ description - Pet not found
  void,

  @ status - 422
  @ description - Validation exception
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - POST /pet
@ security - petstore_auth: write:pets, read:pets
@ tags - pet
@ summary - Add a new pet to the store.
@ description - Add a new pet to the store.
proc AddPet = Pet -> AddPetOutput throws AddPetError

oneof AddPetOutput {
  @ status - 200
  @ description - Successful operation
  Pet,
}

oneof AddPetError {
  @ status - 400
  @ description - Invalid input
  void,

  @ status - 422
  @ description - Validation exception
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - GET /pet/findByStatus
@ security - petstore_auth: write:pets, read:pets
@ tags - pet
@ summary - Finds Pets by status.
@ description - Multiple status values can be provided with comma separated strings.
proc FindPetsByStatus =
  FindPetsByStatusInput ->
  FindPetsByStatusOutput throws FindPetsByStatusError

struct FindPetsByStatusInput {
  @ in - query
  @ description - Status values that need to be considered for filter
  status?: PetStatus,
}

oneof FindPetsByStatusOutput {
  @ status - 200
  @ description - successful operation
  Pet[],
}

oneof FindPetsByStatusError {
  @ status - 400
  @ description - Invalid status value
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - GET /pet/findByTags
@ security - petstore_auth: write:pets, read:pets
@ tags - pet
@ summary - Finds Pets by tags.
@ description - Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
proc FindPetsByTags =
  FindPetsByTagsInput ->
  FindPetsByTagsOutput throws FindPetsByTagsError

struct FindPetsByTagsInput {
  @ in - query
  @ description - Tags to filter by
  tags?: string[],
}

oneof FindPetsByTagsOutput {
  @ status - 200
  @ description - successful operation
  Pet[],
}

oneof FindPetsByTagsError {
  @ status - 400
  @ description - Invalid tag value
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - GET /pet/{petId}
@ security
| api_key
| petstore_auth: write:pets, read:pets
@ tags - pet
@ summary - Find pet by ID.
@ description - Returns a single pet.
proc GetPetById = GetPetByIdInput -> GetPetByIdOutput throws GetPetByIdError

struct GetPetByIdInput {
  @ in - path
  @ description - ID of pet to return
  petId: int64,
}

oneof GetPetByIdOutput {
  @ status - 200
  @ description - successful operation
  Pet,
}

oneof GetPetByIdError {
  @ status - 400
  @ description - Invalid ID supplied
  void,

  @ status - 404
  @ description - Pet not found
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - POST /pet/{petId}
@ security - petstore_auth: write:pets, read:pets
@ tags - pet
@ summary - Updates a pet in the store with form data.
@ description - Updates a pet resource based on the form data.
proc UpdatePetWithForm =
  UpdatePetWithFormInput ->
  UpdatePetWithFormOutput throws UpdatePetWithFormError

struct UpdatePetWithFormInput {
  @ in - path
  @ description - ID of pet that needs to be updated
  petId: int64,

  @ in - query
  @ description - Name of pet that needs to be updated
  name?: string,

  @ in - query
  @ description - Status of pet that needs to be updated
  status?: string,
}

oneof UpdatePetWithFormOutput {
  @ status - 200
  @ description - successful operation
  Pet,
}

oneof UpdatePetWithFormError {
  @ status - 400
  @ description - Invalid input
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - DELETE /pet/{petId}
@ security - petstore_auth: write:pets, read:pets
@ tags - pet
@ summary - Deletes a pet.
@ description - Delete a pet.
proc DeletePet = DeletePetInput -> DeletePetOutput throws DeletePetError

struct DeletePetInput {
  @ in - header
  api_key?: string,

  @ in - path
  @ description - Pet id to delete
  petId: int64,
}

oneof DeletePetOutput {
  @ status - 200
  @ description - Pet deleted
  void,
}

oneof DeletePetError {
  @ status - 400
  @ description - Invalid pet value
  void,

  @ status - default
  @ description - Unexpected error
  void,
}

@ http - POST /pet/{petId}/uploadImage
@ security - petstore_auth: write:pets, read:pets
@ tags - pet
@ summary - Uploads an image.
@ description - Upload image of the pet.
proc UploadFile = UploadFileInput -> UploadFileOutput throws UploadFileError

struct UploadFileInput {
  @ in - path
  @ description - ID of pet to update
  petId: int64,

  @ in - query
  @ description - Additional Metadata
  additionalMetadata?: string,
}

oneof UploadFileOutput {
  @ status - 200
  @ description - successful operation
  ApiResponse,
}

oneof UploadFileError {
  @ status - 400
  @ description - No file uploaded
  void,

  @ status - 404
  @ description - Pet not found
  void,

  @ status - default
  @ description - Unexpected error
  void,
}
