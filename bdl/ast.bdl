struct Span {
  start: int32,
  end: int32,
}

struct Attribute {
  symbol: AttributeSymbol,
  name: Span,
  content?: Span,
}

struct BdlAst {
  attributes: Attribute[],
  statements: ModuleLevelStatement[],
}

union ModuleLevelStatement {
  Enum(
    attributes: Attribute[],
    keyword: Span,
    name: Span,
    bracketOpen: Span,
    items: EnumItem[],
    bracketClose: Span,
  ),
  Import(
    attributes: Attribute[],
    keyword: Span,
    path: PathItem[],
    bracketOpen: Span,
    items: ImportItem[],
    bracketClose: Span,
  ),
  Oneof(
    attributes: Attribute[],
    keyword: Span,
    name: Span,
    bracketOpen: Span,
    items: OneofItem[],
    bracketClose: Span,
  ),
  Proc(
    attributes: Attribute[],
    keyword: Span,
    name: Span,
    eq: Span,
    inputType: TypeExpression,
    arrow: Span,
    outputType: TypeExpression,
    error?: ThrowsError,
  ),
  Scalar(
    attributes: Attribute[],
    keyword: Span,
    name: Span,
    eq: Span,
    scalarType: TypeExpression,
  ),
  Socket(
    attributes: Attribute[],
    keyword: Span,
    name: Span,
    eq: Span,
    serverMessageType: TypeExpression,
    arrow: Span,
    clientMessageType: TypeExpression,
  ),
  Struct(
    attributes: Attribute[],
    keyword: Span,
    name: Span,
    bracketOpen: Span,
    fields: StructField[],
    bracketClose: Span,
  ),
  Union(
    attributes: Attribute[],
    keyword: Span,
    name: Span,
    bracketOpen: Span,
    items: UnionItem[],
    bracketClose: Span,
  ),
}

union AttributeSymbol {
  Sharp(
    start: int32,
    end: int32,
  ),
  At(
    start: int32,
    end: int32,
  ),
}

struct EnumItem {
  attributes: Attribute[],
  name: Span,
  comma?: Span,
}

struct ImportItem {
  name: Span,
  alias?: ImportAlias,
  comma?: Span,
}

struct ImportAlias {
  as: Span,
  name: Span,
}

union PathItem {
  Identifier(
    start: int32,
    end: int32,
  ),
  Dot(
    start: int32,
    end: int32,
  ),
}

struct OneofItem {
  attributes: Attribute[],
  itemType: TypeExpression,
  comma?: Span,
}

struct ThrowsError {
  keywordThrows: Span,
  errorType: TypeExpression,
}

struct StructField {
  attributes: Attribute[],
  name: Span,
  question?: Span,
  colon: Span,
  fieldType: TypeExpression,
  comma?: Span,
}

struct TypeExpression {
  valueType: Span,
  container?: Container,
}

struct Container {
  bracketOpen: Span,
  keyType?: Span,
  bracketClose: Span,
}

struct UnionItem {
  attributes: Attribute[],
  name: Span,
  struct?: UnionItemStruct,
  comma?: Span,
}

struct UnionItemStruct {
  bracketOpen: Span,
  fields: StructField[],
  bracketClose: Span,
}
