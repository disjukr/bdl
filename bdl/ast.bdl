# standard - conventional

enum OffsetEncoding {
  UTF8_CODE_UNIT,
  UTF16_CODE_UNIT,
  UNICODE_CODE_POINT,
}

struct Span {
  start: int32,
  end: int32,
}

struct Attribute {
  start: int32,
  end: int32,
  name: Span,
  content?: Span,
}

struct BdlAst {
  offsetEncoding: OffsetEncoding,
  attributes: Attribute[],
  statements: ModuleLevelStatement[],
}

union ModuleLevelStatement {
  Enum(
    attributes: Attribute[],
    start: int32,
    end: int32,
    name: Span,
    items: EnumItem[],
  ),
  Import(
    attributes: Attribute[],
    start: int32,
    end: int32,
    path: Span[],
    items: ImportItem[],
  ),
  Oneof(
    attributes: Attribute[],
    start: int32,
    end: int32,
    name: Span,
    items: OneofItem[],
  ),
  Proc(
    attributes: Attribute[],
    start: int32,
    end: int32,
    name: Span,
    inputType: TypeExpression,
    outputType: TypeExpression,
    errorType?: TypeExpression,
  ),
  Custom(
    attributes: Attribute[],
    start: int32,
    end: int32,
    name: Span,
    originalType: TypeExpression,
  ),
  Struct(
    attributes: Attribute[],
    start: int32,
    end: int32,
    name: Span,
    fields: StructField[],
  ),
  Union(
    attributes: Attribute[],
    start: int32,
    end: int32,
    name: Span,
    items: UnionItem[],
  ),
}

struct EnumItem {
  attributes: Attribute[],
  start: int32,
  end: int32,
  name: Span,
}

struct ImportItem {
  start: int32,
  end: int32,
  name: Span,
  alias?: Span,
}

struct OneofItem {
  attributes: Attribute[],
  start: int32,
  end: int32,
  itemType: TypeExpression,
}

struct StructField {
  attributes: Attribute[],
  start: int32,
  end: int32,
  name: Span,
  question?: Span,
  fieldType: TypeExpression,
}

struct TypeExpression {
  start: int32,
  end: int32,
  valueType: Span,
  container?: Container,
}

struct Container {
  start: int32,
  end: int32,
  keyType?: Span,
}

struct UnionItem {
  attributes: Attribute[],
  start: int32,
  end: int32,
  name: Span,
  fields?: StructField[],
}
