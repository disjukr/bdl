# standard - conventional

enum OffsetEncoding {
  UTF8_CODE_UNIT,
  UTF16_CODE_UNIT,
  UNICODE_CODE_POINT,
}

struct Span {
  start: int32,
  end: int32,
}

struct BonCst {
  offsetEncoding: OffsetEncoding,
  value: BonValue,
}

union BonValue {
  Primitive(typeInfo?: TypeInfo, value: PrimitiveValue),
  Array(typeInfo?: TypeInfo, bracketOpen: Span, items: Item[], bracketClose: Span),
  Dictionary(typeInfo?: TypeInfo, bracketOpen: Span, entries: Entry[], bracketClose: Span),
  Object(typeInfo?: TypeInfo, bracketOpen: Span, fields: Field[], bracketClose: Span),
  UnionValue(
    typeInfo?: TypeInfo,
    itemName: Span,
    bracketOpen: Span,
    fields: Field[],
    bracketClose: Span,
  ),
}

union PrimitiveValue {
  Null(start: int32, end: int32),
  Boolean(start: int32, end: int32),
  Identifier(start: int32, end: int32),
  Integer(sign?: Span, value: Span),
  Float(value: FloatValue),
  String(start: int32, end: int32),
}

union FloatValue {
  NotANumber(start: int32, end: int32),
  Infinity(sign?: Span, value: Span),
  Value(
    sign?: Span,
    significand: Span,
    fraction?: Fraction,
    exponent?: Exponent,
  ),
}

struct Fraction {
  dot: Span,
  value: Span,
}

struct Exponent {
  marker: Span,
  sign?: Span,
  value: Span,
}

struct Item {
  value: BonValue,
  comma?: Span,
}

struct Entry {
  key: BonValue,
  colon: Span,
  value: BonValue,
  comma?: Span,
}

struct Field {
  name: Span,
  colon: Span,
  value: BonValue,
  comma?: Span,
}

struct TypeInfo {
  typePath: PathItem[],
  colonColon: Span,
}

union PathItem {
  Identifier(
    start: int32,
    end: int32,
  ),
  Dot(
    start: int32,
    end: int32,
  ),
}
