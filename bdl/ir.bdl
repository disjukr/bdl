struct BdlIr {
  modules: Module[string], // key: module path (bdl.ast, bdl.ir, ...)
  defs: Def[string], // key: def path (bdl.ast.BdlAst, bdl.ir.BdlIr, ...)
}

struct Module {
  fileUrl?: string,
  attributes: string[string],
  defPaths: string[],
  imports: Import[],
}

struct Import {
  attributes: string[string],
  modulePath: string,
  items: ImportItem[],
}

struct ImportItem {
  name: string,
  as?: string,
}

struct Def {
  attributes: string[string],
  name: string,
  body: DefBody,
}

union DefBody {
  Enum(
    items: EnumItem[],
  ),
  Oneof(
    items: OneofItem[],
  ),
  Rpc(
    items: RpcItem[],
  ),
  Scalar(
    scalarType: Type,
  ),
  Socket(
    serverToClient?: SocketItem,
    clientToServer?: SocketItem,
  ),
  Struct(
    fields: StructField[],
  ),
  Union(
    items: UnionItem[],
  ),
}

struct EnumItem {
  attributes: string[string],
  name: string,
}

struct OneofItem {
  attributes: string[string],
  type: Type,
}

struct RpcItem {
  attributes: string[string],
  name: string,
  inputType: Type,
  outputType: Type,
  errorType?: Type,
}

struct SocketItem {
  attributes: string[string],
  messageType: Type,
}

struct StructField {
  attributes: string[string],
  name: string,
  itemType: Type,
  optional: boolean,
}

union Type {
  Plain(valueTypePath: string),
  Array(valueTypePath: string),
  Dictionary(valueTypePath: string, keyTypePath: string),
}

struct UnionItem {
  attributes: string[string],
  name: string,
  fields: StructField[],
}
